<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>408</title>
    <link href="/others/408/"/>
    <url>/others/408/</url>
    
    <content type="html"><![CDATA[<p>放上一些没头没尾的东西</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IniSize 100</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    ElemType *data; <span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize,length; <span class="hljs-comment">//数组中最大容量和当前个数</span><br>&#125; SeqList;  <span class="hljs-comment">//动态分配数组顺序表的类型定义</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initList</span><span class="hljs-params">(SeqList *L)</span>   <span class="hljs-comment">//初始化</span></span><br><span class="hljs-function"></span>&#123;<br>    L-&gt;data = (ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType)*IniSize);  <span class="hljs-comment">//动态分配</span><br>    L-&gt;length = <span class="hljs-number">0</span>;<br>    L-&gt;MaxSize = IniSize;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListAdd</span><span class="hljs-params">(SeqList *L, ElemType e)</span>    <span class="hljs-comment">//添加</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L-&gt;length == IniSize)    <span class="hljs-comment">//当满时</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    L-&gt;data[L-&gt;length] = e;<br>    L-&gt;length++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SeqList *L, <span class="hljs-keyword">int</span> i, ElemType e)</span>  <span class="hljs-comment">//在表中第i个位置插入指定元素e</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length || L-&gt;length &gt;= IniSize)  <span class="hljs-comment">//判断i的范围有效 判断存储空间是否满</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L-&gt;length; j&gt;=i; j--) <span class="hljs-comment">//将第i个元素以及之后的元素后移</span><br>        L-&gt;data[j] = L-&gt;data[j<span class="hljs-number">-1</span>];<br><br>    L-&gt;data[i<span class="hljs-number">-1</span>] = e;   <span class="hljs-comment">//在位置i处放入e</span><br>    L-&gt;length++;    <span class="hljs-comment">//线性表长度加1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SeqList *L, <span class="hljs-keyword">int</span> i, ElemType e)</span>  <span class="hljs-comment">//删除表中第i个位置的元素 并用e返回删除元素的值</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i&gt;L-&gt;length)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    e = L-&gt;data[i<span class="hljs-number">-1</span>];   <span class="hljs-comment">//将被删除元素赋值给e</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i; j&lt;L-&gt;length; j++)  <span class="hljs-comment">//将第i个元素后的前移</span><br>        L-&gt;data[j<span class="hljs-number">-1</span>] = L-&gt;data[j];<br>    <br>    L-&gt;length--;    <span class="hljs-comment">//线性表长度减1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LocatElem</span><span class="hljs-params">(SeqList *L, ElemType e)</span>  <span class="hljs-comment">//按值查找 在表中查找具有给定关键字值的元素</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;L-&gt;length; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(L-&gt;data[i] == e)<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>; <span class="hljs-comment">//下标为i的元素值为e 返回其位序i+1</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//查找失败</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Reverse</span><span class="hljs-params">(SeqList *L)</span>    <span class="hljs-comment">//将全部元素逆置 时间复杂度为o(1)</span></span><br><span class="hljs-function"></span>&#123;                           <span class="hljs-comment">//思想：扫描前半段元素 与后半段对应位置元素互换</span><br>    ElemType t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;L-&gt;length/<span class="hljs-number">2</span>; i++)<br>    &#123;<br>        t = L-&gt;data[i];<br>        L-&gt;data[i] = L-&gt;data[L-&gt;length-i<span class="hljs-number">-1</span>];<br>        L-&gt;data[L-&gt;length-i<span class="hljs-number">-1</span>] = t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> </span><br><span class="hljs-class">&#123;</span><br>    ElemType data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针域</span><br>&#125;LNode, *LinkList;<br><br><span class="hljs-function">LinkList <span class="hljs-title">List_HeadInsert</span><span class="hljs-params">(LinkList L)</span>    <span class="hljs-comment">//头插法 逆向建立 读入数据与生成链表数据顺序相反</span></span><br><span class="hljs-function"></span>&#123;<br>    LNode *s;   <span class="hljs-comment">//指针变量</span><br>    <span class="hljs-keyword">int</span> x;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));    <span class="hljs-comment">//创建头结点</span><br>    L-&gt;next = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//初始为空链表</span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);    <span class="hljs-comment">//输入值</span><br><br>    <span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)    <span class="hljs-comment">//输入9999结束</span><br>    &#123;<br>        s = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));  <span class="hljs-comment">//创建新结点</span><br>        s-&gt;data = x;<br>        s-&gt;next = L-&gt;next;<br>        L-&gt;next = s;    <span class="hljs-comment">//将新结点插入表中 L为头指针</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-function">LinkList <span class="hljs-title">List_TailInsert</span><span class="hljs-params">(LinkList L)</span>    <span class="hljs-comment">//尾插法 </span></span><br><span class="hljs-function"></span>&#123;<br>    LNode *s;<br>    <span class="hljs-keyword">int</span> x;<br>    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    LNode *r = L;   <span class="hljs-comment">//r为表尾指针   让其始终指向当前链表的尾指针</span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);    <span class="hljs-comment">//输入结点值</span><br><br>    <span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)<br>    &#123;<br>        s = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        s-&gt;data = x;<br>        r-&gt;next = s;<br>        r = s;  <span class="hljs-comment">//r指向新的表尾指针</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    &#125;<br><br>    r-&gt;next = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//尾结点指针置空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-function">LinkList <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i)</span>   <span class="hljs-comment">//按序号查找结点值 顺指针next域逐个往下搜索</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;    <span class="hljs-comment">//计数 初始值为1</span><br>    LNode *p=L-&gt;next;   <span class="hljs-comment">//第一个结点指针赋给p</span><br><br>    <span class="hljs-keyword">if</span>(!i)<br>        <span class="hljs-keyword">return</span> L;   <span class="hljs-comment">//i为0 则返回头结点</span><br>    <br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//i无效 返回NULL</span><br>    <br>    <span class="hljs-keyword">while</span>(p &amp;&amp; j&lt;i) <span class="hljs-comment">//从第一个结点开始寻找 查找第i个结点</span><br>    &#123;<br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> p;   <span class="hljs-comment">//返回第i个结点的指针 若i大于表长则返回NULL</span><br>&#125;<br><br><span class="hljs-function">LinkList <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L, ElemType e)</span> <span class="hljs-comment">//按值查找表结点 较简单</span></span><br><span class="hljs-function"></span>&#123;<br>    LNode *p=L-&gt;next;<br><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data!=e)<br>        p = p-&gt;next;<br><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span>    //与单链表区别在于插入与删除元素 插入删除元素均为<span class="hljs-title">o</span>(1)</span><br><span class="hljs-class">&#123;</span><br>    ElemType data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span>  *<span class="hljs-title">prior</span>, *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针域 前驱和后继指针</span><br>&#125;DNode, *DLinkList;<br></code></pre></td></tr></table></figure><h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Maxsize 50</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  //基础版</span><br><span class="hljs-class">&#123;</span><br>    ElemType data[Maxsize]; <span class="hljs-comment">//存放栈中元素</span><br>    <span class="hljs-keyword">int</span> top;    <span class="hljs-comment">//栈顶指针</span><br>&#125; SeqStack;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SeqStack *S)</span> <span class="hljs-comment">//初始化</span></span><br><span class="hljs-function"></span>&#123;<br>    S-&gt;top = <span class="hljs-number">-1</span>;    <span class="hljs-comment">//初始化栈顶指针</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SeqStack S)</span> <span class="hljs-comment">//判栈空</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top == <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//栈空</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//非空</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(SeqStack *S, ElemType x)</span>  <span class="hljs-comment">//进栈</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(S-&gt;top == Maxsize<span class="hljs-number">-1</span>) <span class="hljs-comment">//栈满</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    S-&gt;top++;   <span class="hljs-comment">//指针先加1</span><br>    S-&gt;data[S-&gt;top] = x;    <span class="hljs-comment">//入栈</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SeqStack *S,ElemType *x)</span>   <span class="hljs-comment">//出栈 注意使用 *x</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(S-&gt;top == <span class="hljs-number">-1</span>)    <span class="hljs-comment">//栈空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    *x = S-&gt;data[S-&gt;top];   <span class="hljs-comment">//先出栈</span><br>    S-&gt;top--;   <span class="hljs-comment">//指针减一</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function">ElemType <span class="hljs-title">Gettop</span><span class="hljs-params">(SeqStack S)</span> <span class="hljs-comment">//取栈顶元素</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top == <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">return</span> S.data[S.top];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BracketsCheck</span><span class="hljs-params">(ElemType str[])</span>   <span class="hljs-comment">//括号匹配问题</span></span><br><span class="hljs-function"></span>&#123;<br>    SeqStack S;<br>    InitStack(&amp;S);<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">int</span> i;<br><br>    <span class="hljs-keyword">while</span>(str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">switch</span> (str[i])<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>            Push(&amp;S, str[i]);<br>            <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>            ch = Gettop(S);<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>                Pop(&amp;S, &amp;ch);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>            ch = Gettop(S);<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;[&#x27;</span>)<br>                Pop(&amp;S, &amp;ch);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>            ch = Gettop(S);<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;(&#x27;</span>)<br>                Pop(&amp;S, &amp;ch);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(StackEmpty(S))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Maxsize 50</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> //链式队列结点</span><br><span class="hljs-class">&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>    <br>&#125; LinkNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  //链式队列</span><br><span class="hljs-class">&#123;</span><br>    LinkNode *front, *rear; <span class="hljs-comment">//队列的队头和队尾指针</span><br>&#125; LinkQueue;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue *Q)</span>    <span class="hljs-comment">//初始化</span></span><br><span class="hljs-function"></span>&#123;<br>    Q-&gt;front = Q-&gt;rear = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));   <span class="hljs-comment">//建立头结点</span><br>    Q-&gt;front-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//初始为空</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(LinkQueue Q)</span>   <span class="hljs-comment">//判队空</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.front == Q.rear)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue *Q, ElemType x)</span>  <span class="hljs-comment">//入队</span></span><br><span class="hljs-function"></span>&#123;<br>    LinkNode *s = (LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkNode));<br><br>    s-&gt;data = x;    <span class="hljs-comment">//创建新结点 插入到链尾</span><br>    s-&gt;next = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//新结点无下个结点</span><br><br>    Q-&gt;rear-&gt;next = s;  <span class="hljs-comment">//入队新结点为最后一个结点</span><br>    Q-&gt;rear = s;    <span class="hljs-comment">//队尾指向入队新结点</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue *Q, ElemType *x)</span> <span class="hljs-comment">//出队</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q-&gt;front == Q-&gt;rear) <span class="hljs-comment">//空队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    LinkNode *p = Q-&gt;front-&gt;next;   <span class="hljs-comment">//结点指针指向队首有效结点</span><br><br>    *x = p-&gt;data;   <span class="hljs-comment">//出队结点值</span><br>    Q-&gt;front-&gt;next = p-&gt;next;   <span class="hljs-comment">//队首结点指针指向下个结点</span><br><br>    <span class="hljs-keyword">if</span>(Q-&gt;rear == p)    <span class="hljs-comment">//若原队列中只有一个结点 删除后变空队</span><br>        Q-&gt;rear = Q-&gt;front;<br>    <br>    <span class="hljs-built_in">free</span>(p);    <span class="hljs-comment">//释放空间</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Maxsize 50</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data[Maxsize]; <span class="hljs-comment">//存放队列元素</span><br>    <span class="hljs-keyword">int</span> front, rear;    <span class="hljs-comment">//队头指针和队尾指针</span><br>&#125; SeqQueue;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SeqQueue *Q)</span> <span class="hljs-comment">//初始化</span></span><br><span class="hljs-function"></span>&#123;<br>    Q-&gt;rear = Q-&gt;front = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化队首、队尾指针</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(SeqQueue Q)</span>    <span class="hljs-comment">//判空</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.rear == Q.front)   <span class="hljs-comment">//队空条件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SeqQueue *Q, ElemType x)</span>   <span class="hljs-comment">//入队</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>((Q-&gt;rear+<span class="hljs-number">1</span>)%Maxsize == Q-&gt;front) <span class="hljs-comment">//队满</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    Q-&gt;data[Q-&gt;rear] = x;<br>    Q-&gt;rear = (Q-&gt;rear)%Maxsize;    <span class="hljs-comment">//队尾指针加1 取模</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SeqQueue *Q, ElemType *x)</span>  <span class="hljs-comment">//出队</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q-&gt;rear == Q-&gt;front)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    *x = Q-&gt;data[Q-&gt;front];<br>    Q-&gt;front = (Q-&gt;front)%Maxsize;  <span class="hljs-comment">//队头指针加1 取模</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><h4 id="next数组值求解和nextval数组求解"><a href="#next数组值求解和nextval数组求解" class="headerlink" title="next数组值求解和nextval数组求解"></a>next数组值求解和nextval数组求解</h4><blockquote><p><strong><a href="https://www.zhihu.com/question/62030859/answer/835271234">https://www.zhihu.com/question/62030859/answer/835271234</a></strong></p></blockquote><p>假如有这样一串字符串</p><p>1 2 3 4 5 6</p><p>a a a a a a</p><p>这可以说是一个字符串间规律最强的一个数组了吧，让我们来手动模拟一下。</p><p>首先默认第一位是0，第二位是1，从第3位开始求，比较第3-1位和next[3-1]的字符是否相同，若相同，则next[3]=next[2]+1</p><p>所以第3位的值就是2.那么依此类推就可以得到，这个字符串的next数组为</p><p>1 2 3 4 5 6</p><p>a a a a a a</p><p>0 1 2 3 4 5</p><p>总结来看就是相同就在他的next数组值加1.</p><p>那么有这样一个字符串那</p><p>1 2 3 4 5 6</p><p>a b c d e f</p><p>默认给出第1位为0 第二位为1 ，发现全都不一样,可以说毫无相关性了，所以next数组为</p><p>1 2 3 4 5 6</p><p>a b c d e f</p><p>0 1 1 1 1 1</p><p>这两种极端情况可以让大家初步了解一下计算next数组的方法，起码可以初步理解一下next数组的意义。但是这还不完善。</p><p>下面介绍一到北邮2016年考研真题</p><p>1 2 3 4 5 6 7 8</p><p>a b a a b c a c</p><p>0 1 1 2 2 3 1 2</p><p>这是一个考试常见的字符串，是如何计算的那？</p><p>第n位：next[n]的值来自于第n-1位的字符，通过跟第next[n-1]位字符比较，如果相同next[n]=next[n-1]+1,如果不相同，就跟第next[next[n-1]]位的字符比较，就这样迭代直到相同的时候，加上1，如果实在没有，就为1.</p><p>这一段话可能很难理解，逐位分析。</p><p>让我们从依次来看：</p><p>第3位：第2位和第1位比较，不相同 所以为1</p><p>第4位：第3位和第1位比较，相同，所以为2</p><p>第5位：第4位和第2位比较，不相同，和第1位比较，相同，所以为2</p><p>第6位：第5位和第2位比较， 相同，所以为3</p><p>第7位：第6位和第3位比较，不同，和第1位比较，不同，所以为1</p><p>第8位：第7位和第1位比较，相同，所以为2.</p><p>这就是next数组的手动计算方法。</p><p>接下来介绍如何根据next数组计算nextval数组</p><p>nextval是在next数组的基础上优化算法，避免不必要的浪费。其实我也不太理解nextval的具体原理，现只能介绍一下如何计算。</p><p>依旧用上面北邮的真题为例，其真题本身求的就是nextval数组</p><p>现在我们已经有了next数组：</p><p>1 2 3 4 5 6 7 8</p><p>a b a a b c a c</p><p>0 1 1 2 2 3 1 2</p><p>现在通过next数组计算nextval数组，nextval数组与next相反，是找不同，</p><p>1 2 3 4 5 6 7 8</p><p>a b a a b c a c</p><p>0 1 1 2 2 3 1 2</p><p>0 1 0 2 1 3 0 2</p><p>第1位：必为0</p><p>第2位：第2位next值为1，所以第2位和第1位比较，不同，为第2位的next 值1</p><p>第3位：第3位next值为1，所以第3位和第1位比较，相同，因为到第1位了，所以为0</p><p>第4位：第4位next值为2，所以第4位和第2位比较，不同，就为第4位next值2</p><p>第5位：第5位next值为2，所以第5位和第2位比较，相同，则继续，第2位和第1位不同，则为第2位的next值1</p><p>第6位：第6位next值为3，所以第6位和第3位比较，不同，就为第6位的next值3</p><p>第7位：第7位next值为1，所以第7位和第1位比较，相同，则为0</p><p>第8位：第8位next值为2，所以第8位和第2位比较，不同，则为第8位的next值2</p><p>【简而言之】第n位nextval数组值就是，让第n位字符和第next[n]位比较，不同，则nextval[n]=next[n],如果相同，则比较第next[next[n]]位和第next[n]位比较，如果不同，则nextVal[n]=next[next[n]].就是这样的计算方式。</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h4 id="递归二叉树"><a href="#递归二叉树" class="headerlink" title="递归二叉树"></a>递归二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BitNode</span>  //二叉树结点结构</span><br><span class="hljs-class">&#123;</span><br>    ElemType data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BitNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span>    <span class="hljs-comment">//左右孩子指针</span><br>&#125; BitTree;<br><br><span class="hljs-function">BitTree* <span class="hljs-title">Creatbitree</span><span class="hljs-params">(BitTree *T)</span>    <span class="hljs-comment">//创建二叉树</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br><br>    <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    T = (BitTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BitTree));  <span class="hljs-comment">//传进来的数据为树节点的指针 此句可理解为实例化该指针指向树节点</span><br>    <br>    T-&gt;data = ch;<br>    T-&gt;lchild = Creatbitree(T-&gt;lchild); <span class="hljs-comment">//递归创建左子树</span><br>    T-&gt;rchild = Creatbitree(T-&gt;rchild); <span class="hljs-comment">//递归创建右子树</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(BitTree *T)</span>   <span class="hljs-comment">//先序遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)   <span class="hljs-comment">//非空</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, T-&gt;data); <span class="hljs-comment">//访问根结点</span><br>        PreOrder(T-&gt;lchild);    <span class="hljs-comment">//递归遍历左子树</span><br>        PreOrder(T-&gt;rchild);    <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BitTree *T)</span>    <span class="hljs-comment">//中序遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)   <span class="hljs-comment">//非空</span><br>    &#123;<br>        InOrder(T-&gt;lchild); <span class="hljs-comment">//递归遍历左子树</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, T-&gt;data); <span class="hljs-comment">//访问根结点</span><br>        InOrder(T-&gt;rchild); <span class="hljs-comment">//递归遍历右子树</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(BitTree *T)</span>  <span class="hljs-comment">//后续遍历</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)   <span class="hljs-comment">//非空</span><br>    &#123;<br>        PostOrder(T-&gt;lchild); <span class="hljs-comment">//递归遍历左子树</span><br>        PostOrder(T-&gt;rchild); <span class="hljs-comment">//递归遍历右子树</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, T-&gt;data); <span class="hljs-comment">//访问根结点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非递归二叉树(需借助栈结构)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>美团ctf</title>
    <link href="/reverse/%E7%BE%8E%E5%9B%A2ctf/"/>
    <url>/reverse/%E7%BE%8E%E5%9B%A2ctf/</url>
    
    <content type="html"><![CDATA[<center>time:2021-12-11</center><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a><strong>Random</strong></h1><p>32位无壳 ida32打开</p><p>找到 main 函数 反编译查看主要逻辑</p><p><img src="/img/image-20211212133245684.png" alt="img"></p><p><img src="/img/image-20211212133303009.png" alt="img"></p><p>因为每次循环都给定了 rand() 的种子值</p><p>所以可以动调获得每次异或的值</p><p>这里输入</p><blockquote><p><strong>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</strong></p></blockquote><p>经过循环后 我们输入的值变成</p><p>(其中第一位的值是 0x39 )</p><p>(可以只输入一位数来进行验证)</p><p><img src="/img/image-20211212133833110.png" alt="img"></p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">xor = [<span class="hljs-number">0x39</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xAA</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x4D</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0x9A</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0xF6</span>,<br>       <span class="hljs-number">0xF8</span>,<span class="hljs-number">0xD0</span>,<span class="hljs-number">0xC5</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0xA2</span>,<span class="hljs-number">0xA7</span>,<span class="hljs-number">0xE1</span>,<span class="hljs-number">0xDE</span>,<span class="hljs-number">0x5F</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x4F</span>,<br>       <span class="hljs-number">0x12</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xD9</span>,<span class="hljs-number">0x3A</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0xDD</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xB9</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0xEE</span>,<br>       <span class="hljs-number">0x87</span>,<span class="hljs-number">0xB2</span>,<span class="hljs-number">0xD0</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0xD8</span>,<span class="hljs-number">0x38</span>]<br><br>inp = <span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span><br><br>flag = [<span class="hljs-number">0x3E</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xF1</span>, <br>        <span class="hljs-number">0x70</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x8B</span>, <br>        <span class="hljs-number">0x58</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x57</span>, <br>        <span class="hljs-number">0x88</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <br>        <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x5A</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(inp[i]) ^ xor[i] ^ flag[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{3e625fe0-fb18-4f87-93c1-1ec217f86796}</strong></p></blockquote><hr><h1 id="wow"><a href="#wow" class="headerlink" title="wow"></a><strong>wow</strong></h1><h1 id="superflat"><a href="#superflat" class="headerlink" title="superflat"></a>superflat</h1>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安洵杯</title>
    <link href="/reverse/%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    <url>/reverse/%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-27</center><h1 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h1><p>32位 无壳 ida32打开</p><p>找到 main 函数 查看</p><p><img src="/img/image-20211206215244257.png" alt="img"></p><p>一个一个查找 发现</p><p><img src="/img/image-20211206215754690.png" alt="img"></p><p>找到对应地址 0x419030</p><p>发现花指令</p><p><img src="/img/image-20211206215840009.png" alt="img"></p><p>这里的花指令是由于 00419043 处的 jz 跳转地址+3</p><p>所以nop掉 00419045 处和之后的两处地址即可</p><p>之后在起始地址处生成函数即可</p><p><img src="/img/image-20211206220037153.png" alt="img"></p><p>之后进入函数查看</p><p>发现是对 loc_401D10 处 581 个数据进行了异或操作</p><p><img src="/img/image-20211206220250592.png" alt="img"></p><p><img src="/img/image-20211206220308400.png" alt="img"></p><p>写个 idapyhton 或者 idc 脚本复原</p><p>之后生成函数 打开查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><br>start = <span class="hljs-number">0x401D10</span><br><br><span class="hljs-keyword">while</span>(start &lt; <span class="hljs-number">0x401D10</span> + <span class="hljs-number">0x245</span>):<br>    value = ida_bytes.get_byte(start)<br>    value ^= <span class="hljs-number">0x37</span><br>    ida_bytes.patch_byte(start , value)<br>    start += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/image-20211206221715429.png" alt="img"></p><p><img src="/img/image-20211206221744878.png" alt="img"></p><p>题有两个难点(恶心人)</p><p>1.W型栅栏加密    2.xxtea加密的 dealt 未知(需要爆破求解)</p><p><img src="/img/image-20211207211253901.png" alt="img"></p><p><img src="/img/image-20211207211308604.png" alt="img"></p><p>补一个 W型栅栏密码</p><p><strong><a href="http://www.atoolbox.net/Tool.php?Id=777">栅栏密码加密/解密【W型】 - 一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></strong></p><p>解码脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> enc[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0xBF8ED8A5</span>, <span class="hljs-number">0xE115A9F9</span>, <span class="hljs-number">0xFCD3F08A</span>, <span class="hljs-number">0x8BBF8946</span>, <span class="hljs-number">0xC308B162</span>, <span class="hljs-number">0x2B19CF29</span>,<span class="hljs-number">0x7A770656</span>, <span class="hljs-number">0xA4BAE4BA</span>,<br><span class="hljs-number">0x4E3E8CE4</span>, <span class="hljs-number">0x01A7E1D9</span>, <span class="hljs-number">0x75E9CE04</span>, <span class="hljs-number">0x22B593B9</span>, <span class="hljs-number">0x497742B4</span>, <span class="hljs-number">0x24EB15F6</span>,<span class="hljs-number">0xF2C2FF0E</span>, <span class="hljs-number">0x47973039</span>,<br><span class="hljs-number">0xC801CA0D</span>, <span class="hljs-number">0x6A125861</span>, <span class="hljs-number">0x80320BE8</span>, <span class="hljs-number">0x0385BD47</span>, <span class="hljs-number">0x69F96DDD</span>, <span class="hljs-number">0xE56490D1</span>,<span class="hljs-number">0x2D3CAD4B</span>, <span class="hljs-number">0x2D4200BE</span>,<br><span class="hljs-number">0x89EF6979</span>, <span class="hljs-number">0x4A91885D</span>, <span class="hljs-number">0x019DEBC7</span>, <span class="hljs-number">0x3BF8FD96</span>, <span class="hljs-number">0x1BDD2557</span>, <span class="hljs-number">0xB8685FDD</span>,<span class="hljs-number">0x57226614</span>, <span class="hljs-number">0x9F585C28</span>&#125;;<br><span class="hljs-comment">//abcdefghijklmnopqrstuvwxyz123456</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;conio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *code ,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *key ,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> next,end,sum;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> rounds,e,delta=<span class="hljs-number">0x44336730</span>+<span class="hljs-number">77</span>;<br><span class="hljs-keyword">int</span> i;<br>    <br>rounds=<span class="hljs-number">6</span>+<span class="hljs-number">52</span>/n;<br>sum=rounds*delta;<br>next=code[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置next为code的第一个</span><br>    <br><span class="hljs-keyword">do</span><br>&#123;<br>e=(sum&gt;&gt;<span class="hljs-number">2</span>)&amp;<span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span>(i=n<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//解密最后一个到第二个</span><br>&#123;<br>end=code[i<span class="hljs-number">-1</span>];<br>code[i]-=(( (end&gt;&gt;<span class="hljs-number">5</span>^next&lt;&lt;<span class="hljs-number">2</span>) + (next&gt;&gt;<span class="hljs-number">3</span>^end&lt;&lt;<span class="hljs-number">4</span>) ) ^ ((sum^next) + (key[(i&amp;<span class="hljs-number">3</span>)^e]^end) ));<br>next=code[i];<br>&#125;<br>end=code[n<span class="hljs-number">-1</span>];<br>code[<span class="hljs-number">0</span>]-=(( (end&gt;&gt;<span class="hljs-number">5</span>^next&lt;&lt;<span class="hljs-number">2</span>) + (next&gt;&gt;<span class="hljs-number">3</span>^end&lt;&lt;<span class="hljs-number">4</span>) ) ^ ( (sum^next) +(key[i&amp;<span class="hljs-number">3</span>^e]^end) ));<br>next=code[<span class="hljs-number">0</span>];<br>sum-=delta;<br>&#125;<span class="hljs-keyword">while</span>(--rounds);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> key[<span class="hljs-number">4</span>]=&#123; <span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n=<span class="hljs-number">32</span>;<br><span class="hljs-keyword">char</span> flag[<span class="hljs-number">32</span>];<br><span class="hljs-keyword">int</span> index[<span class="hljs-number">32</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">17</span>,<span class="hljs-number">27</span>,<span class="hljs-number">18</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">19</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">21</span>,<span class="hljs-number">29</span>,<span class="hljs-number">22</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">30</span>,<span class="hljs-number">24</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">25</span>,<span class="hljs-number">31</span>,<span class="hljs-number">26</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">16</span>&#125;;<br><span class="hljs-keyword">int</span> i;<br>    <br>decrypt(enc,key,n);<br>    <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)<br>flag[i]=enc[index[i]];<br>    <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">31</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>flag[i]^=flag[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">32</span>];<br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,flag);<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Th4_1mp0rtant_th2n9_is_t0_le@rn!}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋杯秋赛</title>
    <link href="/reverse/%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%A7%8B%E8%B5%9B/"/>
    <url>/reverse/%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%A7%8B%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-27</center><h1 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h1><p>查壳 发现upx壳</p><p>代码脱壳无果 之后手脱 ida32打开</p><p>shift+f12查找相关字符串</p><p><img src="/img/image-20211202153538062.png" alt="img"></p><p>找到base64表和加密数据</p><p>先用base64解码发现没那么简单</p><p>之后查找密文引用处 做一个简单的分析</p><p><img src="/img/image-20211202153726363.png" alt="img"></p><p>为什么确定是变码base64</p><p>理由：查找引用 sub_40186F 函数的函数中 找到开头函数 进入查看</p><p>(这里的变码函数是从 main 函数起始开始一步步查找找到的)</p><p><img src="/img/image-20211202153853838.png" alt="img"></p><p>函数内部逻辑：</p><p><img src="/img/image-20211202153928192.png" alt="img"></p><p>找一个在线C编译或者自己复制代码查看 得出结果</p><blockquote><p><strong>ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz</strong></p></blockquote><p>退回查看异或操作具体内容 逻辑比较简单</p><p><img src="/img/image-20211202154233012.png" alt="img"></p><p>写出脚本求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment">#base64初始加密表</span><br><br>model = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRST0123456789+/UVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span>  <span class="hljs-comment">#魔改之后的表</span><br><br>flag = <span class="hljs-string">&quot;7G5d5bAy+TMdLWlu5CdkMTlcJnwkNUgb2AQL3CcmPpVf6DAp72scOSlb&quot;</span>  <span class="hljs-comment">#密文 要解密的字符串</span><br><br>STR = <span class="hljs-built_in">list</span>(base64.b64decode(flag.translate(<span class="hljs-built_in">str</span>.maketrans(model,table))))  <span class="hljs-comment">#maketrans作用 将model中要替换的字符转换为table对应的字符（同一位置）</span><br>      <span class="hljs-comment">#list作用 将数据转换成列表 即数组</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(STR)):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(STR) % i):<br>            STR[j] ^= (j + i)<br>        <span class="hljs-keyword">else</span>:<br>            STR[j] ^= ((j % i) + j)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(STR)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(STR[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{5e2200bc-f21a-5421-a90b-57dec19fe196}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑</title>
    <link href="/reverse/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <url>/reverse/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-20</center><h1 id="ROR"><a href="#ROR" class="headerlink" title="ROR"></a>ROR</h1><p>题目流程比较简单</p><p>把已知的东西都给了</p><p>然后自己想着爆破 爆破好久没有结果出来</p><p>看了其他师傅的wp之后发现是 z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>s = Solver()<br><br>flags = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    flags.append(BitVec(<span class="hljs-string">f&#x27;flag<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,<span class="hljs-number">8</span>))    <span class="hljs-comment">#https://blog.shi1011.cn/learn/1789</span><br>                                          <span class="hljs-comment">#声明变量为 flag0 flag1 flag2 ...</span><br>v6 = [<span class="hljs-number">128</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><br>des = [ <span class="hljs-number">0x65</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xFB</span>,<br> <span class="hljs-number">0x87</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x39</span>,<br> <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x39</span>,<br> <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x79</span>]<br><br>s_box = [ <span class="hljs-number">0x65</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7B</span>,<br> <span class="hljs-number">0x02</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xD7</span>,<br> <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFF</span>,<br> <span class="hljs-number">0x99</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xD2</span>,<br> <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x0C</span>,<br> <span class="hljs-number">0x00</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xDE</span>,<br> <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xFC</span>,<br> <span class="hljs-number">0x44</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x98</span>,<br> <span class="hljs-number">0x68</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xED</span>,<br> <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xA8</span>,<br> <span class="hljs-number">0x09</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x04</span>,<br> <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xD8</span>,<br> <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xE4</span>,<br> <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xA9</span>,<br> <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>,<br> <span class="hljs-number">0x47</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x62</span>,<br> <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xAA</span>,<br> <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x6A</span>,<br> <span class="hljs-number">0x97</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB3</span>,<br> <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x84</span>,<br> <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x6F</span>,<br> <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC1</span>,<br> <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xBF</span>,<br> <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDB</span>,<br> <span class="hljs-number">0x18</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xF1</span>,<br> <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x8F</span>]<br><br>LIST = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> des:<br>    LIST.append(s_box.index(i))    <span class="hljs-comment">#这里查找下标的操作其实是for循环里面的第二步</span><br>                                   <span class="hljs-comment">#即源文件中 tmp = s_box[....]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        v5 = ((v6[j] &amp; flags[i + <span class="hljs-number">3</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">3</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">3</span>]) &gt;&gt;((<span class="hljs-number">3</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">2</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">2</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i +<span class="hljs-number">2</span>]) &gt;&gt; ((<span class="hljs-number">2</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">1</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">1</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">1</span>]) &gt;&gt; ((<span class="hljs-number">1</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i]) &lt;&lt; (<span class="hljs-number">8</span> - -j % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i]) &gt;&gt; (-j % <span class="hljs-number">8</span>))<br>        tmp = (((v6[j] &amp; flags[i + <span class="hljs-number">7</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">7</span>])&gt;&gt; ((<span class="hljs-number">7</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">6</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">6</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i +<span class="hljs-number">6</span>]) &gt;&gt; ((<span class="hljs-number">6</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">5</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">5</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">5</span>]) &gt;&gt; ((<span class="hljs-number">5</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">4</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">4</span> - j) % <span class="hljs-number">8</span>)) |((v6[j] &amp; flags[i + <span class="hljs-number">4</span>]) &gt;&gt; ((<span class="hljs-number">4</span> - j) % <span class="hljs-number">8</span>)) | v5)<br>        s.add(tmp == LIST[i+j])<br><br><span class="hljs-keyword">if</span> s.check() == sat:    <span class="hljs-comment">#z3标配语句 若有结果则赋值给result</span><br>    result = s.model()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(result[i].as_long()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flags))    <span class="hljs-comment">#.as_long()在python中没有显示颜色 但是可以使用</span><br>                                                           <span class="hljs-comment">#作用是将值从低到高按顺序输出</span><br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Q5la5_3KChtem6_HYHk_NlHhNZz73aCZeK05II96}</strong></p></blockquote><hr><h1 id="虚假的粉丝"><a href="#虚假的粉丝" class="headerlink" title="虚假的粉丝"></a>虚假的粉丝</h1><p>给的文件不少</p><p><img src="/img/-16383701053821.png" alt="img"></p><p>faded.mp3就是一首歌 没什么其他内容</p><p>f文件夹里面有5000+个.txt文件</p><p>先用ida打开exe文件看看</p><p><img src="/img/-16383701053833.png" alt="img"></p><p><img src="/img/-16383701053835.png" alt="img"></p><p>先分析到这里</p><p>我们现在要去f文件夹里面找符合规则的txt文件 并且求出字符串的偏移地址</p><p>给的约束条件是使用正则匹配</p><p>所以可以用命令</p><blockquote><p><strong>grep -E “正则表达式” 文件名 -b -o</strong></p></blockquote><p>构造正则表达式为</p><blockquote><p><strong>“U.{38}S”</strong></p></blockquote><p>所以最后的命令为</p><blockquote><p><strong>grep -E “U.{38}S” *.txt -b -o</strong></p></blockquote><p>详情参考</p><blockquote><p><strong><a href="https://wangchujiang.com/linux-command/c/grep.html">grep 命令，Linux grep 命令详解：强大的文本搜索工具 - Linux 命令搜索引擎 (wangchujiang.com)</a></strong></p></blockquote><p><img src="/img/-16383701053837.png" alt="img"></p><p>求得字符串长度后记录</p><blockquote><p><strong>v12 = 4157</strong></p><p><strong>Offset = 1118</strong></p><p><strong>ElementSize = 40</strong></p><p><strong>UzNDcmU3X0szeSUyMCUzRCUyMEFsNE5fd0FsSzNS</strong></p></blockquote><p>(这里的字符串其实没影响)</p><p>(当你在4157.txt中找到此字符串的时候 会发现它的长度为43)</p><p>(但是在exe文件填写的时候 40 43 都会跳转到正确的位置)</p><p><img src="/img/-16383701053839.png" alt="img"></p><p>字符串眼熟 尝试base64解码</p><blockquote><p><strong>S3Cre7_K3y%20%3D%20Al4N_wAlK3R</strong></p></blockquote><p>之后继续分析ida</p><p><img src="/img/-163837010538311.png" alt="img"></p><p>根据base64解码内容可以得到key为</p><blockquote><p><strong>Al4N_wAlK3R</strong></p></blockquote><p>所以我们运行exe文件 按顺序填好 再打开 5315 文件</p><p>使用命令</p><blockquote><p><strong>cat ASCII-faded\ 5315.txt</strong></p></blockquote><p><img src="/img/-163837010538313.png" alt="img"></p><p>详情参考</p><blockquote><p><strong><a href="https://www.runoob.com/linux/linux-comm-cat.html">Linux cat 命令 | 菜鸟教程 (runoob.com)</a></strong></p></blockquote><hr><blockquote><p><strong>flag{A_TrUe_AW_f4ns}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>湖湘杯</title>
    <link href="/reverse/%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
    <url>/reverse/%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-14</center>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深育杯</title>
    <link href="/reverse/%E6%B7%B1%E8%82%B2%E6%9D%AF/"/>
    <url>/reverse/%E6%B7%B1%E8%82%B2%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-13</center><h1 id="Lithops"><a href="#Lithops" class="headerlink" title="Lithops"></a>Lithops</h1><p>无壳 32位 ida32打开</p><p><img src="/img/-16383689370851.png" alt="img"></p><p>从输入到 check 有很多函数</p><p>莽一点 从check函数下断点 步入进去看看试试</p><p>输入任意长的flag之后进入 check 函数</p><p><img src="/img/-16383689370853.png" alt="img"></p><p>再直接从 return 处下断点 f9 运行</p><p><img src="/img/-16383689370855.png" alt="img"></p><p>双击进入 dword_813C60 查看 发现两处引用</p><p>且有一处引用是在我们的 check 函数</p><p>点击追踪过去</p><p><img src="/img/-16383689370857.png" alt="img"></p><p>之后我们程序运行到此处时</p><p><img src="/img/-16383689370859.png" alt="img"></p><p>发现 push ecx 中的 ecx 里面存放的值是我们的输入</p><p><img src="/img/-163836893708611.png" alt="img"></p><p>而继续运行下去</p><p>push edx 中的 edx 值为</p><p><img src="/img/-163836893708613.png" alt="img"></p><p>取出查看</p><blockquote><p><strong>0xE4, 0xB8, 0x8D, 0xE5, 0x81, 0x9A, 0xE4, 0xBC, 0x9F, 0xE5, 0xA4, 0xA7, 0xE6, 0x97, 0xB6, 0xE4, 0xBB, 0xA3, 0xE7, 0x9A, 0x84, 0xE6, 0x97, 0x81, 0xE8, 0xA7, 0x82, 0xE8, 0x80, 0x85</strong></p></blockquote><p>自己没有发现这是 UTF-8 编码方式</p><p>(赛后wp里面写明 此程序在加密过程中调用了 UTF-8 编码)</p><p>放上一点知识：</p><blockquote><p><strong><a href="https://link.zhihu.com/?target=https://unicode-table.com/cn/">unicode-table.com/cn/</a></strong></p></blockquote><p>最后找个网站解码即可</p><p><img src="/img/-163836893708615.png" alt="img"></p><hr><blockquote><p><strong>flag{不做伟大时代的旁观者}</strong></p></blockquote><hr><h1 id="press"><a href="#press" class="headerlink" title="press"></a>press</h1><p>查壳 无壳 ida64打开</p><p><img src="/img/-163836899417117.png" alt="img"></p><p>最后main函数输出out文件 内容</p><blockquote><p><strong>60 E1 2F 05 79 80 5E E1 C5 57 8B CC 5C 9A 67 26 1E 19 AF 93 3F 09 E2 97 99 7B 86 C1 25 87 D6 0C DD CF 2A F5 65 0E 73 59 1D 5F A4 F4 65 68 D1 3D D2 98 5D FE 5B EF 5B CC</strong></p></blockquote><p>查看关键函数1</p><p><img src="/img/-163836899417119.png" alt="img"></p><blockquote><p><strong>++++++++++[-&gt;++++++++++++++++&lt;],[-&gt;-&lt;]&gt;&gt;[-]+++++&lt;*++.&lt;</strong></p></blockquote><p>查看关键函数2</p><p><img src="/img/-163836899417121.png" alt="img"></p><p>说明了每个字符的操作 类似小型虚拟机 和真brainfuck加密不同</p><p>所以只能一步一步读取</p><p>贴一个师傅转成的代码</p><p>这里对指令的解读是难点 有点恶心人</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C">ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[0] = 10</span><br><br><span class="hljs-keyword">while</span><br> (ptr[<span class="hljs-number">0</span>]) &#123;<br>ptr[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">1</span>] += <span class="hljs-number">16</span>;    <span class="hljs-comment">//ptr[1] += 160</span><br>&#125;<br><br>ptr[<span class="hljs-number">0</span>] = get();<br><br><span class="hljs-keyword">while</span><br> (ptr[<span class="hljs-number">0</span>]) &#123;<br>ptr[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[1] = 160 - 输入的大小</span><br>&#125;<br><br><span class="hljs-keyword">while</span><br> (ptr[<span class="hljs-number">2</span>]) &#123;<br>ptr[<span class="hljs-number">2</span>] -= <span class="hljs-number">1</span>;<br>&#125;<br><br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[2] = 5    也就是ptr[1] *= 5</span><br>ptr[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;    <br>ptr[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[1] += 2</span><br><br>put(ptr[<span class="hljs-number">1</span>]);    <span class="hljs-comment">//output = (x + 160-input) * 5 + 2</span><br></code></pre></td></tr></table></figure><p>解密时需要注意溢出</p><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">out = [<span class="hljs-number">0x060</span>,<span class="hljs-number">0x0E1</span>,<span class="hljs-number">0x02F</span>,<span class="hljs-number">0x005</span>,<span class="hljs-number">0x079</span>,<span class="hljs-number">0x080</span>,<span class="hljs-number">0x05E</span>,<span class="hljs-number">0x0E1</span>,<span class="hljs-number">0x0C5</span>,<span class="hljs-number">0x057</span>,<span class="hljs-number">0x08B</span>,<span class="hljs-number">0x0CC</span>,<span class="hljs-number">0x05C</span>,<br>       <span class="hljs-number">0x09A</span>,<span class="hljs-number">0x067</span>,<span class="hljs-number">0x026</span>,<span class="hljs-number">0x01E</span>,<span class="hljs-number">0x019</span>,<span class="hljs-number">0x0AF</span>,<span class="hljs-number">0x093</span>,<span class="hljs-number">0x03F</span>,<span class="hljs-number">0x009</span>,<span class="hljs-number">0x0E2</span>,<span class="hljs-number">0x097</span>,<span class="hljs-number">0x099</span>,<span class="hljs-number">0x07B</span>,<br>       <span class="hljs-number">0x086</span>,<span class="hljs-number">0x0C1</span>,<span class="hljs-number">0x025</span>,<span class="hljs-number">0x087</span>,<span class="hljs-number">0x0D6</span>,<span class="hljs-number">0x00C</span>,<span class="hljs-number">0x0DD</span>,<span class="hljs-number">0x0CF</span>,<span class="hljs-number">0x02A</span>,<span class="hljs-number">0x0F5</span>,<span class="hljs-number">0x065</span>,<span class="hljs-number">0x00E</span>,<span class="hljs-number">0x073</span>,<br>       <span class="hljs-number">0x059</span>,<span class="hljs-number">0x01D</span>,<span class="hljs-number">0x05F</span>,<span class="hljs-number">0x0A4</span>,<span class="hljs-number">0x0F4</span>,<span class="hljs-number">0x065</span>,<span class="hljs-number">0x068</span>,<span class="hljs-number">0x0D1</span>,<span class="hljs-number">0x03D</span>,<span class="hljs-number">0x0D2</span>,<span class="hljs-number">0x098</span>,<span class="hljs-number">0x05D</span>,<span class="hljs-number">0x0FE</span>,<span class="hljs-number">0x05B</span>,<span class="hljs-number">0x0EF</span>,<span class="hljs-number">0x05B</span>,<span class="hljs-number">0x0CC</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(out)):<br>   ens = out[i] - <span class="hljs-number">2</span><br><br>   <span class="hljs-keyword">while</span>(ens != ens // <span class="hljs-number">5</span> * <span class="hljs-number">5</span>):<br>       ens += <span class="hljs-number">0x100</span><br>   ens = ens // <span class="hljs-number">5</span><br><br>   <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>):<br>       flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">160</span> - ens)<br>   <span class="hljs-keyword">else</span>:<br>       flag += <span class="hljs-built_in">chr</span>((out[i-<span class="hljs-number">1</span>] + <span class="hljs-number">160</span> - ens) % <span class="hljs-number">0x100</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><blockquote><p><strong>ZmxhZ3tkZTBiZDY3ZS02ZDI1LTg3ZDctMTg3Ni1hZDEzMWE2MTY1Y2J9</strong></p></blockquote><p>base64解码即可</p><hr><blockquote><p><strong>flag{de0bd67e-6d25-87d7-1876-ad131a6165cb}</strong></p></blockquote><hr><h1 id="xor-exercise"><a href="#xor-exercise" class="headerlink" title="xor_exercise"></a>xor_exercise</h1><p><img src="/img/-163836905228223.png" alt="img"></p><p>default去除之后会有残留</p><p>类似这种永真永假的语句</p><p><img src="/img/-163836905228325.png" alt="img"></p><p>官方wp写的是</p><p><img src="/img/-163836905228327.png" alt="img"></p><p>其实查看了官方给出的script.py之后  明白了就是用idapython nop掉无用代码</p><p>附上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">patch_nop</span>(<span class="hljs-params">start, end</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end):<br>        PatchByte(i, <span class="hljs-number">0x90</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next_instr</span>(<span class="hljs-params">addr</span>):</span><br>    <span class="hljs-keyword">return</span> addr+ItemSize(addr)<br><br>st = <span class="hljs-number">0x0000000000401170</span><br>end = <span class="hljs-number">0x0000000000402de0</span><br><br>addr = st<br><span class="hljs-keyword">while</span>(addr &lt; end):<br>    <span class="hljs-built_in">next</span> = next_instr(addr)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ds:y&quot;</span> <span class="hljs-keyword">in</span> GetDisasm(addr):<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>            addr = <span class="hljs-built_in">next</span><br>            <span class="hljs-built_in">next</span> = next_instr(addr)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;jnz&quot;</span> <span class="hljs-keyword">in</span> GetDisasm(addr):<br>                dest = GetOperandValue(addr, <span class="hljs-number">0</span>)<br>                PatchByte(addr, <span class="hljs-number">0xe9</span>)<br>                PatchByte(addr+<span class="hljs-number">5</span>, <span class="hljs-number">0x90</span>)<br>                offset = dest - (addr + <span class="hljs-number">5</span>)<br>                PatchDword(addr + <span class="hljs-number">1</span>, offset)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;patch bcf: 0x%x&quot;</span> % addr)<br>                addr = <span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        addr = <span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>ida里面 shitf+f2 运行代码发现报错</p><blockquote><p><strong>NameError: name ‘ItemSize’ is not defined</strong></p></blockquote><p>查找资料找到解决办法：</p><blockquote><p><strong><a href="https://www.52pojie.cn/thread-1403005-1-1.html">关于IDA7.5 IDApython api差异问题及解决办法 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></strong></p></blockquote><p>题目是crc64加密</p><p>从官方发的更新后的题文件能找到相关数字串来确定是crc64加密(虽然我自己看不出来就是了)</p><p>贴个其他师傅写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">cmp = [<span class="hljs-number">0x32E9A65483CC9671</span>, <span class="hljs-number">0xEC92A986A4AF329C</span>, <span class="hljs-number">0x96C8259BC2AC4673</span>,<br>       <span class="hljs-number">0x74BF5DCA4423530F</span>, <span class="hljs-number">0x59D78EF8FDCBFAB1</span>, <span class="hljs-number">0xA65257E5B13942B1</span>]<br>       <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">int</span>(cmp[i])&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>:<br>            cmp[i] ^= <span class="hljs-number">0xB1234B7679FC4B3D</span><br>            cmp[i] = cmp[i]&gt;&gt;<span class="hljs-number">1</span><br>            cmp[i] |= <span class="hljs-number">0x8000000000000000</span><br>        <span class="hljs-keyword">else</span>:<br>            cmp[i] = cmp[i]&gt;&gt;<span class="hljs-number">1</span><br>            <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(cmp[i]), end=<span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>河北师范大学</title>
    <link href="/reverse/%E6%B2%B3%E5%8C%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6/"/>
    <url>/reverse/%E6%B2%B3%E5%8C%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-13 to 2021-11-14</center><h1 id="baby-upx"><a href="#baby-upx" class="headerlink" title="baby_upx"></a>baby_upx</h1><p>upx壳</p><p>正常的脱壳指令为</p><blockquote><p><strong>upx -d baby_upx.exe</strong></p></blockquote><p>发现报错</p><p><img src="/img/-16383693664851.png" alt="img"></p><p>所以自己手动脱了一下</p><p>出来之后ida32打开</p><p><img src="/img/-16383693664863.png" alt="img"></p><p><img src="/img/-16383693664865.png" alt="img"></p><p>看了官方的wp之后发现直接upx指令脱壳是可以的</p><blockquote><p><strong>upx -d baby_upx.exe -o baby_upx_dump.exe</strong></p></blockquote><p>ida32打开 (发现手脱结果都差不多)</p><p><img src="/img/-16383693664877.png" alt="img"></p><p>写脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v7[<span class="hljs-number">5</span>];<br>    v7[<span class="hljs-number">0</span>] = <span class="hljs-number">2099915543</span>;<br>    v7[<span class="hljs-number">1</span>] = <span class="hljs-number">120201498</span>;<br>    v7[<span class="hljs-number">2</span>] = <span class="hljs-number">269490557</span>;<br>    v7[<span class="hljs-number">3</span>] = <span class="hljs-number">67837461</span>;<br>    v7[<span class="hljs-number">4</span>] = <span class="hljs-number">271401</span>;<br><br>    <span class="hljs-keyword">char</span> String[] = <span class="hljs-string">&quot;HECTF&quot;</span>;<br>    <span class="hljs-keyword">char</span>* flag = (<span class="hljs-keyword">char</span>*)v7; <span class="hljs-comment">//此行作用为 将v7转换成char类型并将指针赋给flag</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">19</span>;i++)<br>        flag[i] ^= String[(i ^ (rand() + <span class="hljs-number">10086</span>)) % <span class="hljs-number">5</span>];    <span class="hljs-comment">//使用 C 写exp的原因大概是因为rand()</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,flag);<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Thi5_iiS5_UUPX_LalA}</strong></p></blockquote><hr><h1 id="baby-pp"><a href="#baby-pp" class="headerlink" title="baby_pp"></a>baby_pp</h1><p>查壳 发现是python写的 exe 文件</p><p><img src="/img/-16383694038719.png" alt="img"></p><p>具体过程参考</p><p><img src="/img/-163836940387111.png" alt="img"></p><p>之后找个在线网站pyc反编译</p><p>(发现在线反编译效果不是很好 文件中重要内容丢失)</p><p>(于是自己折腾了半天 搞好了uncompyle6)</p><p>(因为uncompyle6最高支持到python3.8   而自己windows的python是3.10  kali的python是3.9和2.7</p><p>所以只能在kali下更换python版本 之后安装python2的pip 再安装uncompyle6)</p><p>更换python版本</p><blockquote><p><strong>update-alternatives –config python</strong></p><p><strong>#之后选择序号</strong></p><p><strong>#详细教程👇</strong></p><p><strong><a href="https://zhuanlan.zhihu.com/p/159483149">ubuntu下切换默认python版本 - 知乎 (zhihu.com)</a></strong></p></blockquote><blockquote><p><strong>uncompyle6 -o main.py main.pyc</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># uncompyle6 version 3.8.0</span><br><span class="hljs-comment"># Python bytecode 3.8.0 (3413)</span><br><span class="hljs-comment"># Decompiled from: Python 3.9.7 (default, Sep 24 2021, 09:43:00) </span><br><span class="hljs-comment"># [GCC 10.3.0]</span><br><span class="hljs-comment"># Embedded file name: main.py</span><br><span class="hljs-comment"># Compiled at: 1995-09-28 00:18:56</span><br><span class="hljs-comment"># Size of source mod 2**32: 272 bytes</span><br><span class="hljs-keyword">import</span> random<br>ens = <span class="hljs-string">&#x27;742641edefb6770733ab5932325106b3a5fa75222791d09e451161c46f15504402b32737362443d4df7d136145cd970b54116669c230&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">s, nuum</span>):</span>    <span class="hljs-comment">#step为18</span><br>    step = <span class="hljs-built_in">len</span>(s) // nuum<br>    ens = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(step):<br>        ens += s[i::step]    <span class="hljs-comment">#打乱顺序</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> ens<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    random.seed(<span class="hljs-number">10085</span>)    <span class="hljs-comment">#rand种子为定值</span><br>    u_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;: &#x27;</span>)<br>    t = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> u_input:<br>        t += <span class="hljs-string">&#x27;%02x&#x27;</span> % (<span class="hljs-built_in">ord</span>(i) ^ random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">127</span>))    <span class="hljs-comment">#关键异或</span><br>                                                           <span class="hljs-comment">#其中 %02x 代表输入的值每两个一组作为一个十六进制数</span><br>    <span class="hljs-keyword">else</span>:                                                  <span class="hljs-comment">#也就是我们解密输入的字符串长度为54</span><br>        eni = encode(t, <span class="hljs-number">6</span>)    <span class="hljs-comment">#加密后的结果已给出</span><br>        <span class="hljs-keyword">if</span> eni == ens:    <span class="hljs-comment">#ens长为108</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Failed!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>第15行:       ens += s[i::step]</p><p>举个例子来说明其作用</p><p><img src="/img/-163836940387113.png" alt="img"></p><p>所以解密脚本 先恢复顺序 再进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br>random.seed(<span class="hljs-number">10085</span>)<br><br>ens = <span class="hljs-string">&#x27;742641edefb6770733ab5932325106b3a5fa75222791d09e451161c46f15504402b32737362443d4df7d136145cd970b54116669c230&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>t = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        t += ens[i + j*<span class="hljs-number">6</span>]<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">108</span>,<span class="hljs-number">2</span>):<br>    flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(t[x:x+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>) ^ random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">127</span>))<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>其中 关于数组中[::]切片问题详细可以看</p><blockquote><p><strong>[(18条消息) Python中numpy数组切片：print(a<a href="https://blog.csdn.net/weixin_43629813/article/details/101122997">0::2])、a[::2]、[:,2]、[1:,-1:]、a[::-1]、[ : n]、[m : ]、[-1]、[:-1]、[1:]等的含义（详细）<em>锵锵锵锵蒋的博客-CSDN博客</em>[::2]</a></strong></p></blockquote><p>运行 输出</p><blockquote><p><strong>HECTF{decrypt(80410840840842108808881088408084210842)}</strong></p></blockquote><p>第一次接触云影密码 特点是</p><p><img src="/img/-163836940387115.png" alt="img"></p><blockquote><p><strong><a href="https://www.cnblogs.com/yuanchu/p/13492904.html">Crypto入门 （六）幂数加密（云影密码） - 缘初 - 博客园 (cnblogs.com)</a></strong></p></blockquote><p>附上一个云影解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">ens = <span class="hljs-string">&#x27;80410840840842108808881088408084210842&#x27;</span>  <span class="hljs-comment">#云影加密密文</span><br>result = ens.split(<span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-comment">#遇到‘0’时分割</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>    <span class="hljs-built_in">str</span> = result[i]<br>    t = <span class="hljs-number">0</span>    <span class="hljs-comment">#每次循环t清零</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        t += <span class="hljs-built_in">int</span>(i)<br><br>    flag += <span class="hljs-built_in">chr</span>(t + <span class="hljs-number">64</span>)    <span class="hljs-comment">#云影加密对应的是大写字母</span><br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{HELLOPYTHON}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>陇原战&#39;疫&#39;</title>
    <link href="/reverse/%E9%99%87%E5%8E%9F%E6%88%98%E2%80%98%E7%96%AB%E2%80%99/"/>
    <url>/reverse/%E9%99%87%E5%8E%9F%E6%88%98%E2%80%98%E7%96%AB%E2%80%99/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-7</center><h1 id="power"><a href="#power" class="headerlink" title="power"></a>power</h1><p>题目说是arm汇编</p><p>用 Resource Hacker 打开</p><p>发现S盒</p><p><img src="/img/-16383682581061.png" alt="img"></p><p>然后搜索找到main函数</p><p><img src="/img/-16383682581073.png" alt="img"></p><p>发现第1253行</p><blockquote><p><strong>.size   <em>ZN3aes14encryption_cbcEPcS0</em>, .-<em>ZN3aes14encryption_cbcEPcS0</em></strong></p></blockquote><p>aes 和 cbc</p><p>所以可以肯定是aes加密 是不是cbc模式难说</p><p>找到16位密钥</p><blockquote><p><strong>this_is_a_key!!!</strong></p></blockquote><p>接着找到密文</p><blockquote><p><strong>1030a9254d44937bed312da03d2db9adbec5762c2eca7b5853e489d2a140427b</strong></p></blockquote><p>之后可以用在线网站aes解码</p><p>使用cbc模式解码失败 换成ecb模式成功</p><p>放上个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>key = <span class="hljs-string">b&#x27;this_is_a_key!!!&#x27;</span><br>enc = long_to_bytes(<span class="hljs-number">0x1030a9254d44937bed312da03d2db9adbec5762c2eca7b5853e489d2a140427b</span>)<br>ae = AES.new(key, AES.MODE_ECB)<br><br><span class="hljs-built_in">print</span>(ae.decrypt(enc))<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{y0u_found_the_aes_12113112}</strong></p></blockquote><hr><h1 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h1><p>32位 无壳 ida32打开</p><p>找到main函数 发现字符串长度为26</p><p><img src="/img/-16383682984375.png" alt="img"></p><p><img src="/img/-16383682984377.png" alt="img"></p><p>之后根据主函数中的 off_403844 找到 sub_401866 函数 并进入</p><p><img src="/img/-16383682984379.png" alt="img"></p><p>发现函数是RC4加密</p><p>关键点在于第39行的函数 sub_401767 和第42行的 dword_403040 值</p><p>先取出dword的值</p><blockquote><p>  <strong>0xB7, 0xFF, 0xFF, 0xFF, 0x52, 0x00, 0x00, 0x00, 0x85, 0xFF,</strong> </p><p>  <strong>0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0x90, 0xFF, 0xFF, 0xFF,</strong> </p><p>  <strong>0xE9, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xB8, 0xFF,</strong> </p><p>  <strong>0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xFF, 0x1A, 0x00, 0x00, 0x00,</strong> </p><p>  <strong>0xC3, 0xFF, 0xFF, 0xFF, 0xBD, 0xFF, 0xFF, 0xFF, 0x1D, 0x00,</strong> </p><p>  <strong>0x00, 0x00, 0x8E, 0xFF, 0xFF, 0xFF, 0x85, 0xFF, 0xFF, 0xFF,</strong> </p><p>  <strong>0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00,</strong> </p><p>  <strong>0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0xAF, 0xFF, 0xFF, 0xFF,</strong> </p><p>  <strong>0xEF, 0xFF, 0xFF, 0xFF, 0x70, 0x00, 0x00, 0x00, 0x32, 0x00,</strong> </p><p>  <strong>0x00, 0x00, 0xB5, 0xFF, 0xFF, 0xFF, 0x11, 0x00, 0x00, 0x00,</strong> </p><p>  <strong>0xC6, 0xFF, 0xFF, 0xFF</strong></p></blockquote><p>进行整理：</p><blockquote><p><strong>0xB7,0x52,0x85,0xC1,0x90,0xE9,0x07,0xB8,0xE4,0x1A,</strong></p><p><strong>0xC3,0xBD,0x1D,0x8E,0x85,0x46,0x00,0x21,0x44,0xAF,</strong></p><p><strong>0xEF,0x70,0x32,0xB5,0x11,0xC6</strong></p></blockquote><p>之后我们需要动调来获得加密后的字符串的值</p><p>断点如下</p><p>main函数的</p><p><img src="/img/-163836829843711.png" alt="img"></p><p>sub_401866 函数的</p><p><img src="/img/-163836829843713.png" alt="img"></p><p>之后动调</p><p>输入值</p><blockquote><p><strong>12345678901234567890123456</strong></p></blockquote><p>F7 F9 进入函数 sub_401767</p><p>两个窗口对照查看</p><p><img src="/img/-163836829843715.png" alt="img"></p><p>首先我们先运行到for循环的最后一行 也就是第21行</p><p><img src="/img/-163836829843817.png" alt="img"></p><p>之后我们在 IDA View 中进行单步F8 运行到for循环第一轮结束时候 也就是</p><p><img src="/img/-163836829843819.png" alt="img"></p><p>现在我们可以看到 [eax] 里存放的值 是我们输入的值</p><p><img src="/img/-163836829843821.png" alt="img"></p><p>dl 的值 也就是 xor edx,ecx 中edx的值 是</p><p><img src="/img/-163836829843823.png" alt="img"></p><p>所以我们输入的第一个值 0 经过函数 sub_401767 加密后 变成了 D5</p><p>之后我们可以 通过单步F8的值记录 EDX 的值</p><p>也可以在 sub_401866 函数的第40行继续下断点</p><p>F9执行出来之后F8运行到main函数断点下 回头找到 inputt 的值</p><blockquote><p><strong>0xD5, 0x25, 0xE2, 0xB6, 0xF1, 0x99, 0x4B, 0xD4, 0xB5, 0x1B,</strong> </p><p><strong>0x81, 0xD0, 0x47, 0x8F, 0xEF, 0x35, 0x05, 0x46, 0x48, 0xEB,</strong> </p><p><strong>0x8C, 0x21, 0x6C, 0xB8, 0x05, 0x8D</strong></p></blockquote><p>已知是RC4 加密</p><p>用假密文异或假明文得到密钥流，然后用密钥流对密文进行异或得到明文</p><p>可以写脚本求出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">inputt = <span class="hljs-string">&quot;12345678901234567890123456&quot;</span><br><br>dwo = [<span class="hljs-number">0xD5</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0xE2</span>,<span class="hljs-number">0xB6</span>,<span class="hljs-number">0xF1</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x4B</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0x1B</span>,<br>       <span class="hljs-number">0x81</span>,<span class="hljs-number">0xD0</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x8F</span>,<span class="hljs-number">0xEF</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xEB</span>,<br>       <span class="hljs-number">0x8C</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x8D</span>]<br><br>rc4 = [<span class="hljs-number">0xB7</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0xC1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0xE9</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x1A</span>,<br>       <span class="hljs-number">0xC3</span>,<span class="hljs-number">0xBD</span>,<span class="hljs-number">0x1D</span>,<span class="hljs-number">0x8E</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0xAF</span>,<br>       <span class="hljs-number">0xEF</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xC6</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(inputt[i]) ^ unk[i] ^ rc4[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Th1s_i5_E2_5tRcm9!}</strong></p></blockquote><hr><h1 id="EasyRE-Revenge"><a href="#EasyRE-Revenge" class="headerlink" title="EasyRE_Revenge"></a>EasyRE_Revenge</h1><p>查壳 ida打开</p><p>找到main函数</p><p>简单分析一下</p><p><img src="/img/-163836837201625.png" alt="img"></p><p>进入 sub_411F4 函数中 发现数据出错</p><p><img src="/img/-163836837201627.png" alt="img"></p><p>找到出错位置 并向下查看 发现</p><p>很明显 要用idc代码除去花指令 (快捷键 shift+f2)</p><p>(也可以手动nop 这里是先手动nop 然后找出不需要nop的关键数据 再写脚本)</p><p><img src="/img/-163836837201629.png" alt="img"></p><p>附上官方idc脚本(自己写不出来。。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//IDC脚本</span><br><span class="hljs-keyword">auto</span> addr_start = <span class="hljs-number">0x004117A0</span>;<span class="hljs-comment">//函数起始地址</span><br><span class="hljs-keyword">auto</span> addr_end = <span class="hljs-number">0x00411E58</span>;<span class="hljs-comment">//函数结束地址</span><br><span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=addr_start;i&lt;addr_end;i++)&#123;<br>    <span class="hljs-keyword">if</span>(Dword(i) == <span class="hljs-number">0x1E8</span>)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">6</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<span class="hljs-comment">//0x90是nop表示的字节</span><br>        &#125;<br>        i=i+<span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">3</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;<br>        i=i+<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">3</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;<br>        i=i+<span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">1</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;   <br>        i=i+<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">2</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;     <br>        i--;    <br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>之后在有问题的起始地址 p 创建函数 之后查看</p><p>我的效果：</p><p><img src="/img/-163836837201631.png" alt="img"></p><p>官方的效果：</p><p><img src="/img/-163836837201633.png" alt="img"></p><p>不仅不好看而且还少了一位。。。</p><p>好像少了不止一位 一行也没有了</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>v5 = [<span class="hljs-number">0x271e150c</span>,<span class="hljs-number">0x3b322920</span>,<span class="hljs-number">0x5f564d44</span>,<span class="hljs-number">0x736a6158</span>,<span class="hljs-number">0x978e857c</span>,<span class="hljs-number">0xaba29990</span>,<span class="hljs-number">0xcfc6bdb4</span>,<span class="hljs-number">0xe3dad1c8</span>]<br><br>v6 = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br><br>data = [<span class="hljs-number">0x0EEE8B042</span>,<span class="hljs-number">0x57D0EE6C</span>,<span class="hljs-number">0x0F3F54B32</span>,<span class="hljs-number">0x0D3F0B7D6</span>,<span class="hljs-number">0x0A61C389</span>,<span class="hljs-number">0x38C7BA40</span>,<span class="hljs-number">0x0C3D9E2C</span>,<span class="hljs-number">0x0D64A9284</span>]<br><br>x0=BitVec(<span class="hljs-string">&#x27;x0&#x27;</span>,<span class="hljs-number">32</span>)<br>x1=BitVec(<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-number">32</span>)<br>x2=BitVec(<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-number">32</span>)<br>x3=BitVec(<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-number">32</span>)<br>x4=BitVec(<span class="hljs-string">&#x27;x4&#x27;</span>,<span class="hljs-number">32</span>)<br>x5=BitVec(<span class="hljs-string">&#x27;x5&#x27;</span>,<span class="hljs-number">32</span>)<br>x6=BitVec(<span class="hljs-string">&#x27;x6&#x27;</span>,<span class="hljs-number">32</span>)<br>x7=BitVec(<span class="hljs-string">&#x27;x7&#x27;</span>,<span class="hljs-number">32</span>)<br><br>s = z3.Solver()<br><br>v6[<span class="hljs-number">0</span>]=x0^v5[<span class="hljs-number">2</span>]<br>v6[<span class="hljs-number">1</span>]=x1^v5[<span class="hljs-number">1</span>]<br>v6[<span class="hljs-number">2</span>]=x2^v5[<span class="hljs-number">0</span>]<br>v6[<span class="hljs-number">3</span>]=x3^v5[<span class="hljs-number">7</span>]<br>v6[<span class="hljs-number">4</span>]=x4^v5[<span class="hljs-number">6</span>]<br>v6[<span class="hljs-number">5</span>]=x5^v5[<span class="hljs-number">5</span>]<br>v6[<span class="hljs-number">6</span>]=x6^v5[<span class="hljs-number">4</span>]<br>v6[<span class="hljs-number">7</span>]=x7^v5[<span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    v6[i] ^= (v6[i] &lt;&lt; <span class="hljs-number">7</span>)<br>    v6[i] ^= v5[(i*<span class="hljs-number">7</span>+<span class="hljs-number">3</span>)%<span class="hljs-number">8</span>]<br>    v6[i] ^= v6[(i*<span class="hljs-number">5</span>+<span class="hljs-number">3</span>)%<span class="hljs-number">8</span>]<br>    v6[i] ^= (v6[i]&lt;&lt;<span class="hljs-number">13</span>)<br>    v6[i] ^= v5[(i*<span class="hljs-number">7</span>+<span class="hljs-number">5</span>)%<span class="hljs-number">8</span>]<br>    v6[i] ^= (v6[i]&lt;&lt;<span class="hljs-number">17</span>)<br>    <br>s.add(data[<span class="hljs-number">0</span>]==v6[<span class="hljs-number">0</span>],data[<span class="hljs-number">1</span>]==v6[<span class="hljs-number">1</span>],data[<span class="hljs-number">2</span>]==v6[<span class="hljs-number">2</span>],data[<span class="hljs-number">3</span>]==v6[<span class="hljs-number">3</span>],data[<span class="hljs-number">4</span>]==v6[<span class="hljs-number">4</span>],data[<span class="hljs-number">5</span>]==v6[<span class="hljs-number">5</span>],data[<span class="hljs-number">6</span>]==v6[<span class="hljs-number">6</span>],data[<span class="hljs-number">7</span>]==v6[<span class="hljs-number">7</span>],)<br><br><span class="hljs-keyword">if</span> s.check() == sat:    <span class="hljs-comment">#z3标配语句 若有结果则赋值给result</span><br>    result = s.model()<br><br><span class="hljs-comment">#print(result)</span><br><br><span class="hljs-comment">#x0 = 1630954594,x1 = 828781622,x2 = 862085687,x3 = 909140836,x4 = 825516597,x5 = 1633759329,x6 = 879047012,x7 = 943285560</span><br><br>flag = [<span class="hljs-number">1630954594</span>,<span class="hljs-number">828781622</span>,<span class="hljs-number">862085687</span>,<span class="hljs-number">909140836</span>,<span class="hljs-number">825516597</span>,<span class="hljs-number">1633759329</span>,<span class="hljs-number">879047012</span>,<span class="hljs-number">943285560</span>]<br><span class="hljs-comment">#转成字符</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">THEFLAG</span>(<span class="hljs-params">t</span>):</span>    <span class="hljs-comment">#试了半天别的方法 感觉还是这个方法好一点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        num = t % <span class="hljs-number">0x100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(num), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        t = t // <span class="hljs-number">0x100</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    THEFLAG(flag[i])<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{bd6a64f17bb3dc065b41a0aad1e48e98}</strong></p></blockquote><hr><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><p>参考：<a href="https://hackmd.io/@crazyman/SkyAgiK4F#Reverse">https://hackmd.io/@crazyman/SkyAgiK4F#Reverse</a></p><p>emo了</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>鹤城杯</title>
    <link href="/reverse/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    <url>/reverse/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-10-8</center><h1 id="Petition"><a href="#Petition" class="headerlink" title="Petition"></a>Petition</h1><p>32位无壳</p><p><img src="/img/-16383679498351.png" alt="img"></p><p>shift+f12找字符串 没发现</p><p>转换找main函数 没有</p><p>只能打开start函数</p><p><img src="/img/-16383679498363.png" alt="img"></p><p>发现函数嵌套函数</p><p><img src="/img/-16383679498365.png" alt="img"></p><p>进入sub_119C 发现函数嵌套函数</p><p><img src="/img/-16383679498367.png" alt="img"></p><p>进入sub_122A 发现函数嵌套函数。。。。</p><p>一直循环了下去 且变化的数是</p><p><img src="/img/-16383679498369.png" alt="img"></p><p>初步怀疑两数异或的值</p><p>试一下前几个值进行异或：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x1e</span>^<span class="hljs-number">0x78</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x6c</span>^<span class="hljs-number">0x00</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x07</span>^<span class="hljs-number">0x66</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xa9</span>^<span class="hljs-number">0xce</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得出</p><blockquote><p><strong>flag</strong></p></blockquote><p>猜想成立 一直写下去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x1e</span>^<span class="hljs-number">0x78</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x6c</span>^<span class="hljs-number">0x00</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x07</span>^<span class="hljs-number">0x66</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xa9</span>^<span class="hljs-number">0xce</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xf9</span>^<span class="hljs-number">0x82</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x8c</span>^<span class="hljs-number">0xb5</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x88</span>^<span class="hljs-number">0xbe</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xcb</span>^<span class="hljs-number">0xa8</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x52</span>^<span class="hljs-number">0x64</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xa0</span>^<span class="hljs-number">0x99</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x19</span>^<span class="hljs-number">0x2f</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x21</span>^<span class="hljs-number">0x15</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x66</span>^<span class="hljs-number">0x50</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x03</span>^<span class="hljs-number">0x2e</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xaf</span>^<span class="hljs-number">0x97</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xf6</span>^<span class="hljs-number">0xc7</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x43</span>^<span class="hljs-number">0x7b</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x18</span>^<span class="hljs-number">0x2c</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xc9</span>^<span class="hljs-number">0xe4</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xfe</span>^<span class="hljs-number">0xca</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x66</span>^<span class="hljs-number">0x55</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x9c</span>^<span class="hljs-number">0xaa</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x4c</span>^<span class="hljs-number">0x7f</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x00</span>^<span class="hljs-number">0x2d</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x25</span>^<span class="hljs-number">0x1d</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xd6</span>^<span class="hljs-number">0xb2</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x9a</span>^<span class="hljs-number">0xff</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x7d</span>^<span class="hljs-number">0x44</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xbd</span>^<span class="hljs-number">0x90</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x45</span>^<span class="hljs-number">0x72</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x65</span>^<span class="hljs-number">0x56</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x6e</span>^<span class="hljs-number">0x08</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x85</span>^<span class="hljs-number">0xb2</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x12</span>^<span class="hljs-number">0x21</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x7f</span>^<span class="hljs-number">0x46</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x2b</span>^<span class="hljs-number">0x13</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x24</span>^<span class="hljs-number">0x14</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xfc</span>^<span class="hljs-number">0xca</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x24</span>^<span class="hljs-number">0x12</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x50</span>^<span class="hljs-number">0x33</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x12</span>^<span class="hljs-number">0x23</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xea</span>^<span class="hljs-number">0x97</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xb2</span>^<span class="hljs-number">0xb2</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{96c69646-8184-4363-8de9-73f7398066c1}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绿城杯</title>
    <link href="/reverse/%E7%BB%BF%E5%9F%8E%E6%9D%AF/"/>
    <url>/reverse/%E7%BB%BF%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-9-29</center><h1 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h1><p> 查壳（工具 Exeinfo PE） 发现无壳 32位</p><p><img src="/img/-16383660907221.png" alt="img"></p><h2 id="1-静态分析"><a href="#1-静态分析" class="headerlink" title="1.静态分析"></a>1.静态分析</h2><p>扔进ida32打开 找到main函数 f5反编译一下</p><p><img src="/img/-16383660907233.png" alt="img"></p><p>出现JUMPOUT问题反汇编不了 首先考虑是不是花指令</p><p>shift+f12打开字符串窗口</p><p><img src="/img/-16383660907235.png" alt="img"></p><p>找到与flag有关的字符串双击 找到IDA View窗口中标红的地方</p><p><img src="/img/-16383660907237.png" alt="img"></p><p>关键点为 jz跳转命令是一个无效指令 导致下面adc [edx],esp无法执行</p><blockquote><p><strong>选中jz指令使用Edit-&gt;Patch program-&gt;Assemble nop掉</strong></p></blockquote><p><img src="/img/-16383660907239.png" alt="img"></p><p>并将出现的黄色指令用C键强行转换成代码 直到黄色指令消失</p><p><img src="/img/-163836609072311.png" alt="img"></p><p>这时f5进入main函数的伪代码</p><p>观察发现函数中含有RC4加密算法（函数中多次出现%256要注意是否为RC4加密）</p><p><img src="/img/-163836609072313.png" alt="img"></p><p>与一般RC4不同的是 此题中在加密过程异或了0x37</p><p>找到关键点：</p><blockquote><p><strong>v26=”tallmewhy”  v4=v26的长度且加密中出现%v4   可断定v26为密钥</strong></p></blockquote><p><img src="/img/-163836609072315.png" alt="img"></p><p>回到最前面 找到开头赋值的五组数 五组数在内存空间中连续出现</p><p><img src="/img/-163836609072317.png" alt="img"></p><p><img src="/img/-163836609072319.png" alt="img"></p><p>v20-v21若非十六进制显示可按H键切换</p><p>进入xmmword_4021B0和xmmword_4021C0</p><p><img src="/img/-163836609072321.png" alt="img"></p><p>发现是赋值 选中两条 shift+e 发现是小端存储</p><blockquote><p><strong>1A 91 A9 24 D3 EB F4 30 65 28 A5 9F E4 8D 8C F5h变成了</strong></p><p><strong>F5 8C 8D E4 9F A5 28 65 30 F4 EB D3 24 A9 91 1A</strong></p></blockquote><p><img src="/img/-163836609072323.png" alt="img"></p><p>说明v20-v21所存放的数据也是小端存储 写脚本时需要转过来</p><p>分析完 依据伪代码中加密解密过程改动成脚本</p><p><img src="/img/-163836609072325.png" alt="img"></p><p>脚本如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//RC4加密后的s盒</span><br>    <span class="hljs-keyword">char</span> key[] = <span class="hljs-string">&quot;tallmewhy&quot;</span>;   <span class="hljs-comment">//密钥</span><br><br><br>    <span class="hljs-keyword">char</span> flag[<span class="hljs-number">42</span>] = &#123;<span class="hljs-number">0xF5</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x65</span>,<br>                     <span class="hljs-number">0x30</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xD3</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x1A</span>,<br>                     <span class="hljs-number">0x6F</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0xD7</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE8</span>,<span class="hljs-number">0xB8</span>,<br>                     <span class="hljs-number">0x83</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0x4B</span>,<br>                     <span class="hljs-number">0x99</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xE6</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xEC</span>&#125;;   <span class="hljs-comment">//flag 小端存储获得 </span><br><br><br>    <span class="hljs-keyword">int</span> i,t,w;<br>    <span class="hljs-keyword">int</span> v6 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> v7 = <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)  <span class="hljs-comment">//初始化</span><br>    &#123;<br>        b[i] = key[i%<span class="hljs-number">9</span>];<br>        s[i] = i;<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)  <span class="hljs-comment">//置换s</span><br>    &#123;<br>        v6 = s[i];<br>        v7 = (v7 + b[i] + v6) % <span class="hljs-number">256</span>;<br>        s[i] = s[v7];<br>        s[v7] = v6 ^ <span class="hljs-number">0x37</span>;  <span class="hljs-comment">//此题中为改RC4 加密过程多了一步异或操作</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,v7=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">42</span>;t++)  <span class="hljs-comment">//密钥流</span><br>    &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        v7 = (v7 + s[i]) % <span class="hljs-number">256</span>;<br>        v6 = s[i];<br>        s[i] = s[v7];<br>        s[v7] = v6;<br>        w = (s[i] + s[v7]) % <span class="hljs-number">256</span>;<br>        flag[i<span class="hljs-number">-1</span>] ^= s[w];<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">42</span>;i++)<br>        <span class="hljs-built_in">putchar</span>(flag[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行得到flag</p><h2 id="2-静态分析-动态分析"><a href="#2-静态分析-动态分析" class="headerlink" title="2.静态分析+动态分析"></a>2.静态分析+动态分析</h2><p>动态分析好处是可以越过部分代码分析 只找出关键代码点并设下断点进行动态调试得到值</p><p>使用32位od打开文件</p><p>运行之后f8 直到没有反应 此时就处于main函数入口处</p><p><img src="/img/-163836609072327.png" alt="img"></p><p><img src="/img/-163836609072329.png" alt="img"></p><p>其实可以验证是不是main函数 od里面停在的指令的标志位是1040 ida里面主函数的标志位也为1040</p><p><img src="/img/-163836609072331.png" alt="img"></p><p>在主函数处下断点并重新运行到断点处</p><p><img src="/img/-163836609072433.png" alt="img"></p><p>f7步进主函数里面</p><p><img src="/img/-163836609072435.png" alt="img"></p><p>继续f8单步执行到不动 （标志位相同）</p><p><img src="/img/-163836609072437.png" alt="img"></p><p><img src="/img/-163836609072439.png" alt="img"></p><p><img src="/img/-163836609072441.png" alt="img"></p><p>因为main函数里面gets是我们输入的值</p><p>现在可以缕清此题的逻辑：内部有密钥和声明的值进行RC4加密，我们输入的值与此结果进行比较 相同则ok</p><p>此时我们从ida找到加密算法的最后一步 即最后进行异或的操作（此时代表加密结束 出现结果） 找到相对应的标志位并在od中设置断点</p><p><img src="/img/-163836609072443.png" alt="img"></p><p><img src="/img/-163836609072445.png" alt="img"></p><p><img src="/img/-163836609072447.png" alt="img"></p><p>于是我们现在可以任意输入一串值（建议与flag长度相等）来获得函数内与之异或的值，而且我们知到声明的值</p><p>而且异或的逻辑比较简单 异或回去就可</p><p>我们输入43位长的字符串（应该要42位）</p><p><img src="/img/-163836609072449.png" alt="img"></p><p>找到断点处直接f4执行到此位置 选择在内存窗口中转到-&gt;地址</p><p><img src="/img/-163836609072451.png" alt="img"></p><p><img src="/img/-163836609072453.png" alt="img"></p><p>我们可以看到输入的值还有函数声明的值</p><p><img src="/img/-163836609072555.png" alt="img"></p><p>而我们要关注的是al的值 它里面存放的是与加密算法异或的值</p><p><img src="/img/-163836609072557.png" alt="img"></p><p>进行动态调试（f8）并记录每次运行到断点处指令时al的值</p><blockquote><p><strong>93 e0 ec 83 e4 c6 1d 0 0 92 de b5 12 84 f7 2d 56 b1 47 e2 69 b4 8a 95 ba 72 62 8 93 f9 cc 2d a9 e2 d0 65 4b 78 68 24 d7 91</strong></p></blockquote><p>接下来就是写脚本求flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">str1 = [<span class="hljs-number">0x93</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x92</span>,<br>        <span class="hljs-number">0xde</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0xe2</span>,<br>        <span class="hljs-number">0x69</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0x8a</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0xf9</span>,<br>        <span class="hljs-number">0xcc</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0x91</span>]<br><br><br>str2 = [<span class="hljs-number">0xF5</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x65</span>,<br>        <span class="hljs-number">0x30</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xD3</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x1A</span>,<br>        <span class="hljs-number">0x6F</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0xD7</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE8</span>,<span class="hljs-number">0xB8</span>,<br>        <span class="hljs-number">0x83</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0x4B</span>,<br>        <span class="hljs-number">0x99</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xE6</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xEC</span>]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(str1[i] ^ str2[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{c5e0f5f6-f79e-5b9b-988f-28f046117802}</strong></p></blockquote><hr><h1 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h1><p>主要难点在于去除花指令</p><p>自己写的教程可能没有那么详细</p><p>推荐一下：</p><p><strong><a href="https://www.bilibili.com/video/BV1br4y127eM?spm_id_from=333.1007.top_right_bar_window_history.content.click">绿城杯-Reverse(逆向)-Green-babyvxworks 浅谈花指令_哔哩哔哩_bilibili</a></strong></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">flag = [<span class="hljs-number">188</span>,<span class="hljs-number">10</span>,<span class="hljs-number">187</span>,<span class="hljs-number">193</span>,<span class="hljs-number">213</span>,<span class="hljs-number">134</span>,<span class="hljs-number">127</span>,<span class="hljs-number">10</span>,<span class="hljs-number">201</span>,<span class="hljs-number">185</span>,<span class="hljs-number">81</span>,<span class="hljs-number">78</span>,<span class="hljs-number">136</span>,<span class="hljs-number">10</span>,<span class="hljs-number">130</span>,<br>        <span class="hljs-number">185</span>,<span class="hljs-number">49</span>,<span class="hljs-number">141</span>,<span class="hljs-number">10</span>,<span class="hljs-number">253</span>,<span class="hljs-number">201</span>,<span class="hljs-number">199</span>,<span class="hljs-number">127</span>,<span class="hljs-number">185</span>,<span class="hljs-number">17</span>,<span class="hljs-number">78</span>,<span class="hljs-number">185</span>,<span class="hljs-number">232</span>,<span class="hljs-number">141</span>,<span class="hljs-number">87</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        flag[i] = ((flag[i] - <span class="hljs-number">3</span>) ^ <span class="hljs-number">0x22</span>) &amp; <span class="hljs-number">0xff</span> <span class="hljs-comment">#防止溢出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{helo_w0rld_W3lcome_70_R3}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识-技巧</title>
    <link href="/others/%E7%9F%A5%E8%AF%86-%E6%8A%80%E5%B7%A7/"/>
    <url>/others/%E7%9F%A5%E8%AF%86-%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="一些汇总"><a href="#一些汇总" class="headerlink" title="一些汇总"></a>一些汇总</h2><h3 id="壳"><a href="#壳" class="headerlink" title="壳"></a><strong>壳</strong></h3><p>压缩壳：对软件进行压缩，使其体积减小；在软件被执行的时候进行解压缩，解压缩后与加壳前程序结构相同</p><p>加密壳：对软件进行保护，使其关键代码不被逆向或者不被破解；在软件被执行后或者执行时进行解密，解密后与加壳前程序结构可能不同</p><p>加密壳保护强度划分：</p><p>PE加密壳：软件加壳后PE格式布局发生变化，解密后PE格式布局与原来不同</p><p>虚拟指令壳：虚拟机的壳，将软件二进制代码中指令进行模拟，保护强度更高</p><hr><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a><strong>寄存器</strong></h3><p>ECX寄存器：用于循环时的计数</p><hr><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a><strong>脱壳</strong></h3><p>寻找OEP，即原始入口点（在加壳前的入口点）</p><hr><h3 id="dump-amp-反dump-amp-反反dump"><a href="#dump-amp-反dump-amp-反反dump" class="headerlink" title="dump &amp; 反dump &amp; 反反dump"></a><strong>dump &amp; 反dump &amp; 反反dump</strong></h3><hr><h3 id="hook技术"><a href="#hook技术" class="headerlink" title="hook技术"></a><strong>hook技术</strong></h3><p>Hook技术无论对安全软件还是恶意软件都是十分关键的一项技术 其本质就是劫持函数调用 </p><p>在程序中可以理解为“劫持”</p><p>简单说hook技术就是在程序运行的时候经过几种技术手段来改变程序流程走向操做者指定的函数 常见的是在调用api函数时 会先运行操做者的函数 而后再进入到本来应该调用的函数上</p><hr><h3 id="TEA-amp-XTEA-amp-XXTEA加密"><a href="#TEA-amp-XTEA-amp-XXTEA加密" class="headerlink" title="TEA &amp; XTEA &amp; XXTEA加密"></a><strong>TEA &amp; XTEA &amp; XXTEA加密</strong></h3><p>xtea算法是tea算法的升级版 增加了更多密钥表 移位和异或操作</p><p>xxtea算法是xtea算法的升级版 比之前两个要更复杂 也叫做Corrected Block TEA</p><hr><h3 id="PE文件"><a href="#PE文件" class="headerlink" title="PE文件"></a><strong>PE文件</strong></h3><hr><h3 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a><strong>UPX</strong></h3><p>一种比较简单的压缩壳</p><p>主要功能是压缩PE文件 如exe dll等文件</p><hr><h3 id="反调试-amp-反反调试"><a href="#反调试-amp-反反调试" class="headerlink" title="反调试 &amp; 反反调试"></a><strong>反调试 &amp; 反反调试</strong></h3><hr><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><h3 id="1"><a href="#1" class="headerlink" title="1:"></a><strong>1:</strong></h3><p>当所需字符串过长时 可以去Hex View窗口查看数组开始地址以及结束地址</p><p><img src="/img/test1.png" alt="img"></p><p><img src="/img/-16383646743653.png" alt="img"></p><hr><h3 id="2"><a href="#2" class="headerlink" title="2:"></a><strong>2:</strong></h3><p>.pyc文件使用在线反编译py软件</p><p>.key文件为txt加密文件 将后缀改为.txt即可</p><hr><h3 id="3"><a href="#3" class="headerlink" title="3:"></a><strong>3:</strong></h3><p>CryptaCreateHash函数中  <strong>0x8004u</strong> 为标识符        此加密可用md5解决</p><hr><h3 id="4"><a href="#4" class="headerlink" title="4:"></a><strong>4:</strong></h3><p>MD5函数特征码</p><p>= 1732584193        或者                  = 0x67452301</p><p>= -271733879                                  = 0xefcdab89</p><p>= -1732584194                                 = 0x98badcfe</p><p>= 271733878                                    = 0x10325476</p><hr><h3 id="5"><a href="#5" class="headerlink" title="5:"></a><strong>5:</strong></h3><p>base64表:</p><p>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</p><p>base58表:</p><p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p><hr><h3 id="6"><a href="#6" class="headerlink" title="6:"></a><strong>6:</strong></h3><p>brainfuck代码由 &lt; &gt; [ ] + - , .八个符号组成</p><p><img src="/img/-16383646743655.png" alt="img"></p><p>[ ]括号里面为for循环</p><hr><h3 id="7"><a href="#7" class="headerlink" title="7:"></a><strong>7:</strong></h3><p>TEA &amp; XTEA &amp; XXTEA加密特征码：</p><p><strong>0x9e3779b9</strong>     或(和)     <strong>0x61c88647</strong></p><hr><h3 id="8"><a href="#8" class="headerlink" title="8:"></a><strong>8:</strong></h3><p>.NET文件使用dnSpy打开 编码方式为c#</p><hr><h3 id="9"><a href="#9" class="headerlink" title="9:"></a><strong>9:</strong></h3><p>__gmpz_init_set_str为 GNU 高精度算法库(GNU Multiple Precision Arithmetic Library)</p><p>__gmpz_powm函数将计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中</p><p>且 <strong>65537</strong> 比较敏感</p><p>所以可以确定为RSA加密算法</p><p><img src="/img/-16383646743667.png" alt="img"></p><hr><h3 id="10"><a href="#10" class="headerlink" title="10:"></a><strong>10:</strong></h3><p>打开python打包的exe文件：</p><p><img src="/img/-16383646743669.png" alt="img"></p><p>首先使用命令（pyinstxtractor.py可自行下载）同一目录下</p><blockquote><p><strong>python pyinstxtractor.py attachment.exe</strong></p></blockquote><p>将exe文件解包</p><p><img src="/img/-163836467436611.png" alt="img"></p><p>找到 <strong>login</strong>或者是<strong>main</strong> 和 <strong>struct</strong></p><p>用winhex查看头部</p><p>将login头部缺少信息用struct头部补充</p><p>最后将login后缀改名.pyc</p><hr><h3 id="11"><a href="#11" class="headerlink" title="11:"></a><strong>11:</strong></h3><p>控制流平坦化：</p><p>一段普通程序添加控制流平坦化后 效果如下图：</p><p><img src="/img/-163836467436613.png" alt="img"></p><p>去除：（需要angr环境）</p><p><img src="/img/-163836467436615.png" alt="img"></p><blockquote><p><strong>python3 deflat.py -f ./attachment –addr 0x400620</strong></p></blockquote><hr><h3 id="12"><a href="#12" class="headerlink" title="12:"></a><strong>12:</strong></h3><p>AES加密模式-CBC判断</p><p><img src="/img/-163836467436617.png" alt="img"></p><hr>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文章-工具-网页</title>
    <link href="/others/%E6%96%87%E7%AB%A0-%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5/"/>
    <url>/others/%E6%96%87%E7%AB%A0-%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h4 id="《汇编语言》——王爽"><a href="#《汇编语言》——王爽" class="headerlink" title="《汇编语言》——王爽"></a>《汇编语言》——王爽</h4><h4 id="《逆向实战分析》——冀云"><a href="#《逆向实战分析》——冀云" class="headerlink" title="《逆向实战分析》——冀云"></a>《逆向实战分析》——冀云</h4><p>链接：<a href="https://pan.baidu.com/s/1HiS4pyHnpNdO8CpNo1ujEQ">https://pan.baidu.com/s/1HiS4pyHnpNdO8CpNo1ujEQ</a><br>提取码：qpjt</p><h4 id="《逆向工程核心原理》——-韩-李承远"><a href="#《逆向工程核心原理》——-韩-李承远" class="headerlink" title="《逆向工程核心原理》——[韩] 李承远"></a>《逆向工程核心原理》——[韩] 李承远</h4><p>链接：<a href="https://pan.baidu.com/s/1Q9hhZM33ZD4lb1z_Qcvncg">https://pan.baidu.com/s/1Q9hhZM33ZD4lb1z_Qcvncg</a><br>提取码：fxfa</p><h4 id="《有趣的二进制：软件安全与逆向分析》——-日-爱甲健二"><a href="#《有趣的二进制：软件安全与逆向分析》——-日-爱甲健二" class="headerlink" title="《有趣的二进制：软件安全与逆向分析》——[日] 爱甲健二"></a>《有趣的二进制：软件安全与逆向分析》——[日] 爱甲健二</h4><p>链接：<a href="https://pan.baidu.com/s/1l7GoVkhnAhKTcyOU-XHrVg">https://pan.baidu.com/s/1l7GoVkhnAhKTcyOU-XHrVg</a><br>提取码：bvik</p><h4 id="《CTF特训营》"><a href="#《CTF特训营》" class="headerlink" title="《CTF特训营》"></a>《CTF特训营》</h4><p>链接：<a href="https://pan.baidu.com/s/1e_HxUmdhE-sR-eZCg-WmJw">https://pan.baidu.com/s/1e_HxUmdhE-sR-eZCg-WmJw</a><br>提取码：xw56</p><hr><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>ALLTOOLS:</p><p>链接：<a href="https://pan.baidu.com/s/1qOMJg1AmBKj5DMbX55I8fQ">https://pan.baidu.com/s/1qOMJg1AmBKj5DMbX55I8fQ</a><br>提取码 / 解压码：flag / hacktheworld</p><p><a href="https://down.52pojie.cn/Tools/Unpackers/">爱盘 - 最新的在线破解工具包 (52pojie.cn)</a></p><hr><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p><p><a href="https://ctf.bugku.com/tools.html">在线工具 - Bugku CTF</a></p><p><a href="https://www.bugku.com/thread-151-1-1.html">CTF中那些脑洞大开的编码和加密_CTF论坛 (bugku.com)</a></p><p><a href="https://docs.python.org/zh-cn/3.7/library/dis.html">dis — Python 字节码反汇编器 — Python 3.7.12 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/reverse/BUUCTF/"/>
    <url>/reverse/BUUCTF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-10-14 to now</center><h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a><strong>刮开有奖</strong></h1><p>首先使用Exeinfo PE检查是否有壳并确定是32位还是64位</p><p>有壳脱壳/无壳查看文件类型-使用32/64位ida打开</p><p>shift+F12进入字符串窗口 发现base64加密方式(确定flag部分用到base64解码)</p><p><img src="/img/-16384147853911.png" alt="img"></p><p>返回main函数 F5查看</p><p><img src="/img/-16384147853913.png" alt="img"></p><p>跟进查看DialogFunc参数</p><p>String设定长度为8位且下面if语句使用到String</p><p>找到可疑点  v4”ak1w“  和  v5”V1Ax” (先用base64解码得到  v4”jMp”  和  v5”WP1”)</p><p>所以此时猜测flag为长为8的字符串</p><p>此时还有两个需注意函数  sub_4010F0  和  sub_401000</p><p><img src="/img/-16384147853915.png" alt="img"></p><p>此时想解决if语句中String[0]的值，那就要先解决v7值为多少</p><p>于是跟进前面与v7有关的函数sub_4010F0(v7,0,10)</p><p><img src="/img/-16384147853917.png" alt="img"></p><p>此函数传入v7-v16十个数 直接c语言实现一下sub_4010F0查看此函数的作用（算法分析）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">sub_4010F0</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a1, <span class="hljs-keyword">int</span> a2, <span class="hljs-keyword">int</span> a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// edx</span><br><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = i;<br>    v6 =  i[a1];<br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; a1[result] )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          a1[v5] = a1[result];<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( a1[i] &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = i;<br>          a1[result] = a1[i];<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    a1[result] = v6;<br>    sub_4010F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">90</span>,<span class="hljs-number">74</span>,<span class="hljs-number">83</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">97</span>,<span class="hljs-number">78</span>,<span class="hljs-number">72</span>,<span class="hljs-number">51</span>,<span class="hljs-number">110</span>,<span class="hljs-number">103</span>&#125;;<br>    sub_4010F0(str,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/-16384147853919.png" alt="img"></p><p>运行得出</p><p><img src="/img/-163841478539111.png" alt="img"></p><p>有理由得出sub_4010F0函数是一个排序函数 且由小到大 所以v7-v16十个数重新由小到大赋值</p><p>解得</p><p><img src="/img/-163841478539113.png" alt="img"></p><blockquote><p><strong>String[0]=51+34=85//ascii=U</strong></p><p><strong>String[1]=//ascii=J</strong></p><p><strong>String[2]=3*69+141/4=87//ascii=W</strong></p><p><strong>String[3]=同String[2]=ascii=P</strong></p><p><strong>v4”jMp”  和  v5”WP1”</strong></p></blockquote><p>所有字符都已得出</p><p>还要再考虑字符的排序 最后得出flag</p><p>后面v4 v5 可以看到第三第四字符已经是WP了 说明 WP1在前 jMp在后</p><p>将他们拼接在一起得到  UJWP1jMp</p><hr><blockquote><p><strong>flag{UJWP1jMp}</strong></p></blockquote><hr><h1 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a><strong>[GWCTF 2019]pyre</strong></h1><p>pyc文件需用pyc反编译器反编译</p><p>寻找在线反编译器即可</p><p>将编译出来的py文件分析 然后进行逆向 写出对应脚本 得到flag</p><p><img src="/img/-163841482765515.png" alt="img"></p><p>根据逻辑分析</p><blockquote><p><strong>num = ((input1[i] + i) % 128 + 128) % 128        #input1[i]中对应的值加上下标的值 模128(后面+128 %128无用)</strong></p></blockquote><blockquote><p><strong>code[i] = code[i] ^ code[i + 1]        #code[i]与后一项进行  异或(同一位置上的数字相等则得0        同一位置上的数字相异则得1)</strong></p></blockquote><p>分析结束后用py编写脚本实现逆向操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python">code = [<br>    <span class="hljs-string">&#x27;\x1f&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x12&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x1d&#x27;</span>,<br>    <span class="hljs-string">&#x27;(&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x01&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x06&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x14&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;,&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x1b&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span>,<br>    <span class="hljs-string">&#x27;?&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>,<br>    <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;:&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x01&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span>,<br>    <span class="hljs-string">&#x27;;&#x27;</span>,<br>    <span class="hljs-string">&#x27;%&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x13&#x27;</span>]<br><br><br>n = <span class="hljs-built_in">len</span>(code)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):   <span class="hljs-comment">#从倒数第二个数开始异或</span><br>    code[i] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(code[i]) ^ <span class="hljs-built_in">ord</span>(code[i+<span class="hljs-number">1</span>]))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(code[i])-i) % <span class="hljs-number">128</span>), end = <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-comment">#end = &quot;&quot;作用为减去每次循环的换行 改用空</span><br></code></pre></td></tr></table></figure><p>运行得到flag</p><hr><blockquote><p><strong>flag{Just_Re_1s_Ha66y!}</strong></p></blockquote><hr><h1 id="迷宫-数独"><a href="#迷宫-数独" class="headerlink" title="迷宫/数独"></a>迷宫/数独</h1><p>迷宫思想：给出几个键位 一般是四个 来控制上下左右 并给出迷宫</p><p><img src="/img/-163841485862217.png" alt="img"></p><p><img src="/img/-163841485862219.png" alt="img"></p><p> ^        1        1        1        1</p><p> 0        1        0        0        0</p><p> 0        1        0        1        0</p><p> 1        1        1        1        #     </p><p>数独思想：给出数独表 并且函数里面可以分析得出行和列不能有同样值</p><p><img src="/img/-163841485862221.png" alt="img"></p><p>flag长为10，输入范围为0-4（已知）</p><p>1  4  _  2  3</p><p>3  0  _  1  _</p><p>0  _  2  3  _</p><p>_  3  _   _  0</p><p>4  2  _  _   1</p><hr><h1 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h1><p>题目为jocker 后面做题要小心点</p><p>无壳 32位 ida32打开</p><p><img src="/img/-163841491804923.png" alt="img"></p><p>shift+f12查看字符串</p><p><img src="/img/-163841491804925.png" alt="img"></p><p>双击到please input you flag:（其实哪个都可以）</p><p>f5进入查看伪代码</p><p><img src="/img/-163841491804927.png" alt="img"></p><p>main函数得出flag长度为24</p><p>进入wrong(Str)和omg(Str)函数：</p><p><img src="/img/-163841491804929.png" alt="img"></p><p><img src="/img/-163841491804931.png" alt="img"></p><p>先不着急分析代码 因为题目是jocker</p><p>继续查看main函数里面的encrypt()和finally()函数 发现encrypt打不开 finally没东西</p><p>encrypt显示40151D指令转换不成代码  可疑</p><p><img src="/img/-163841491804933.png" alt="img"></p><p>找完main函数里面所有的函数 发现最开始的几个字符串还有两个没有找到 并且字符串所在的函数进不去  猜测很有可能真正的flag藏在encrypt函数里面</p><p><img src="/img/-163841491804935.png" alt="img"></p><p>回到main函数 现在我们主要目标就是进入encrypt函数和finally函数</p><p>发现其与0x41进行了异或操作</p><p><img src="/img/-163841491805037.png" alt="img"></p><p>从IDA View窗口找到相应位置（可以找到wrong和omg字符串的位置 此位置下面就是我们要找的for循环和异或操作的汇编指令）</p><p>记录标志位 转战od进行动态分析 dump出函数</p><p>（也可以利用ida进行动态分析 或者shift+f2 使用idc修复指令 可惜我不会）</p><p><img src="/img/-163841491805039.png" alt="img"></p><p>可以看到 40181B异或了41h jle跳转到了401807 说明此范围是for循环</p><p>紧接着到了call指令 所以可以确定call指令进入的就是encrypt函数</p><p>记录标志位 1833</p><p>od32打开找到标志位1833 在此处设置断点</p><p><img src="/img/-163841491805041.png" alt="img"></p><p>f8执行到此处</p><p>发现od在执行到此处时会停止</p><p><img src="/img/-163841491805043.png" alt="img"></p><p>其实是运行到了scanf 需要我们输入字符串</p><p>这里一定要输入与flag等长的字符串 不然程序会自动停止退出</p><p>前面得到flag长为24 我们输入123456789012345678901234</p><p>f7步入jocker.4021D0中</p><p><img src="/img/-163841491805045.png" alt="img"></p><p>这就是encrypt函数内部 而且我们从右下角发现剩余没找到的字符串 也更加证明了我们之前的猜想</p><p>使用插件-&gt;ollydumpex-&gt;dump process进行dump脱壳并保存成新的exe文件</p><p>（关于为什么到这一步进行dump 说实话我也不是很懂）</p><p><img src="/img/-163841491805047.png" alt="img"></p><p>选择Get EIP as OEP并进行dump 获得新的exe文件 再用ida32打开</p><p><img src="/img/-163841491805049.png" alt="img"></p><p>找到start函数并进入（因为没有找到main函数）</p><p>发现以前未发现的字符串 come here 说明我们的方向是对的</p><p><img src="/img/-163841491805051.png" alt="img"></p><p>for循环的if语句解释为：将我们输入的a1与aHahahahaDoYouF[i]进行异或并判断等不等于v2</p><p>但是需要注意一点：for循环了19次 而我们的flag是24位长  再根据wp开始时寻找的字符串 出现过“i hide the last part”  说明flag还缺少一部分 </p><p>先求解flag的第一部分：aHa[i]已知 v2[i]（v2的值是unk_403040赋予的）也已知</p><p><img src="/img/-163841491805053.png" alt="img"></p><p><img src="/img/-163841491805055.png" alt="img"></p><p>接下来写脚本求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">aHa = <span class="hljs-string">&quot;hahahaha_do_you_find_me?&quot;</span><br>v2 = [<span class="hljs-number">0x0e</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x3e</span>,<br>      <span class="hljs-number">0x06</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x0d</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(aHa[i]) ^ v2[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行得到：</p><blockquote><p><strong>flag{d07abccf8a410c</strong></p></blockquote><p>接着我们去找剩下的flag</p><p>在start函数中我们X键对start使用交叉引用 进入第一个函数里面</p><p><img src="/img/-163841491805057.png" alt="img"></p><p>发现这正是我们之前的main函数</p><p><img src="/img/-163841491805059.png" alt="img"></p><p>接着我们进入finally函数 dump后变成了sub_40159A函数</p><p><img src="/img/-163841491805161.png" alt="img"></p><p>v3=%tp&amp;: 然后并没有其他可用信息了</p><p>接下来进行猜测：</p><p>flag的标准形式最后一位是 ‘} ’ 也就是说 v3的最后一位 ‘:’ 与一个数异或得到了 ‘}’ </p><p>: ^ } = 71</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;:&#x27;</span>) ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>))<br></code></pre></td></tr></table></figure><p>输出</p><blockquote><p><strong>71</strong></p></blockquote><p>我们可以假设 v3的所有位都与71进行了异或 编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python">v3 = <span class="hljs-string">&quot;%tp&amp;:&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>      <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(v3[i]) ^ <span class="hljs-number">71</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行得到：</p><blockquote><p><strong>b37a}</strong></p></blockquote><p>将flag的两个部分拼接</p><hr><blockquote><p><strong>flag{d07abccf8a410cb37a}</strong></p></blockquote><hr><h1 id="2019红帽杯-childRE"><a href="#2019红帽杯-childRE" class="headerlink" title="[2019红帽杯]childRE"></a>[2019红帽杯]childRE</h1><p>无壳 64位 ida64打开</p><p><img src="/img/-163841496551963.png" alt="img"></p><p>shift+f12寻找字符串</p><p><img src="/img/-163841496551965.png" alt="img"></p><p>根据字符串的内容推测 得出的flag要经过md5加密才可以提交</p><p>进入main函数 找到输出flag字符串位置 从下往上分析</p><p><img src="/img/-163841496551967.png" alt="img"></p><p>第一部分 对outputString取余数和商的结果已知 并且和其进行对比的字符串也已知</p><p>编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">str1 = <span class="hljs-string">&#x27;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;&#x27;</span><br>str2 = <span class="hljs-string">&#x27;55565653255552225565565555243466334653663544426565555525555222&#x27;</span><br>str3 = <span class="hljs-string">&#x27;1234567890-=!@#$%^&amp;*()_+qwertyuiop[]QWERTYUIOP&#123;&#125;asdfghjkl;,ASDFGHJKL:&quot;ZXCVBNM&lt;&gt;?zxcvbnm,./&#x27;</span><br><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>):<br>    name += <span class="hljs-built_in">chr</span>(str3.index(str1[i]) + str3.index(str2[i])*<span class="hljs-number">23</span>)   <span class="hljs-comment">#.index可以找出后缀在前缀中的匹配位置</span><br>                                                                <span class="hljs-comment">#余数+商*除数</span><br>                                                                <span class="hljs-comment">#.index返回的值是一个是余数和一个是商</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputString = &quot;</span> + name)<br></code></pre></td></tr></table></figure><p>输出结果</p><blockquote><p><strong>outputString = private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</strong></p></blockquote><p>继续向上分析：</p><p><img src="/img/-163841496551969.png" alt="img"></p><p>以下资料摘自：<a href="https://blog.csdn.net/liweigao01/article/details/78351464">https://blog.csdn.net/liweigao01/article/details/78351464</a></p><blockquote><p><strong>C++ 编译器的函数名修饰规则</strong></p></blockquote><blockquote><p><strong>无论 __cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”開始，后面紧跟函数的名字。再后面是參数表的開始标识和 依照參数类型代号拼出的參数表。</strong></p></blockquote><blockquote><p><strong>知：outputString = ?My_Aut0_PWN</strong></p></blockquote><blockquote><p><strong>对于C++的类成员函数（其调用方式是__thiscall）。函数的名字修饰与非成员的C++函数稍有不同，首先就是在函数名字和參数表之间插入以“@”字 符引导的类名。</strong></p></blockquote><blockquote><p><strong>知：outputString = ?My_Aut0_PWN@R0Pxx</strong></p></blockquote><blockquote><p><strong>其次是參数表的開始标识不同，公有（public）成员函数的标识是“@@QAE”,保护（protected）成员函数的标识是 “@@IAE”,私有（private）成员函数的标识是“@@AAE”。</strong></p></blockquote><blockquote><p><strong>知：outputString = ?My_Aut0_PWN@R0Pxx@****@AAE</strong></p></blockquote><blockquote><p><strong>之后是添加參数，先填返回值类型參数，再添加函数形參</strong></p><p><strong>X–void</strong>    </p><p><strong>D–char</strong>    </p><p><strong>E–unsigned char</strong>    </p><p><strong>F–short</strong>    </p><p><strong>H–int</strong>    </p><p><strong>I–unsigned int</strong>    </p><p><strong>J–long</strong>    </p><p><strong>K–unsigned long（DWORD）</strong> </p><p><strong>M–float</strong>    </p><p><strong>N–double</strong>    </p><p><strong>_N–bool</strong> </p><p><strong>U–struct</strong> </p><p><strong>….</strong> </p><p><strong>指针的方式有些特别。用PA表示指针，用PB表示const类型的指针。</strong></p></blockquote><blockquote><p><strong>返回值类型为char 对应PAD</strong> </p><p><strong>形参类型为unsigned char 对应PAE</strong></p><p><strong>知：outputString = ?My_Aut0_PWN@R0Pxx@@AAEPADPAE</strong></p></blockquote><blockquote><p><strong>參数表后以“@Z”标识整个名字的结束。假设该函数无參数，则 以“Z”标识结束。</strong></p></blockquote><blockquote><p><strong>知：outputString = ?My_Aut0_PWN@R0Pxx@****@AAEPADPAE@Z</strong></p></blockquote><p>继续向上分析：</p><p><img src="/img/-163841496552071.png" alt="img"></p><p>if( v4 )里面我们无法得知进行了怎么的顺序重排 所以这时候需要进行动态调试：</p><p>此处设下断点</p><p><img src="/img/-163841496552073.png" alt="img"></p><p>选择 Local Windows debugger</p><p><img src="/img/-163841496552075.png" alt="img"></p><p>运行 输入一串长为31且互不相同的字符串</p><p>这里我使用的：qwertyuiopasdfghjklzxcvbnm12345</p><p>之后f7单步步入进去 找到与值对应的赋值命令  al里面的值便是我们所需要的（动调前可以根据字符串等来进行定位）</p><p><img src="/img/-163841496552077.png" alt="img"></p><p>之后f8单步运行并记录下RAX中的31个字符（字符根据自己输入内容而改变 并不是完全不变）</p><p><img src="/img/-163841496552079.png" alt="img"></p><p>得到打乱后顺序：</p><blockquote><p><strong>0x68,0x6a,0x69,0x6b,0x6c,0x6f,0x72,0x7a,0x78,0x70,0x63,0x76,0x61,0x74,0x77,0x62,0x6e,</strong></p></blockquote><blockquote><p><strong>0x73,0x6d,0x31,0x64,0x79,0x32,0x33,0x66,0x34,0x35,0x67,0x75,0x65,0x71</strong></p></blockquote><p>接下来编写脚本进行求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">flag = <span class="hljs-string">&#x27;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&#x27;</span>    <br><br>a = <span class="hljs-string">&#x27;qwertyuiopasdfghjklzxcvbnm12345&#x27;</span>   <span class="hljs-comment">#自己输入字符串 动调获得打乱的顺序 逆向求解</span><br>b = [<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x63</span>,<br>     <span class="hljs-number">0x76</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x79</span>,<br>     <span class="hljs-number">0x32</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x71</span>]<br>B = <span class="hljs-string">&#x27;&#x27;</span><br>c = [<span class="hljs-number">0</span>]*<span class="hljs-number">31</span><br>d = [<span class="hljs-number">0</span>]*<span class="hljs-number">31</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>): <span class="hljs-comment">#将动调获得的结果转换为字符串</span><br>    B += <span class="hljs-built_in">chr</span>(b[i])   <span class="hljs-comment">#B = &#x27;hjiklorzxpcvatwbnsm1dy23f45gueq&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>): <br>    c[i] = a.index(B[i])    <span class="hljs-comment">#获得顺序</span><br>    d[c[i]] = flag[i]   <span class="hljs-comment">#重新排列顺序并打印</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>):<br>    <span class="hljs-built_in">print</span>(d[i], end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p><strong>Z0@tRAEyuP@xAAA?M_A0_WNPx@@EPDP</strong></p></blockquote><p>最后进行MD5加密</p><hr><blockquote><p><strong>flag{63b148e750fed3a33419168ac58083f5}</strong></p></blockquote><hr><h1 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h1><p>无壳 64位 ida64打开 elf文件</p><p><img src="/img/-163841513215181.png" alt="img"></p><p>shift+f12进入字符串查找 找到与flag相关 进入函数</p><p>并且发现base64加密表 后面可能会进行解密</p><p><img src="/img/-163841513215183.png" alt="img"></p><p>进入main函数分析：</p><p><img src="/img/-163841513215185.png" alt="img"></p><p>查看其他wp时候 发现v15异或之后等于</p><blockquote><p><strong>the first four chars are ‘flag’</strong></p></blockquote><p>不过对我好像没有什么太大的影响</p><p>接着向下分析：</p><p><img src="/img/-163841513215187.png" alt="img"></p><p>off_6CC090的值：</p><blockquote><p><strong>Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ==</strong></p></blockquote><p>对它进行十次base64解密</p><p><img src="/img/-163841513215189.png" alt="img"></p><blockquote><p><strong><a href="https://bbs.pediy.com/thread-254172.html">https://bbs.pediy.com/thread-254172.html</a></strong></p></blockquote><p>网站内容不错。。 就是没有flag</p><p>我在找off_6CC090字符串的时候 它下面有两个值我注意了一下 不过也没有放在心上</p><p>这时候回头来看 交叉引用找到所在函数</p><p><img src="/img/-163841513215191.png" alt="img"></p><p>然后对函数名进行交叉引用发现来自.fini段</p><p><img src="/img/-163841513215193.png" alt="img"></p><p>其解示为</p><blockquote><p><strong>此节区包含了可执行的指令，是进程终止代码的一部分。程序正常退出时，系统将安排执行这里的代码。</strong></p></blockquote><p>所以我们应该是找对了地方</p><p>开始着手分析：</p><p><img src="/img/-163841513215195.png" alt="img"></p><p>补充两点：</p><p>1.byte_6CC0A0的长度为24 </p><p>2.&amp;v4+j = v4[j]</p><p>这里就是我前面说的 v15的值对我做这道题没有什么影响</p><p>编写脚本求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">byte_ = [<span class="hljs-number">0x40</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x5D</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x2F</span>, <br>         <span class="hljs-number">0x24</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x6E</span>, <br>         <span class="hljs-number">0x72</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x5B</span>]<br>STR = <span class="hljs-string">&#x27;flag&#x27;</span><br>v4 = <span class="hljs-string">&#x27;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    v4 += <span class="hljs-built_in">chr</span>(byte_[i] ^ <span class="hljs-built_in">ord</span>(STR[i]))   <span class="hljs-comment">#求出v4</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(byte_)):<br>    flag += <span class="hljs-built_in">chr</span>(byte_[i] ^ <span class="hljs-built_in">ord</span>(v4[i%<span class="hljs-number">4</span>]))<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>运行得到结果</p><hr><blockquote><p><strong>flag{Act1ve_Defen5e_Test}</strong></p></blockquote><hr><h1 id="Youngter-drive"><a href="#Youngter-drive" class="headerlink" title="Youngter-drive"></a>Youngter-drive</h1><p>查壳 发现upx壳 32位</p><p>用upx脱壳工具 upx -d Youngter-drive.exe   脱完放进ida32打开</p><p>shift+f12打开字符串寻找main函数 留意</p><p><img src="/img/-163841517315297.png" alt="img"></p><p>分析：</p><p><img src="/img/-163841517315399.png" alt="img"></p><p>进入线程StartAddress进行查看</p><p>找到关键函数sub_41112C</p><p><img src="/img/-1638415173153101.png" alt="img"></p><p>进入 分析：</p><p><img src="/img/-1638415173153103.png" alt="img"></p><p>再进入另一个线程sub_41119F分析查看</p><p><img src="/img/-1638415173153105.png" alt="img"></p><p>也就是说 线程对字符串加密时只对奇数位加密 偶数位直接赋值</p><p>另外 我们现在还没有找到输出flag的字符</p><p>继续向下分析main函数：</p><p><img src="/img/-1638415173153107.png" alt="img"></p><p><img src="/img/-1638415173153109.png" alt="img"></p><p>接下来编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">off_418004 = <span class="hljs-string">&#x27;TOiZiZtOrYaToUwPnToBsOaOapsyS&#x27;</span><br>off_418000 = <span class="hljs-string">&#x27;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>):<br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>):<br>        flag += off_418004[i]   <span class="hljs-comment">#线程sub_41119F命令</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span>(off_418004[i].isupper()):    <span class="hljs-comment">#线程StartAddress命令</span><br>            flag += <span class="hljs-built_in">chr</span>(off_418000.index(off_418004[i]) + <span class="hljs-number">96</span>)<br>        <span class="hljs-keyword">else</span>:<br>            flag += <span class="hljs-built_in">chr</span>(off_418000.index(off_418004[i]) + <span class="hljs-number">38</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>运行得出</p><blockquote><p><strong>ThisisthreadofwindowshahaIsES</strong></p></blockquote><p>少了一位 </p><p>网上的wp都没有很好的告诉最后一位怎么求 只是穷举</p><p>但有人说最后一位是什么都可以 BUU平台只认可E</p><p>不明白</p><hr><blockquote><p><strong>flag{ThisisthreadofwindowshahaIsESE}</strong></p></blockquote><hr><h1 id="2019红帽杯-Snake"><a href="#2019红帽杯-Snake" class="headerlink" title="[2019红帽杯]Snake"></a>[2019红帽杯]Snake</h1><p>第一次遇到 unity 和 .dll 文件处理</p><p>第一次使用pyhton的ctypes库</p><p><img src="/img/-1638415221434111.png" alt="img"></p><p>用dnSpy打开位于 \Snake_Data\Managed 的 Assembly-CSharp.dll 文件</p><blockquote><p><strong>unity在打包后，会将所有的代码打进一个Assembly-CSharp.dll的文件里面，通过这个文件的反编译，就是详细看见里面的代码内容。</strong></p></blockquote><p>找到这个（具体怎么找还在学ing）</p><p><img src="/img/-1638415221434113.png" alt="img"></p><p>其中对于GameObject解释：</p><p><img src="/img/-1638415221435115.png" alt="img"></p><p><img src="/img/-1638415221435117.png" alt="img"></p><p>ida64打开 Interface.dll </p><p>所在位置 \Snake_Data\Plugins</p><p>发现flag相关字符串 证明找对入口</p><p><img src="/img/-1638415221435119.png" alt="img"></p><p>接下来使用python的ctypes库进行爆破</p><p><img src="/img/-1638415221435121.png" alt="img"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> ctypes<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    dll = ctypes.cdll.LoadLibrary(<span class="hljs-string">&quot;\\Interface.dll&quot;</span>)<br>    <span class="hljs-built_in">print</span>(i)<br>    dll.GameObject(i)   <span class="hljs-comment">#调用GameObject()函数</span><br><br><span class="hljs-comment">#要跑很久很久</span><br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Ch4rp_W1th_R$@}</strong></p></blockquote><hr><h1 id="羊城杯-2020-Bytecode"><a href="#羊城杯-2020-Bytecode" class="headerlink" title="[羊城杯 2020]Bytecode"></a>[羊城杯 2020]Bytecode</h1><p>python的bytecode 也就是字节码</p><p>反汇编指令功能可以从下面网站查找</p><p><strong><a href="https://docs.python.org/zh-cn/3.7/library/dis.html">dis — Python 字节码反汇编器 — Python 3.7.12 文档</a></strong></p><p>原题目给的txt文档：</p><p>我尽量写的详细一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><code class="hljs Python"> <span class="hljs-number">4</span>           <span class="hljs-number">0</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-number">3</span>)<br>             <span class="hljs-number">3</span> LOAD_CONST               <span class="hljs-number">1</span> (<span class="hljs-number">37</span>)<br>             <span class="hljs-number">6</span> LOAD_CONST               <span class="hljs-number">2</span> (<span class="hljs-number">72</span>)<br>             <span class="hljs-number">9</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">9</span>)<br>            <span class="hljs-number">12</span> LOAD_CONST               <span class="hljs-number">4</span> (<span class="hljs-number">6</span>)<br>            <span class="hljs-number">15</span> LOAD_CONST               <span class="hljs-number">5</span> (<span class="hljs-number">132</span>)<br>            <span class="hljs-number">18</span> BUILD_LIST               <span class="hljs-number">6</span><br>            <span class="hljs-number">21</span> STORE_NAME               <span class="hljs-number">0</span> (en)<br>              <span class="hljs-comment">#STORE_NAME:声明变量</span><br>              <span class="hljs-comment">#BUILD_LIST:创建一个列表</span><br>              <span class="hljs-comment">#第4行代码:en = [3,37,72,9,6,132]</span><br> <span class="hljs-number">5</span>          <span class="hljs-number">24</span> LOAD_CONST               <span class="hljs-number">6</span> (<span class="hljs-number">101</span>)<br>            <span class="hljs-number">27</span> LOAD_CONST               <span class="hljs-number">7</span> (<span class="hljs-number">96</span>)<br>            <span class="hljs-number">30</span> LOAD_CONST               <span class="hljs-number">8</span> (<span class="hljs-number">23</span>)<br>            <span class="hljs-number">33</span> LOAD_CONST               <span class="hljs-number">9</span> (<span class="hljs-number">68</span>)<br>            <span class="hljs-number">36</span> LOAD_CONST              <span class="hljs-number">10</span> (<span class="hljs-number">112</span>)<br>            <span class="hljs-number">39</span> LOAD_CONST              <span class="hljs-number">11</span> (<span class="hljs-number">42</span>)<br>            <span class="hljs-number">42</span> LOAD_CONST              <span class="hljs-number">12</span> (<span class="hljs-number">107</span>)<br>            <span class="hljs-number">45</span> LOAD_CONST              <span class="hljs-number">13</span> (<span class="hljs-number">62</span>)<br>            <span class="hljs-number">48</span> LOAD_CONST               <span class="hljs-number">7</span> (<span class="hljs-number">96</span>)<br>            <span class="hljs-number">51</span> LOAD_CONST              <span class="hljs-number">14</span> (<span class="hljs-number">53</span>)<br>            <span class="hljs-number">54</span> LOAD_CONST              <span class="hljs-number">15</span> (<span class="hljs-number">176</span>)<br>            <span class="hljs-number">57</span> LOAD_CONST              <span class="hljs-number">16</span> (<span class="hljs-number">179</span>)<br>            <span class="hljs-number">60</span> LOAD_CONST              <span class="hljs-number">17</span> (<span class="hljs-number">98</span>)<br>            <span class="hljs-number">63</span> LOAD_CONST              <span class="hljs-number">14</span> (<span class="hljs-number">53</span>)<br>            <span class="hljs-number">66</span> LOAD_CONST              <span class="hljs-number">18</span> (<span class="hljs-number">67</span>)<br>            <span class="hljs-number">69</span> LOAD_CONST              <span class="hljs-number">19</span> (<span class="hljs-number">29</span>)<br>            <span class="hljs-number">72</span> LOAD_CONST              <span class="hljs-number">20</span> (<span class="hljs-number">41</span>)<br>            <span class="hljs-number">75</span> LOAD_CONST              <span class="hljs-number">21</span> (<span class="hljs-number">120</span>)<br>            <span class="hljs-number">78</span> LOAD_CONST              <span class="hljs-number">22</span> (<span class="hljs-number">60</span>)<br>            <span class="hljs-number">81</span> LOAD_CONST              <span class="hljs-number">23</span> (<span class="hljs-number">106</span>)<br>            <span class="hljs-number">84</span> LOAD_CONST              <span class="hljs-number">24</span> (<span class="hljs-number">51</span>)<br>            <span class="hljs-number">87</span> LOAD_CONST               <span class="hljs-number">6</span> (<span class="hljs-number">101</span>)<br>            <span class="hljs-number">90</span> LOAD_CONST              <span class="hljs-number">25</span> (<span class="hljs-number">178</span>)<br>            <span class="hljs-number">93</span> LOAD_CONST              <span class="hljs-number">26</span> (<span class="hljs-number">189</span>)<br>            <span class="hljs-number">96</span> LOAD_CONST               <span class="hljs-number">6</span> (<span class="hljs-number">101</span>)<br>            <span class="hljs-number">99</span> LOAD_CONST              <span class="hljs-number">27</span> (<span class="hljs-number">48</span>)<br>           <span class="hljs-number">102</span> BUILD_LIST              <span class="hljs-number">26</span><br>           <span class="hljs-number">105</span> STORE_NAME               <span class="hljs-number">1</span> (output)<br>              <span class="hljs-comment">#第5行代码转换同第4行</span><br> <span class="hljs-number">7</span>         <span class="hljs-number">108</span> LOAD_CONST              <span class="hljs-number">28</span> (<span class="hljs-string">&#x27;welcome to GWHT2020&#x27;</span>)<br>           <span class="hljs-number">111</span> PRINT_ITEM          <br>           <span class="hljs-number">112</span> PRINT_NEWLINE       <br>              <span class="hljs-comment">#PRINT:打印</span><br> <span class="hljs-number">9</span>         <span class="hljs-number">113</span> LOAD_NAME                <span class="hljs-number">2</span> (raw_input)<br>           <span class="hljs-number">116</span> LOAD_CONST              <span class="hljs-number">29</span> (<span class="hljs-string">&#x27;please input your flag:&#x27;</span>)<br>           <span class="hljs-number">119</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">122</span> STORE_NAME               <span class="hljs-number">3</span> (flag)<br>              <span class="hljs-comment">#CALL_FUNCTION:可以理解为调用函数或者指令</span><br>              <span class="hljs-comment">#第9行代码:flag = raw_input(&#x27;please input your flag:&#x27;)</span><br><span class="hljs-number">10</span>         <span class="hljs-number">125</span> LOAD_NAME                <span class="hljs-number">3</span> (flag)<br>           <span class="hljs-number">128</span> STORE_NAME               <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>              <span class="hljs-comment">#赋值</span><br>              <span class="hljs-comment">#第10行代码:str = flag</span><br><span class="hljs-number">12</span>         <span class="hljs-number">131</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>           <span class="hljs-number">134</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">137</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">140</span> STORE_NAME               <span class="hljs-number">6</span> (a)<br>              <span class="hljs-comment">#CALL_FUNCTION调用了len函数</span><br>              <span class="hljs-comment">#第12行代码:a = len(str)</span><br><span class="hljs-number">13</span>         <span class="hljs-number">143</span> LOAD_NAME                <span class="hljs-number">6</span> (a)<br>           <span class="hljs-number">146</span> LOAD_CONST              <span class="hljs-number">30</span> (<span class="hljs-number">38</span>)<br>           <span class="hljs-number">149</span> COMPARE_OP               <span class="hljs-number">0</span> (&lt;)<br>           <span class="hljs-number">152</span> POP_JUMP_IF_FALSE      <span class="hljs-number">173</span><br>              <span class="hljs-comment">#POP_JUMP_IF_FALSE:可以看成使用if语句判断 失败则跳到173位置</span><br>              <span class="hljs-comment">#第13行代码:if(a &lt; 38):</span><br><span class="hljs-number">14</span>         <span class="hljs-number">155</span> LOAD_CONST              <span class="hljs-number">31</span> (<span class="hljs-string">&#x27;lenth wrong!&#x27;</span>)<br>           <span class="hljs-number">158</span> PRINT_ITEM          <br>           <span class="hljs-number">159</span> PRINT_NEWLINE       <br><br><span class="hljs-number">15</span>         <span class="hljs-number">160</span> LOAD_NAME                <span class="hljs-number">7</span> (exit)<br>           <span class="hljs-number">163</span> LOAD_CONST              <span class="hljs-number">32</span> (<span class="hljs-number">0</span>)<br>           <span class="hljs-number">166</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">169</span> POP_TOP             <br>           <span class="hljs-number">170</span> JUMP_FORWARD             <span class="hljs-number">0</span> (to <span class="hljs-number">173</span>)<br>              <span class="hljs-comment">#第15行代码:exit(0)</span><br><span class="hljs-number">17</span>     &gt;&gt;  <span class="hljs-number">173</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">176</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">179</span> LOAD_CONST              <span class="hljs-number">32</span> (<span class="hljs-number">0</span>)<br>           <span class="hljs-number">182</span> BINARY_SUBSCR<br>              <span class="hljs-comment">#BINARY_SUBSCR:作用为使之变成str[0]</span><br>           <span class="hljs-number">183</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">186</span> LOAD_CONST              <span class="hljs-number">33</span> (<span class="hljs-number">2020</span>)<br>           <span class="hljs-number">189</span> BINARY_MULTIPLY<br>              <span class="hljs-comment">#到这里 第17行的代码为 ord(str[0])*2020     </span><br>           <span class="hljs-number">190</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">193</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">196</span> LOAD_CONST              <span class="hljs-number">34</span> (<span class="hljs-number">1</span>)<br>           <span class="hljs-number">199</span> BINARY_SUBSCR       <br>           <span class="hljs-number">200</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">203</span> BINARY_ADD <br>              <span class="hljs-comment">#这里是相加 在前面基础上加上 ord(str[1])        </span><br>           <span class="hljs-number">204</span> LOAD_CONST              <span class="hljs-number">33</span> (<span class="hljs-number">2020</span>)<br>           <span class="hljs-number">207</span> BINARY_MULTIPLY<br>              <span class="hljs-comment">#关键逻辑点在这里 这里的相乘是2020乘上前面的所有</span><br>              <span class="hljs-comment">#即到这里 第17行代码为 (ord(str[0]) * 2020 + ord(str[1])) * 2020</span><br>              <span class="hljs-comment">#后面逻辑与此相同    </span><br>           <span class="hljs-number">208</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">211</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">214</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">217</span> BINARY_SUBSCR       <br>           <span class="hljs-number">218</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">221</span> BINARY_ADD          <br>           <span class="hljs-number">222</span> LOAD_CONST              <span class="hljs-number">33</span> (<span class="hljs-number">2020</span>)<br>           <span class="hljs-number">225</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">226</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">229</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">232</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-number">3</span>)<br>           <span class="hljs-number">235</span> BINARY_SUBSCR       <br>           <span class="hljs-number">236</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">239</span> BINARY_ADD          <br>           <span class="hljs-number">240</span> LOAD_CONST              <span class="hljs-number">33</span> (<span class="hljs-number">2020</span>)<br>           <span class="hljs-number">243</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">244</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">247</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">250</span> LOAD_CONST              <span class="hljs-number">36</span> (<span class="hljs-number">4</span>)<br>           <span class="hljs-number">253</span> BINARY_SUBSCR       <br>           <span class="hljs-number">254</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">257</span> BINARY_ADD          <br>           <span class="hljs-number">258</span> LOAD_CONST              <span class="hljs-number">37</span> (<span class="hljs-number">1182843538814603</span>)<br>           <span class="hljs-number">261</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">264</span> POP_JUMP_IF_FALSE      <span class="hljs-number">275</span><br>              <span class="hljs-comment">#第17行代码:if((((ord(str[0]) * 2020 + ord(str[1])) * 2020 + ord(str[2])) * 2020 + ord(str[3])) * 2020 + ord(str[4]) == 1182843538814603):</span><br><span class="hljs-number">18</span>         <span class="hljs-number">267</span> LOAD_CONST              <span class="hljs-number">38</span> (<span class="hljs-string">&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;</span>)<br>           <span class="hljs-number">270</span> PRINT_ITEM          <br>           <span class="hljs-number">271</span> PRINT_NEWLINE       <br>           <span class="hljs-number">272</span> JUMP_FORWARD            <span class="hljs-number">15</span> (to <span class="hljs-number">290</span>)<br><br><span class="hljs-number">20</span>     &gt;&gt;  <span class="hljs-number">275</span> LOAD_CONST              <span class="hljs-number">39</span> (<span class="hljs-string">&#x27;bye~&#x27;</span>)<br>           <span class="hljs-number">278</span> PRINT_ITEM          <br>           <span class="hljs-number">279</span> PRINT_NEWLINE       <br><br><span class="hljs-number">21</span>         <span class="hljs-number">280</span> LOAD_NAME                <span class="hljs-number">7</span> (exit)<br>           <span class="hljs-number">283</span> LOAD_CONST              <span class="hljs-number">32</span> (<span class="hljs-number">0</span>)<br>           <span class="hljs-number">286</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">289</span> POP_TOP             <br><br><span class="hljs-number">23</span>     &gt;&gt;  <span class="hljs-number">290</span> BUILD_LIST               <span class="hljs-number">0</span><br>           <span class="hljs-number">293</span> STORE_NAME               <span class="hljs-number">9</span> (x)<br>              <span class="hljs-comment">#第23行代码:x = []</span><br><span class="hljs-number">24</span>         <span class="hljs-number">296</span> LOAD_CONST              <span class="hljs-number">40</span> (<span class="hljs-number">5</span>)<br>           <span class="hljs-number">299</span> STORE_NAME              <span class="hljs-number">10</span> (k)<br><br><span class="hljs-number">25</span>         <span class="hljs-number">302</span> SETUP_LOOP             <span class="hljs-number">128</span> (to <span class="hljs-number">433</span>)<br>           <span class="hljs-number">305</span> LOAD_NAME               <span class="hljs-number">11</span> (<span class="hljs-built_in">range</span>)<br>           <span class="hljs-number">308</span> LOAD_CONST              <span class="hljs-number">41</span> (<span class="hljs-number">13</span>)<br>           <span class="hljs-number">311</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">314</span> GET_ITER            <br>       &gt;&gt;  <span class="hljs-number">315</span> FOR_ITER               <span class="hljs-number">114</span> (to <span class="hljs-number">432</span>)<br>           <span class="hljs-number">318</span> STORE_NAME              <span class="hljs-number">12</span> (i)<br>              <span class="hljs-comment">#从这里到433位置是for循环里面的内容</span><br>              <span class="hljs-comment">#第25行代码:for i in range(13):</span><br><span class="hljs-number">26</span>         <span class="hljs-number">321</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">324</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">327</span> LOAD_NAME               <span class="hljs-number">10</span> (k)<br>           <span class="hljs-number">330</span> BINARY_SUBSCR       <br>           <span class="hljs-number">331</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">334</span> STORE_NAME              <span class="hljs-number">13</span> (b)<br><br><span class="hljs-number">27</span>         <span class="hljs-number">337</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">340</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">343</span> LOAD_NAME               <span class="hljs-number">10</span> (k)<br>           <span class="hljs-number">346</span> LOAD_CONST              <span class="hljs-number">34</span> (<span class="hljs-number">1</span>)<br>           <span class="hljs-number">349</span> BINARY_ADD          <br>           <span class="hljs-number">350</span> BINARY_SUBSCR       <br>           <span class="hljs-number">351</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">354</span> STORE_NAME              <span class="hljs-number">14</span> (c)<br><br><span class="hljs-number">28</span>         <span class="hljs-number">357</span> LOAD_NAME               <span class="hljs-number">14</span> (c)<br>           <span class="hljs-number">360</span> LOAD_NAME                <span class="hljs-number">0</span> (en)<br>           <span class="hljs-number">363</span> LOAD_NAME               <span class="hljs-number">12</span> (i)<br>           <span class="hljs-number">366</span> LOAD_CONST               <span class="hljs-number">4</span> (<span class="hljs-number">6</span>)<br>           <span class="hljs-number">369</span> BINARY_MODULO       <br>           <span class="hljs-number">370</span> BINARY_SUBSCR       <br>           <span class="hljs-number">371</span> BINARY_XOR          <br>           <span class="hljs-number">372</span> STORE_NAME              <span class="hljs-number">15</span> (a11)<br>              <span class="hljs-comment">#BINARY_MODULO:进行 % 操作</span><br>              <span class="hljs-comment">#BINARY_XOR:进行 ^ 操作</span><br>              <span class="hljs-comment">#第28行代码:a11 = c ^ en[i%6]</span><br><span class="hljs-number">29</span>         <span class="hljs-number">375</span> LOAD_NAME               <span class="hljs-number">13</span> (b)<br>           <span class="hljs-number">378</span> LOAD_NAME                <span class="hljs-number">0</span> (en)<br>           <span class="hljs-number">381</span> LOAD_NAME               <span class="hljs-number">12</span> (i)<br>           <span class="hljs-number">384</span> LOAD_CONST               <span class="hljs-number">4</span> (<span class="hljs-number">6</span>)<br>           <span class="hljs-number">387</span> BINARY_MODULO       <br>           <span class="hljs-number">388</span> BINARY_SUBSCR       <br>           <span class="hljs-number">389</span> BINARY_XOR          <br>           <span class="hljs-number">390</span> STORE_NAME              <span class="hljs-number">16</span> (a22)<br><br><span class="hljs-number">30</span>         <span class="hljs-number">393</span> LOAD_NAME                <span class="hljs-number">9</span> (x)<br>           <span class="hljs-number">396</span> LOAD_ATTR               <span class="hljs-number">17</span> (append)<br>           <span class="hljs-number">399</span> LOAD_NAME               <span class="hljs-number">15</span> (a11)<br>           <span class="hljs-number">402</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">405</span> POP_TOP             <br>              <span class="hljs-comment">#第30行代码:x.append(a11)</span><br><span class="hljs-number">31</span>         <span class="hljs-number">406</span> LOAD_NAME                <span class="hljs-number">9</span> (x)<br>           <span class="hljs-number">409</span> LOAD_ATTR               <span class="hljs-number">17</span> (append)<br>           <span class="hljs-number">412</span> LOAD_NAME               <span class="hljs-number">16</span> (a22)<br>           <span class="hljs-number">415</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">418</span> POP_TOP             <br><br><span class="hljs-number">32</span>         <span class="hljs-number">419</span> LOAD_NAME               <span class="hljs-number">10</span> (k)<br>           <span class="hljs-number">422</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">425</span> INPLACE_ADD         <br>           <span class="hljs-number">426</span> STORE_NAME              <span class="hljs-number">10</span> (k)<br>           <span class="hljs-number">429</span> JUMP_ABSOLUTE          <span class="hljs-number">315</span><br>       &gt;&gt;  <span class="hljs-number">432</span> POP_BLOCK           <br>              <span class="hljs-comment">#INPLACE_ADD:就地实现加法</span><br>              <span class="hljs-comment">#第32行代码:k += 2</span><br><span class="hljs-number">33</span>     &gt;&gt;  <span class="hljs-number">433</span> LOAD_NAME                <span class="hljs-number">9</span> (x)<br>           <span class="hljs-number">436</span> LOAD_NAME                <span class="hljs-number">1</span> (output)<br>           <span class="hljs-number">439</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">442</span> POP_JUMP_IF_FALSE      <span class="hljs-number">453</span><br><br><span class="hljs-number">34</span>         <span class="hljs-number">445</span> LOAD_CONST              <span class="hljs-number">38</span> (<span class="hljs-string">&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;</span>)<br>           <span class="hljs-number">448</span> PRINT_ITEM          <br>           <span class="hljs-number">449</span> PRINT_NEWLINE       <br>           <span class="hljs-number">450</span> JUMP_FORWARD            <span class="hljs-number">15</span> (to <span class="hljs-number">468</span>)<br><br><span class="hljs-number">36</span>     &gt;&gt;  <span class="hljs-number">453</span> LOAD_CONST              <span class="hljs-number">42</span> (<span class="hljs-string">&#x27;oh,you are wrong!&#x27;</span>)<br>           <span class="hljs-number">456</span> PRINT_ITEM          <br>           <span class="hljs-number">457</span> PRINT_NEWLINE       <br><br><span class="hljs-number">37</span>         <span class="hljs-number">458</span> LOAD_NAME                <span class="hljs-number">7</span> (exit)<br>           <span class="hljs-number">461</span> LOAD_CONST              <span class="hljs-number">32</span> (<span class="hljs-number">0</span>)<br>           <span class="hljs-number">464</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">467</span> POP_TOP             <br><br><span class="hljs-number">39</span>     &gt;&gt;  <span class="hljs-number">468</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>           <span class="hljs-number">471</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">474</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">477</span> STORE_NAME              <span class="hljs-number">18</span> (l)<br><br><span class="hljs-number">40</span>         <span class="hljs-number">480</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">483</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">486</span> LOAD_NAME               <span class="hljs-number">18</span> (l)<br>           <span class="hljs-number">489</span> LOAD_CONST              <span class="hljs-number">43</span> (<span class="hljs-number">7</span>)<br>           <span class="hljs-number">492</span> BINARY_SUBTRACT     <br>           <span class="hljs-number">493</span> BINARY_SUBSCR       <br>           <span class="hljs-number">494</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">497</span> STORE_NAME              <span class="hljs-number">19</span> (a1)<br>              <span class="hljs-comment">#BINARY_SUBTRACT:进行 - 操作</span><br>              <span class="hljs-comment">#这里先进行了BINARY_SUBTRACT再进行BINARY_SUBSCR</span><br>              <span class="hljs-comment">#第40行代码:a1 = ord(str[l-7])</span><br><span class="hljs-number">41</span>         <span class="hljs-number">500</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">503</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">506</span> LOAD_NAME               <span class="hljs-number">18</span> (l)<br>           <span class="hljs-number">509</span> LOAD_CONST               <span class="hljs-number">4</span> (<span class="hljs-number">6</span>)<br>           <span class="hljs-number">512</span> BINARY_SUBTRACT     <br>           <span class="hljs-number">513</span> BINARY_SUBSCR       <br>           <span class="hljs-number">514</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">517</span> STORE_NAME              <span class="hljs-number">20</span> (a2)<br><br><span class="hljs-number">42</span>         <span class="hljs-number">520</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">523</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">526</span> LOAD_NAME               <span class="hljs-number">18</span> (l)<br>           <span class="hljs-number">529</span> LOAD_CONST              <span class="hljs-number">40</span> (<span class="hljs-number">5</span>)<br>           <span class="hljs-number">532</span> BINARY_SUBTRACT     <br>           <span class="hljs-number">533</span> BINARY_SUBSCR       <br>           <span class="hljs-number">534</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">537</span> STORE_NAME              <span class="hljs-number">21</span> (a3)<br><br><span class="hljs-number">43</span>         <span class="hljs-number">540</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">543</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">546</span> LOAD_NAME               <span class="hljs-number">18</span> (l)<br>           <span class="hljs-number">549</span> LOAD_CONST              <span class="hljs-number">36</span> (<span class="hljs-number">4</span>)<br>           <span class="hljs-number">552</span> BINARY_SUBTRACT     <br>           <span class="hljs-number">553</span> BINARY_SUBSCR       <br>           <span class="hljs-number">554</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">557</span> STORE_NAME              <span class="hljs-number">22</span> (a4)<br><br><span class="hljs-number">44</span>         <span class="hljs-number">560</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">563</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">566</span> LOAD_NAME               <span class="hljs-number">18</span> (l)<br>           <span class="hljs-number">569</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-number">3</span>)<br>           <span class="hljs-number">572</span> BINARY_SUBTRACT     <br>           <span class="hljs-number">573</span> BINARY_SUBSCR       <br>           <span class="hljs-number">574</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">577</span> STORE_NAME              <span class="hljs-number">23</span> (a5)<br><br><span class="hljs-number">45</span>         <span class="hljs-number">580</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">583</span> LOAD_NAME                <span class="hljs-number">4</span> (<span class="hljs-built_in">str</span>)<br>           <span class="hljs-number">586</span> LOAD_NAME               <span class="hljs-number">18</span> (l)<br>           <span class="hljs-number">589</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">592</span> BINARY_SUBTRACT     <br>           <span class="hljs-number">593</span> BINARY_SUBSCR       <br>           <span class="hljs-number">594</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">597</span> STORE_NAME              <span class="hljs-number">24</span> (a6)<br><br><span class="hljs-number">46</span>         <span class="hljs-number">600</span> LOAD_NAME               <span class="hljs-number">19</span> (a1)<br>           <span class="hljs-number">603</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-number">3</span>)<br>           <span class="hljs-number">606</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">607</span> LOAD_NAME               <span class="hljs-number">20</span> (a2)<br>           <span class="hljs-number">610</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">613</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">614</span> BINARY_ADD          <br>           <span class="hljs-number">615</span> LOAD_NAME               <span class="hljs-number">21</span> (a3)<br>           <span class="hljs-number">618</span> LOAD_CONST              <span class="hljs-number">40</span> (<span class="hljs-number">5</span>)<br>           <span class="hljs-number">621</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">622</span> BINARY_ADD          <br>           <span class="hljs-number">623</span> LOAD_CONST              <span class="hljs-number">44</span> (<span class="hljs-number">1003</span>)<br>           <span class="hljs-number">626</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">629</span> POP_JUMP_IF_FALSE      <span class="hljs-number">807</span><br>              <span class="hljs-comment">#if语句 里面算法逻辑写出来如下</span><br>              <span class="hljs-comment">#第46行代码:if(a1 * 3 + a2 * 2 + a3 * 5) == 1003:</span><br><span class="hljs-number">47</span>         <span class="hljs-number">632</span> LOAD_NAME               <span class="hljs-number">19</span> (a1)<br>           <span class="hljs-number">635</span> LOAD_CONST              <span class="hljs-number">36</span> (<span class="hljs-number">4</span>)<br>           <span class="hljs-number">638</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">639</span> LOAD_NAME               <span class="hljs-number">20</span> (a2)<br>           <span class="hljs-number">642</span> LOAD_CONST              <span class="hljs-number">43</span> (<span class="hljs-number">7</span>)<br>           <span class="hljs-number">645</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">646</span> BINARY_ADD          <br>           <span class="hljs-number">647</span> LOAD_NAME               <span class="hljs-number">21</span> (a3)<br>           <span class="hljs-number">650</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">9</span>)<br>           <span class="hljs-number">653</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">654</span> BINARY_ADD          <br>           <span class="hljs-number">655</span> LOAD_CONST              <span class="hljs-number">45</span> (<span class="hljs-number">2013</span>)<br>           <span class="hljs-number">658</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">661</span> POP_JUMP_IF_FALSE      <span class="hljs-number">807</span><br><br><span class="hljs-number">48</span>         <span class="hljs-number">664</span> LOAD_NAME               <span class="hljs-number">19</span> (a1)<br>           <span class="hljs-number">667</span> LOAD_NAME               <span class="hljs-number">20</span> (a2)<br>           <span class="hljs-number">670</span> LOAD_CONST              <span class="hljs-number">46</span> (<span class="hljs-number">8</span>)<br>           <span class="hljs-number">673</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">674</span> BINARY_ADD          <br>           <span class="hljs-number">675</span> LOAD_NAME               <span class="hljs-number">21</span> (a3)<br>           <span class="hljs-number">678</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">681</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">682</span> BINARY_ADD          <br>           <span class="hljs-number">683</span> LOAD_CONST              <span class="hljs-number">47</span> (<span class="hljs-number">1109</span>)<br>           <span class="hljs-number">686</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">689</span> POP_JUMP_IF_FALSE      <span class="hljs-number">804</span><br><br><span class="hljs-number">49</span>         <span class="hljs-number">692</span> LOAD_NAME               <span class="hljs-number">22</span> (a4)<br>           <span class="hljs-number">695</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-number">3</span>)<br>           <span class="hljs-number">698</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">699</span> LOAD_NAME               <span class="hljs-number">23</span> (a5)<br>           <span class="hljs-number">702</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">705</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">706</span> BINARY_ADD          <br>           <span class="hljs-number">707</span> LOAD_NAME               <span class="hljs-number">24</span> (a6)<br>           <span class="hljs-number">710</span> LOAD_CONST              <span class="hljs-number">40</span> (<span class="hljs-number">5</span>)<br>           <span class="hljs-number">713</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">714</span> BINARY_ADD          <br>           <span class="hljs-number">715</span> LOAD_CONST              <span class="hljs-number">48</span> (<span class="hljs-number">671</span>)<br>           <span class="hljs-number">718</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">721</span> POP_JUMP_IF_FALSE      <span class="hljs-number">801</span><br><br><span class="hljs-number">50</span>         <span class="hljs-number">724</span> LOAD_NAME               <span class="hljs-number">22</span> (a4)<br>           <span class="hljs-number">727</span> LOAD_CONST              <span class="hljs-number">36</span> (<span class="hljs-number">4</span>)<br>           <span class="hljs-number">730</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">731</span> LOAD_NAME               <span class="hljs-number">23</span> (a5)<br>           <span class="hljs-number">734</span> LOAD_CONST              <span class="hljs-number">43</span> (<span class="hljs-number">7</span>)<br>           <span class="hljs-number">737</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">738</span> BINARY_ADD          <br>           <span class="hljs-number">739</span> LOAD_NAME               <span class="hljs-number">24</span> (a6)<br>           <span class="hljs-number">742</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">9</span>)<br>           <span class="hljs-number">745</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">746</span> BINARY_ADD          <br>           <span class="hljs-number">747</span> LOAD_CONST              <span class="hljs-number">49</span> (<span class="hljs-number">1252</span>)<br>           <span class="hljs-number">750</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">753</span> POP_JUMP_IF_FALSE      <span class="hljs-number">798</span><br><br><span class="hljs-number">51</span>         <span class="hljs-number">756</span> LOAD_NAME               <span class="hljs-number">22</span> (a4)<br>           <span class="hljs-number">759</span> LOAD_NAME               <span class="hljs-number">23</span> (a5)<br>           <span class="hljs-number">762</span> LOAD_CONST              <span class="hljs-number">46</span> (<span class="hljs-number">8</span>)<br>           <span class="hljs-number">765</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">766</span> BINARY_ADD          <br>           <span class="hljs-number">767</span> LOAD_NAME               <span class="hljs-number">24</span> (a6)<br>           <span class="hljs-number">770</span> LOAD_CONST              <span class="hljs-number">35</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">773</span> BINARY_MULTIPLY     <br>           <span class="hljs-number">774</span> BINARY_ADD          <br>           <span class="hljs-number">775</span> LOAD_CONST              <span class="hljs-number">50</span> (<span class="hljs-number">644</span>)<br>           <span class="hljs-number">778</span> COMPARE_OP               <span class="hljs-number">2</span> (==)<br>           <span class="hljs-number">781</span> POP_JUMP_IF_FALSE      <span class="hljs-number">795</span><br><br><span class="hljs-number">52</span>         <span class="hljs-number">784</span> LOAD_CONST              <span class="hljs-number">51</span> (<span class="hljs-string">&#x27;congraduation!you get the right flag!&#x27;</span>)<br>           <span class="hljs-number">787</span> PRINT_ITEM          <br>           <span class="hljs-number">788</span> PRINT_NEWLINE       <br>           <span class="hljs-number">789</span> JUMP_ABSOLUTE          <span class="hljs-number">795</span><br>           <span class="hljs-number">792</span> JUMP_ABSOLUTE          <span class="hljs-number">798</span><br>       &gt;&gt;  <span class="hljs-number">795</span> JUMP_ABSOLUTE          <span class="hljs-number">801</span><br>       &gt;&gt;  <span class="hljs-number">798</span> JUMP_ABSOLUTE          <span class="hljs-number">804</span><br>       &gt;&gt;  <span class="hljs-number">801</span> JUMP_ABSOLUTE          <span class="hljs-number">807</span><br>       &gt;&gt;  <span class="hljs-number">804</span> JUMP_FORWARD             <span class="hljs-number">0</span> (to <span class="hljs-number">807</span>)<br>       &gt;&gt;  <span class="hljs-number">807</span> LOAD_CONST              <span class="hljs-number">52</span> (<span class="hljs-literal">None</span>)<br>           <span class="hljs-number">810</span> RETURN_VALUE <br></code></pre></td></tr></table></figure><p>之后自己把python源码写出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Python">en = [<span class="hljs-number">3</span>,<span class="hljs-number">37</span>,<span class="hljs-number">72</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">132</span>]<br>output = [<span class="hljs-number">101</span>,<span class="hljs-number">96</span>,<span class="hljs-number">23</span>,<span class="hljs-number">68</span>,<span class="hljs-number">112</span>,<span class="hljs-number">42</span>,<span class="hljs-number">107</span>,<span class="hljs-number">62</span>,<span class="hljs-number">96</span>,<span class="hljs-number">53</span>,<span class="hljs-number">176</span>,<span class="hljs-number">179</span>,<span class="hljs-number">98</span>,<span class="hljs-number">53</span>,<span class="hljs-number">67</span>,<span class="hljs-number">29</span>,<span class="hljs-number">41</span>,<span class="hljs-number">120</span>,<span class="hljs-number">60</span>,<span class="hljs-number">106</span>,<span class="hljs-number">51</span>,<span class="hljs-number">101</span>,<span class="hljs-number">178</span>,<span class="hljs-number">189</span>,<span class="hljs-number">101</span>,<span class="hljs-number">48</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;welcome to GWHT2020&#x27;</span>)<br><br>flag = raw_input(<span class="hljs-string">&#x27;please input your flag:&#x27;</span>)<br><span class="hljs-built_in">str</span> = flag<br><br>a = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-keyword">if</span>(a &lt; <span class="hljs-number">38</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lenth wrong!&#x27;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">if</span>((((<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]) * <span class="hljs-number">2020</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>])) * <span class="hljs-number">2020</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>])) * <span class="hljs-number">2020</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">3</span>])) * <span class="hljs-number">2020</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">4</span>]) == <span class="hljs-number">1182843538814603</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;</span>)<br><br><span class="hljs-keyword">else</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;bye~&#x27;</span>)<br>    exit(<span class="hljs-number">0</span>)<br>x = []<br>k = <span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    b = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[k])<br>    c = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[k+<span class="hljs-number">1</span>])<br>    a11 = c ^ en[i%<span class="hljs-number">6</span>]<br>    a22 = b ^ en[i%<span class="hljs-number">6</span>]<br>    x.append(a11)<br>    x.append(a22)<br>    k += <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span>(output == x):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;oh,you are wrong!&#x27;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br>l = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)<br>a1 = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[l-<span class="hljs-number">7</span>])<br>a2 = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[l-<span class="hljs-number">6</span>])<br>a3 = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[l-<span class="hljs-number">5</span>])<br>a4 = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[l-<span class="hljs-number">4</span>])<br>a5 = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[l-<span class="hljs-number">3</span>])<br>a6 = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[l-<span class="hljs-number">2</span>])<br><span class="hljs-keyword">if</span>(a1 * <span class="hljs-number">3</span> + a2 * <span class="hljs-number">2</span> + a3 * <span class="hljs-number">5</span>) == <span class="hljs-number">1003</span>:<br>    <span class="hljs-keyword">if</span>(a1 * <span class="hljs-number">4</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">9</span>) == <span class="hljs-number">2013</span>:<br>        <span class="hljs-keyword">if</span>(a1 + a2 *<span class="hljs-number">8</span> + a3 *<span class="hljs-number">2</span>) == <span class="hljs-number">1109</span>:<br>            <span class="hljs-keyword">if</span>(a4 * <span class="hljs-number">3</span> + a5 * <span class="hljs-number">2</span> + a6 * <span class="hljs-number">5</span>) == <span class="hljs-number">671</span>:<br>                <span class="hljs-keyword">if</span>(a4 * <span class="hljs-number">4</span> + a5 * <span class="hljs-number">7</span> + a6 * <span class="hljs-number">9</span>) == <span class="hljs-number">1252</span>:<br>                    <span class="hljs-keyword">if</span>(a4 + a5 * <span class="hljs-number">8</span> + a6 * <span class="hljs-number">2</span>) == <span class="hljs-number">644</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;congraduation!you get the right flag!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如何边写边检验：</p><p>python的dis库</p><p>使用方法：</p><blockquote><p><strong>python3 -m dis xxxxxxx.py</strong></p></blockquote><p><img src="/img/-1638415337057123.png" alt="img"></p><p><img src="/img/-1638415337057125.png" alt="img"></p><p>这个题还没完 只是把源码解出 还没有解出flag</p><p>看到有多项式 直接z3一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>s = Solver()<br><br>a1 = Int(<span class="hljs-string">&#x27;a1&#x27;</span>)<br>a2 = Int(<span class="hljs-string">&#x27;a2&#x27;</span>)<br>a3 = Int(<span class="hljs-string">&#x27;a3&#x27;</span>)<br>a4 = Int(<span class="hljs-string">&#x27;a4&#x27;</span>)<br>a5 = Int(<span class="hljs-string">&#x27;a5&#x27;</span>)<br>a6 = Int(<span class="hljs-string">&#x27;a6&#x27;</span>)<br><br>s.add(a1 * <span class="hljs-number">3</span> + a2 * <span class="hljs-number">2</span> + a3 * <span class="hljs-number">5</span> == <span class="hljs-number">1003</span>)<br>s.add(a1 * <span class="hljs-number">4</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">9</span> == <span class="hljs-number">2013</span>)<br>s.add(a1 + a2 *<span class="hljs-number">8</span> + a3 *<span class="hljs-number">2</span> == <span class="hljs-number">1109</span>)<br>s.add(a4 * <span class="hljs-number">3</span> + a5 * <span class="hljs-number">2</span> + a6 * <span class="hljs-number">5</span> == <span class="hljs-number">671</span>)<br>s.add(a4 * <span class="hljs-number">4</span> + a5 * <span class="hljs-number">7</span> + a6 * <span class="hljs-number">9</span> == <span class="hljs-number">1252</span>)<br>s.add(a4 + a5 * <span class="hljs-number">8</span> + a6 * <span class="hljs-number">2</span> == <span class="hljs-number">644</span>)<br><br><span class="hljs-keyword">if</span> s.check() == sat:    <span class="hljs-comment">#z3标配语句 若有结果则赋值给result</span><br>    result = s.model()<br><br><span class="hljs-comment">#print(result)</span><br><span class="hljs-comment">#[a5 = 55, a2 = 101, a6 = 51, a3 = 102, a4 = 102, a1 = 97]</span><br><br>en = [<span class="hljs-number">3</span>,<span class="hljs-number">37</span>,<span class="hljs-number">72</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">132</span>]<br>output = [<span class="hljs-number">101</span>,<span class="hljs-number">96</span>,<span class="hljs-number">23</span>,<span class="hljs-number">68</span>,<span class="hljs-number">112</span>,<span class="hljs-number">42</span>,<span class="hljs-number">107</span>,<span class="hljs-number">62</span>,<span class="hljs-number">96</span>,<span class="hljs-number">53</span>,<span class="hljs-number">176</span>,<span class="hljs-number">179</span>,<span class="hljs-number">98</span>,<span class="hljs-number">53</span>,<span class="hljs-number">67</span>,<span class="hljs-number">29</span>,<span class="hljs-number">41</span>,<span class="hljs-number">120</span>,<span class="hljs-number">60</span>,<span class="hljs-number">106</span>,<span class="hljs-number">51</span>,<span class="hljs-number">101</span>,<span class="hljs-number">178</span>,<span class="hljs-number">189</span>,<span class="hljs-number">101</span>,<span class="hljs-number">48</span>]<br>k = <span class="hljs-number">0</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    flag += <span class="hljs-built_in">chr</span>(output[k+<span class="hljs-number">1</span>] ^ en[i%<span class="hljs-number">6</span>])<br>    flag += <span class="hljs-built_in">chr</span>(output[k] ^ en[i%<span class="hljs-number">6</span>])<br>    k += <span class="hljs-number">2</span><br><br><span class="hljs-built_in">print</span>(flag + <span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>) + <span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>) + <span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>) + <span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>) + <span class="hljs-built_in">chr</span>(<span class="hljs-number">55</span>) + <span class="hljs-built_in">chr</span>(<span class="hljs-number">51</span>))<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{cfa2b87b3f746a8f0ac5c5963faeff73}</strong></p></blockquote><hr><h1 id="NPUCTF2020-BasicASM"><a href="#NPUCTF2020-BasicASM" class="headerlink" title="[NPUCTF2020]BasicASM"></a>[NPUCTF2020]BasicASM</h1><p>安利</p><p><strong>[【逆向漫谈】关于汇编 | <a href="https://www.bilibili.com/video/BV1SK4y1L77w">NPUCTF2020]BasicASM_哔哩哔哩_bilibili</a></strong></p><p>这个题给了两个文件</p><p><img src="/img/-1638415381440127.png" alt="img"></p><p>一个是.s文件 内容如下 x86的汇编语言</p><p>另一个是运行后的输出结果</p><blockquote><p><strong>0x66,0x2e,0x61,0x25,0x7b,0x26,0x30,0x1d,0x79,0x72,0x75,0x1d,0x6b,0x2c,0x6f,0x35,0x5f,0x3a,0x38,0x74,0x2d,0x74,0x34,0x1d,0x61,0x77,0x6d,0x7d,0x7d</strong></p></blockquote><p>我尽量多写(抄)几行注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs assembly">00007FF7A8AC5A50  push        rbp  <br>00007FF7A8AC5A52  push        rdi  <br>00007FF7A8AC5A53  sub         rsp,238h  <br>00007FF7A8AC5A5A  lea         rbp,[rsp+20h]  <br>00007FF7A8AC5A5F  mov         rdi,rsp  <br>00007FF7A8AC5A62  mov         ecx,8Eh  <br>00007FF7A8AC5A67  mov         eax,0CCCCCCCCh  <br>00007FF7A8AC5A6C  rep stos    dword ptr [rdi]  <br>00007FF7A8AC5A6E  mov         rax,qword ptr [__security_cookie (07FF7A8AD3018h)]  <br>00007FF7A8AC5A75  xor         rax,rbp  <br>00007FF7A8AC5A78  mov         qword ptr [rbp+208h],rax  <br>00007FF7A8AC5A7F  lea         rcx,[__06A15900_ConsoleApplication@cpp (07FF7A8AD902Ah)]  <br>00007FF7A8AC5A86  call        __CheckForDebuggerJustMyCode (07FF7A8AC1122h)<br>                             #反调试  <br>00007FF7A8AC5A8B  lea         rdx,[string &quot;flag&#123;this_is_a_fake_flag&#125;&quot; (07FF7A8ACF450h)]<br>                             #取假flag地址  <br>00007FF7A8AC5A92  lea         rcx,[flag] <br>                             #flag地址 <br>00007FF7A8AC5A96  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; (07FF7A8AC15E1h)  <br>00007FF7A8AC5A9B  nop  <br>00007FF7A8AC5A9C  mov         dword ptr [p],0  <br>00007FF7A8AC5AA3  mov         dword ptr [rbp+64h],0  <br>00007FF7A8AC5AAA  jmp         main+64h (07FF7A8AC5AB4h)<br>                             #main函数开始位置 跳转  <br>00007FF7A8AC5AAC  mov         eax,dword ptr [rbp+64h]  <br>00007FF7A8AC5AAF  inc         eax  <br>00007FF7A8AC5AB1  mov         dword ptr [rbp+64h],eax  <br>00007FF7A8AC5AB4  movsxd      rax,dword ptr [rbp+64h]<br>                             #main函数跳转到这里 取dword<br>00007FF7A8AC5AB8  mov         qword ptr [rbp+1F8h],rax  <br>00007FF7A8AC5ABF  lea         rcx,[flag]<br>                             #取flag地址  <br>00007FF7A8AC5AC3  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::length (07FF7A8AC122Bh)<br>                             #求flag长度<br>00007FF7A8AC5AC8  mov         rcx,qword ptr [rbp+1F8h]<br>                             #rcx = qword[rbp+1F8h]  <br>00007FF7A8AC5ACF  cmp         rcx,rax<br>                             #比较长度  <br>00007FF7A8AC5AD2  jae         main+1B2h (07FF7A8AC5C02h)<br>                             #可以看作不等于跳转到false  <br>00007FF7A8AC5AD8  mov         eax,dword ptr [rbp+64h]  <br>00007FF7A8AC5ADB  and         eax,1  <br>00007FF7A8AC5ADE  cmp         eax,1<br>                             #cmp判断是奇数位还是偶数位<br>                             #取奇数位  <br>00007FF7A8AC5AE1  jne         main+126h (07FF7A8AC5B76h)<br>                             #非奇数位跳转  <br>00007FF7A8AC5AE7  movsxd      rax,dword ptr [rbp+64h]  <br>00007FF7A8AC5AEB  mov         rdx,rax  <br>00007FF7A8AC5AEE  lea         rcx,[flag]  <br>00007FF7A8AC5AF2  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::operator[] (07FF7A8AC1442h)<br>                             #构建一个以rcx为起始 以rax为偏移的数组<br>00007FF7A8AC5AF7  movsx       eax,byte ptr [rax]  <br>00007FF7A8AC5AFA  xor         eax,42h<br>                             #全篇看下来只有这里一处运算<br>00007FF7A8AC5AFD  mov         dword ptr [p],eax<br>                             #异或后的字符放进p  <br>00007FF7A8AC5B00  mov         dl,30h  <br>00007FF7A8AC5B02  lea         rcx,[rbp+144h]  <br>00007FF7A8AC5B09  call        std::setfill&lt;char&gt; (07FF7A8AC1046h)<br>                             #输出  <br>00007FF7A8AC5B0E  mov         qword ptr [rbp+1F8h],rax  <br>00007FF7A8AC5B15  mov         edx,2  <br>00007FF7A8AC5B1A  lea         rcx,[rbp+168h]  <br>00007FF7A8AC5B21  call        std::setw (07FF7A8AC10D2h)  <br>00007FF7A8AC5B26  mov         qword ptr [rbp+200h],rax  <br>00007FF7A8AC5B2D  lea         rdx,[std::hex (07FF7A8AC1488h)]<br>                             #输出16进制  <br>00007FF7A8AC5B34  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  <br>00007FF7A8AC5B3B  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7160h)]  <br>00007FF7A8AC5B41  mov         rcx,qword ptr [rbp+200h]  <br>00007FF7A8AC5B48  mov         rdx,rcx  <br>00007FF7A8AC5B4B  mov         rcx,rax  <br>00007FF7A8AC5B4E  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,__int64&gt; (07FF7A8AC12F8h)<br>                             #输出<br>00007FF7A8AC5B53  mov         rcx,qword ptr [rbp+1F8h]  <br>00007FF7A8AC5B5A  mov         rdx,rcx  <br>00007FF7A8AC5B5D  mov         rcx,rax  <br>00007FF7A8AC5B60  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,char&gt; (07FF7A8AC11A4h)  <br>00007FF7A8AC5B65  mov         edx,dword ptr [p]  <br>00007FF7A8AC5B68  mov         rcx,rax  <br>00007FF7A8AC5B6B  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7158h)]  <br>00007FF7A8AC5B71  jmp         main+1ADh (07FF7A8AC5BFDh)  <br>00007FF7A8AC5B76  movsxd      rax,dword ptr [rbp+64h]<br>                             #偶数位没有变化  <br>00007FF7A8AC5B7A  mov         rdx,rax  <br>00007FF7A8AC5B7D  lea         rcx,[flag]  <br>00007FF7A8AC5B81  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::operator[] (07FF7A8AC1442h)  <br>00007FF7A8AC5B86  movsx       eax,byte ptr [rax]  <br>00007FF7A8AC5B89  mov         dword ptr [p],eax  <br>00007FF7A8AC5B8C  mov         dl,30h  <br>00007FF7A8AC5B8E  lea         rcx,[rbp+194h]  <br>00007FF7A8AC5B95  call        std::setfill&lt;char&gt; (07FF7A8AC1046h)  <br>00007FF7A8AC5B9A  mov         qword ptr [rbp+1F8h],rax  <br>00007FF7A8AC5BA1  mov         edx,2  <br>00007FF7A8AC5BA6  lea         rcx,[rbp+1B8h]  <br>00007FF7A8AC5BAD  call        std::setw (07FF7A8AC10D2h)  <br>00007FF7A8AC5BB2  mov         qword ptr [rbp+200h],rax  <br>00007FF7A8AC5BB9  lea         rdx,[std::hex (07FF7A8AC1488h)]  <br>00007FF7A8AC5BC0  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  <br>00007FF7A8AC5BC7  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7160h)]  <br>00007FF7A8AC5BCD  mov         rcx,qword ptr [rbp+200h]  <br>00007FF7A8AC5BD4  mov         rdx,rcx  <br>00007FF7A8AC5BD7  mov         rcx,rax  <br>00007FF7A8AC5BDA  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,__int64&gt; (07FF7A8AC12F8h)  <br>00007FF7A8AC5BDF  mov         rcx,qword ptr [rbp+1F8h]  <br>00007FF7A8AC5BE6  mov         rdx,rcx  <br>00007FF7A8AC5BE9  mov         rcx,rax  <br>00007FF7A8AC5BEC  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,char&gt; (07FF7A8AC11A4h)  <br>00007FF7A8AC5BF1  mov         edx,dword ptr [p]  <br>00007FF7A8AC5BF4  mov         rcx,rax  <br>00007FF7A8AC5BF7  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7158h)]  <br>00007FF7A8AC5BFD  jmp         main+5Ch (07FF7A8AC5AACh)  <br>00007FF7A8AC5C02  mov         dword ptr [rbp+1E4h],0  <br>00007FF7A8AC5C0C  lea         rcx,[flag]  <br>00007FF7A8AC5C10  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; (07FF7A8AC1302h)  <br>00007FF7A8AC5C15  mov         eax,dword ptr [rbp+1E4h]  <br>00007FF7A8AC5C1B  mov         edi,eax  <br>00007FF7A8AC5C1D  lea         rcx,[rbp-20h]  <br>00007FF7A8AC5C21  lea         rdx,[__xt_z+540h (07FF7A8ACEFE0h)]  <br>00007FF7A8AC5C28  call        _RTC_CheckStackVars (07FF7A8AC1596h)  <br>00007FF7A8AC5C2D  mov         eax,edi  <br>00007FF7A8AC5C2F  mov         rcx,qword ptr [rbp+208h]  <br>00007FF7A8AC5C36  xor         rcx,rbp  <br>00007FF7A8AC5C39  call        __security_check_cookie (07FF7A8AC1190h)  <br>00007FF7A8AC5C3E  lea         rsp,[rbp+218h]  <br>00007FF7A8AC5C45  pop         rdi  <br>00007FF7A8AC5C46  pop         rbp  <br>00007FF7A8AC5C47  ret  <br></code></pre></td></tr></table></figure><p>所以加密方法很简单</p><p>奇数位异或0x42 偶数位直接输出</p><p>另一种：</p><p>根据上面看到只有一处进行异或的运算</p><p>所以exp可以这么来写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">res = [<span class="hljs-number">0x66</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x2c</span>,<br>       <span class="hljs-number">0x6f</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x7d</span>]<br><br><span class="hljs-comment">#for i in range(len(res)):</span><br>    <span class="hljs-comment">#print(chr(res[i]), end=&#x27;&#x27;)</span><br>    <br>    <span class="hljs-comment">#输出结果 f.a%&#123;&amp;0yruk,o5_:8t-t4awm&#125;&#125;</span><br>    <span class="hljs-comment">#从前5位来看 一般答案为flag&#123; result.txt中给出的结果为f.a%&#123;</span><br>    <span class="hljs-comment">#所以有可能只有奇数位发生了异或</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(res),<span class="hljs-number">2</span>):<br>    res[i] ^= <span class="hljs-number">0x42</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(res)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(res[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{d0_y0u_know_x86-64_a5m?}</strong></p></blockquote><hr><h1 id="De1CTF2019-Re-Sign"><a href="#De1CTF2019-Re-Sign" class="headerlink" title="[De1CTF2019]Re_Sign"></a>[De1CTF2019]Re_Sign</h1><h2 id="脱壳："><a href="#脱壳：" class="headerlink" title="脱壳："></a>脱壳：</h2><p>查壳发现有upx壳</p><p>试了一下upx -d re_sign.exe 发现报错</p><p><img src="/img/-1638415465523129.png" alt="img"></p><p>正好自己也没有手动脱过upx壳 试一下</p><p>upx壳一般适用ESP脱壳大法</p><p><strong><a href="https://ctf-wiki.org/reverse/windows/unpack/esp/">ESP 定律法 - CTF Wiki (ctf-wiki.org)</a></strong></p><p>od32打开 发现程序没有自动断在pushad上下</p><p>(关于 pushad 和 popad 的详细解释可以点上面的wiki链接)</p><p><img src="/img/-1638415465523131.png" alt="img"></p><p>F9运行一下 找到了pushad</p><p><img src="/img/-1638415465523133.png" alt="img"></p><p>F8步过 留意ESP的值 发现变红</p><p><img src="/img/-1638415465523135.png" alt="img"></p><p><img src="/img/-1638415465523137.png" alt="img"></p><p>在ESP上设置硬件断点</p><p><img src="/img/-1638415465523139.png" alt="img"></p><p>F9跳到硬件断点位置 发现popad</p><p><img src="/img/-1638415465523141.png" alt="img"></p><p>断点下面有两个跳转 一个短的跳转和一个长的跳转</p><p>而我们所需要找的程序入口一般为 长跳转所指地址</p><p><img src="/img/-1638415465523143.png" alt="img"></p><p><img src="/img/-1638415465523145.png" alt="img"></p><p>所以程序的真正入口点在0x405012处</p><p>将程序dump出来 修改入口点</p><p><img src="/img/-1638415465523147.png" alt="img"></p><p>如果：</p><p>之后程序打不开 这时候要再修复程序的输入表</p><p>工具 ImportREC</p><p>打开进程 修改OEP</p><p>此时修改OEP所填是偏移地址</p><p><img src="/img/-1638415465523149.png" alt="img"></p><p>之后点击IAT自动搜索 获取导入表 然后查找无效dll</p><p><img src="/img/-1638415465523151.png" alt="img"></p><p>找到无效dll 右键剪切</p><p><img src="/img/-1638415465524153.png" alt="img"></p><p>之后修正转储 选择之前dump出来的文件</p><p>生成新的dump_.exe 文件 这就是我们所需要的了</p><p><img src="/img/-1638415465524155.png" alt="img"></p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>下面开始分析脱壳后的程序：</p><p>ida打开 查找字符串 交叉引用找到加密部分：</p><p>图中部分代码依据个人习惯改了函数名</p><p><img src="/img/-1638415465524157.png" alt="img"></p><p>无奈只好动调 一步一步来 对比着ida反编译代码和汇编地址 用od一步步动调</p><p>od打开原exe文件 因为dump出来的和修复完之后的不能进行动调</p><p>od之前已经找到了esp</p><p>所以这里f9运行到 popad 后面的 cmp 指令</p><p><img src="/img/-1638415465524159.png" alt="img"></p><p>然后跳转到esp 也就是0x405012地址处</p><p>ida中起始地址为0x401000 所以在od中找到相同位置 f4运行到此处</p><p><img src="/img/-1638415465524161.png" alt="img"></p><p><img src="/img/-1638415465524163.png" alt="img"></p><p>首先来看第一个函数 od f8单步步过</p><p><img src="/img/-1638415465524165.png" alt="img"></p><p><img src="/img/-1638415465524167.png" alt="img"></p><p>运行到此处程序暂停 也就是说 sub_402BA0 也就是改名后 inputt 函数是一个检测输入的函数</p><p>我们随意输入一串字符 这里我输入</p><blockquote><p><strong>123456789abcedfg</strong></p></blockquote><p>接着我们运行到那个换表base64函数 即 sub_401233</p><p>(字符串查找时发现了base64原表 ctrl+x 交叉引用找到了改名后为 nonbase64 的函数)</p><p><img src="/img/-1638415465524169.png" alt="img"></p><p>运行过此函数之后发现我们的输入变成了</p><blockquote><p><strong>EP8hR3AlRhVcGD9MHDIeHd==</strong></p></blockquote><p>如果是正常的base64加密 那我们输入的字符串会变成</p><blockquote><p><strong>MTIzNDU2Nzg5YWJjZWRmZw==</strong></p></blockquote><p>所以可以确定里面是换表的base64加密</p><p>接下来就还有两大步</p><p>1.找base64换表之后的表</p><p>2.找check时候的判断是否相等的字符串</p><p>所以我们od重新载入 按照之前的方法来到 sub_401233函数 f7 步进</p><p>运行到大概这个位置前后 找到 ptr ss:[ebp-44]</p><p>(我也不会找位置)</p><p><img src="/img/-1638415465524171.png" alt="img"></p><p>找到变换后的表</p><p><img src="/img/-1638415465524173.png" alt="img"></p><blockquote><p><strong>0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm+/</strong> </p></blockquote><p>之后进行第二步</p><p>老方法 在ida中找到改名后为 check 的函数 找到起始地址和终止地址</p><p>od重新载入</p><p><img src="/img/-1638415465524175.png" alt="img"></p><p><img src="/img/-1638415465524177.png" alt="img"></p><p>找到 0x401F0A 位置 f7步入函数</p><p>(猜测：check大多会在函数结束时候发生 也就是在终止地址前面不是很远)</p><p>其中这里面需要注意</p><p>我们运行到这里的时候 0x401FFC 是一个大跳转 如果直接运行下去 程序会自动退出</p><p><img src="/img/-1638415465524179.png" alt="img"></p><p>所以我们在它下面的位置设置新的运行点</p><p>一路f8 并且注意 cmp 指令 查看它的上一条 pop eax/ebx 或者是 push eax/ebx</p><p><img src="/img/-1638415465524181.png" alt="img"></p><p><img src="/img/-1638415465524183.png" alt="img"></p><p><img src="/img/-1638415465524185.png" alt="img"></p><p>上面就是我们需要进行对比的数据</p><blockquote><p><strong>0x08,0x3b,0x01,0x20,0x07,0x34,0x09,0x1f,0x18,0x24,0x13,0x03,0x10,0x38,0x09,0x1b,0x08,0x34,0x13,0x02,0x08,0x22,0x12,0x03,0x05,0x06,0x12,0x03,0x0f,0x22,0x12,0x17,0x08,0x01,0x29,0x22,0x06,0x24,0x32,0x24,0x0f,0x1f,0x2b,0x24,0x03,0x15,0x41,0x41</strong></p></blockquote><p>上面的数据最大是0x41 也就是65 最小是1 </p><p>所以这里可以猜一下 动调出来的数据可能是对base64的原始表的排序</p><p>排序完的字符串再进行换表base64解密</p><p>先写exp试一下 （两个exp可以融合成一个的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">unk = [<span class="hljs-number">0x08</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x03</span>,<br>       <span class="hljs-number">0x10</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x03</span>,<br>       <span class="hljs-number">0x05</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x22</span>,<br>       <span class="hljs-number">0x06</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x41</span>]    <span class="hljs-comment">#这个是顺序表</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>base = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unk: <br>    flag += base[i-<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><blockquote><p><strong>输出：H6AfGzIeXjSCP3IaHzSBHhRCEFRCOhRWHAohFjxjOeqjCU==</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment">#base64初始加密表</span><br><br>model = <span class="hljs-string">&quot;0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm+/&quot;</span>  <span class="hljs-comment">#魔改之后的表</span><br><br>flag = <span class="hljs-string">&quot;H6AfGzIeXjSCP3IaHzSBHhRCEFRCOhRWHAohFjxjOeqjCU==&quot;</span>  <span class="hljs-comment">#密文 要解密的字符串</span><br><br><span class="hljs-built_in">print</span>(base64.b64decode(flag.translate(<span class="hljs-built_in">str</span>.maketrans(model,table))))  <span class="hljs-comment">#maketrans作用 将model中要替换的字符转换为table对应的字符（同一位置）</span><br></code></pre></td></tr></table></figure><p>输出结果正是flag </p><p>猜想成立</p><hr><blockquote><p><strong>flag{E_L4nguag3_1s_K3KeK3_N4Ji4}</strong></p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
