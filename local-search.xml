<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安洵杯</title>
    <link href="/reverse/%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    <url>/reverse/%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<p>test</p><p><a href="http://www.zz1syyd.com/">www.zz1syyd.com</a></p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋杯秋赛</title>
    <link href="/reverse/%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%A7%8B%E8%B5%9B/"/>
    <url>/reverse/%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%A7%8B%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-27</center>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑</title>
    <link href="/reverse/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <url>/reverse/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-20</center><h1 id="ROR"><a href="#ROR" class="headerlink" title="ROR"></a>ROR</h1><p>题目流程比较简单</p><p>把已知的东西都给了</p><p>然后自己想着爆破 爆破好久没有结果出来</p><p>看了其他师傅的wp之后发现是 z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>s = Solver()<br><br>flags = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    flags.append(BitVec(<span class="hljs-string">f&#x27;flag<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,<span class="hljs-number">8</span>))    <span class="hljs-comment">#https://blog.shi1011.cn/learn/1789</span><br>                                          <span class="hljs-comment">#声明变量为 flag0 flag1 flag2 ...</span><br>v6 = [<span class="hljs-number">128</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><br>des = [ <span class="hljs-number">0x65</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xFB</span>,<br> <span class="hljs-number">0x87</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x39</span>,<br> <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x39</span>,<br> <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x79</span>]<br><br>s_box = [ <span class="hljs-number">0x65</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7B</span>,<br> <span class="hljs-number">0x02</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xD7</span>,<br> <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFF</span>,<br> <span class="hljs-number">0x99</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xD2</span>,<br> <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x0C</span>,<br> <span class="hljs-number">0x00</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xDE</span>,<br> <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xFC</span>,<br> <span class="hljs-number">0x44</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x98</span>,<br> <span class="hljs-number">0x68</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xED</span>,<br> <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xA8</span>,<br> <span class="hljs-number">0x09</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x04</span>,<br> <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xD8</span>,<br> <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xE4</span>,<br> <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xA9</span>,<br> <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>,<br> <span class="hljs-number">0x47</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x62</span>,<br> <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xAA</span>,<br> <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x6A</span>,<br> <span class="hljs-number">0x97</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB3</span>,<br> <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x84</span>,<br> <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x6F</span>,<br> <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC1</span>,<br> <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xBF</span>,<br> <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDB</span>,<br> <span class="hljs-number">0x18</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xF1</span>,<br> <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x8F</span>]<br><br>LIST = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> des:<br>    LIST.append(s_box.index(i))    <span class="hljs-comment">#这里查找下标的操作其实是for循环里面的第二步</span><br>                                   <span class="hljs-comment">#即源文件中 tmp = s_box[....]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        v5 = ((v6[j] &amp; flags[i + <span class="hljs-number">3</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">3</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">3</span>]) &gt;&gt;((<span class="hljs-number">3</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">2</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">2</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i +<span class="hljs-number">2</span>]) &gt;&gt; ((<span class="hljs-number">2</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">1</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">1</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">1</span>]) &gt;&gt; ((<span class="hljs-number">1</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i]) &lt;&lt; (<span class="hljs-number">8</span> - -j % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i]) &gt;&gt; (-j % <span class="hljs-number">8</span>))<br>        tmp = (((v6[j] &amp; flags[i + <span class="hljs-number">7</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">7</span>])&gt;&gt; ((<span class="hljs-number">7</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">6</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">6</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i +<span class="hljs-number">6</span>]) &gt;&gt; ((<span class="hljs-number">6</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">5</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">5</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">5</span>]) &gt;&gt; ((<span class="hljs-number">5</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; flags[i + <span class="hljs-number">4</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">4</span> - j) % <span class="hljs-number">8</span>)) |((v6[j] &amp; flags[i + <span class="hljs-number">4</span>]) &gt;&gt; ((<span class="hljs-number">4</span> - j) % <span class="hljs-number">8</span>)) | v5)<br>        s.add(tmp == LIST[i+j])<br><br><span class="hljs-keyword">if</span> s.check() == sat:    <span class="hljs-comment">#z3标配语句 若有结果则赋值给result</span><br>    result = s.model()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(result[i].as_long()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flags))    <span class="hljs-comment">#.as_long()在python中没有显示颜色 但是可以使用</span><br>                                                           <span class="hljs-comment">#作用是将值从低到高按顺序输出</span><br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Q5la5_3KChtem6_HYHk_NlHhNZz73aCZeK05II96}</strong></p></blockquote><hr><h1 id="虚假的粉丝"><a href="#虚假的粉丝" class="headerlink" title="虚假的粉丝"></a>虚假的粉丝</h1><p>给的文件不少</p><p><img src="/img/-16383701053821.png" alt="img"></p><p>faded.mp3就是一首歌 没什么其他内容</p><p>f文件夹里面有5000+个.txt文件</p><p>先用ida打开exe文件看看</p><p><img src="/img/-16383701053833.png" alt="img"></p><p><img src="/img/-16383701053835.png" alt="img"></p><p>先分析到这里</p><p>我们现在要去f文件夹里面找符合规则的txt文件 并且求出字符串的偏移地址</p><p>给的约束条件是使用正则匹配</p><p>所以可以用命令</p><blockquote><p><strong>grep -E “正则表达式” 文件名 -b -o</strong></p></blockquote><p>构造正则表达式为</p><blockquote><p><strong>“U.{38}S”</strong></p></blockquote><p>所以最后的命令为</p><blockquote><p><strong>grep -E “U.{38}S” *.txt -b -o</strong></p></blockquote><p>详情参考</p><blockquote><p><strong><a href="https://wangchujiang.com/linux-command/c/grep.html">grep 命令，Linux grep 命令详解：强大的文本搜索工具 - Linux 命令搜索引擎 (wangchujiang.com)</a></strong></p></blockquote><p><img src="/img/-16383701053837.png" alt="img"></p><p>求得字符串长度后记录</p><blockquote><p><strong>v12 = 4157</strong></p></blockquote><blockquote><p><strong>Offset = 1118</strong></p></blockquote><blockquote><p><strong>ElementSize = 40</strong></p></blockquote><blockquote><p><strong>UzNDcmU3X0szeSUyMCUzRCUyMEFsNE5fd0FsSzNS</strong></p></blockquote><p>(这里的字符串其实没影响)</p><p>(当你在4157.txt中找到此字符串的时候 会发现它的长度为43)</p><p>(但是在exe文件填写的时候 40 43 都会跳转到正确的位置)</p><p><img src="/img/-16383701053839.png" alt="img"></p><p>字符串眼熟 尝试base64解码</p><blockquote><p><strong>S3Cre7_K3y%20%3D%20Al4N_wAlK3R</strong></p></blockquote><p>之后继续分析ida</p><p><img src="/img/-163837010538311.png" alt="img"></p><p>根据base64解码内容可以得到key为</p><blockquote><p><strong>Al4N_wAlK3R</strong></p></blockquote><p>所以我们运行exe文件 按顺序填好 再打开 5315 文件</p><p>使用命令</p><blockquote><p><strong>cat ASCII-faded\ 5315.txt</strong></p></blockquote><p><img src="/img/-163837010538313.png" alt="img"></p><p>详情参考</p><blockquote><p><strong><a href="https://www.runoob.com/linux/linux-comm-cat.html">Linux cat 命令 | 菜鸟教程 (runoob.com)</a></strong></p></blockquote><hr><blockquote><p><strong>flag{A_TrUe_AW_f4ns}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>湖湘杯</title>
    <link href="/reverse/%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
    <url>/reverse/%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-14</center>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>河北师范大学</title>
    <link href="/reverse/%E6%B2%B3%E5%8C%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6/"/>
    <url>/reverse/%E6%B2%B3%E5%8C%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-13 to 2021-11-14</center><h1 id="baby-upx"><a href="#baby-upx" class="headerlink" title="baby_upx"></a>baby_upx</h1><p>upx壳</p><p>正常的脱壳指令为</p><blockquote><p><strong>upx -d baby_upx.exe</strong></p></blockquote><p>发现报错</p><p><img src="/img/-16383693664851.png" alt="img"></p><p>所以自己手动脱了一下</p><p>出来之后ida32打开</p><p><img src="/img/-16383693664863.png" alt="img"></p><p><img src="/img/-16383693664865.png" alt="img"></p><p>看了官方的wp之后发现直接upx指令脱壳是可以的</p><blockquote><p><strong>upx -d baby_upx.exe -o baby_upx_dump.exe</strong></p></blockquote><p>ida32打开 (发现手脱结果都差不多)</p><p><img src="/img/-16383693664877.png" alt="img"></p><p>写脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v7[<span class="hljs-number">5</span>];<br>    v7[<span class="hljs-number">0</span>] = <span class="hljs-number">2099915543</span>;<br>    v7[<span class="hljs-number">1</span>] = <span class="hljs-number">120201498</span>;<br>    v7[<span class="hljs-number">2</span>] = <span class="hljs-number">269490557</span>;<br>    v7[<span class="hljs-number">3</span>] = <span class="hljs-number">67837461</span>;<br>    v7[<span class="hljs-number">4</span>] = <span class="hljs-number">271401</span>;<br><br>    <span class="hljs-keyword">char</span> String[] = <span class="hljs-string">&quot;HECTF&quot;</span>;<br>    <span class="hljs-keyword">char</span>* flag = (<span class="hljs-keyword">char</span>*)v7; <span class="hljs-comment">//此行作用为 将v7转换成char类型并将指针赋给flag</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">19</span>;i++)<br>        flag[i] ^= String[(i ^ (rand() + <span class="hljs-number">10086</span>)) % <span class="hljs-number">5</span>];    <span class="hljs-comment">//使用 C 写exp的原因大概是因为rand()</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,flag);<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Thi5_iiS5_UUPX_LalA}</strong></p></blockquote><hr><h1 id="baby-pp"><a href="#baby-pp" class="headerlink" title="baby_pp"></a>baby_pp</h1><p>查壳 发现是python写的 exe 文件</p><p><img src="/img/-16383694038719.png" alt="img"></p><p>具体过程参考</p><p><img src="/img/-163836940387111.png" alt="img"></p><p>之后找个在线网站pyc反编译</p><p>(发现在线反编译效果不是很好 文件中重要内容丢失)</p><p>(于是自己折腾了半天 搞好了uncompyle6)</p><p>(因为uncompyle6最高支持到python3.8   而自己windows的python是3.10  kali的python是3.9和2.7</p><p>所以只能在kali下更换python版本 之后安装python2的pip 再安装uncompyle6)</p><p>更换python版本</p><blockquote><p><strong>update-alternatives –config python</strong></p></blockquote><blockquote><p><strong>#之后选择序号</strong></p></blockquote><blockquote><p><strong>#详细教程👇</strong></p></blockquote><blockquote><p><strong><a href="https://zhuanlan.zhihu.com/p/159483149">ubuntu下切换默认python版本 - 知乎 (zhihu.com)</a></strong></p></blockquote><blockquote><p><strong>uncompyle6 -o main.py main.pyc</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># uncompyle6 version 3.8.0</span><br><span class="hljs-comment"># Python bytecode 3.8.0 (3413)</span><br><span class="hljs-comment"># Decompiled from: Python 3.9.7 (default, Sep 24 2021, 09:43:00) </span><br><span class="hljs-comment"># [GCC 10.3.0]</span><br><span class="hljs-comment"># Embedded file name: main.py</span><br><span class="hljs-comment"># Compiled at: 1995-09-28 00:18:56</span><br><span class="hljs-comment"># Size of source mod 2**32: 272 bytes</span><br><span class="hljs-keyword">import</span> random<br>ens = <span class="hljs-string">&#x27;742641edefb6770733ab5932325106b3a5fa75222791d09e451161c46f15504402b32737362443d4df7d136145cd970b54116669c230&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">s, nuum</span>):</span>    <span class="hljs-comment">#step为18</span><br>    step = <span class="hljs-built_in">len</span>(s) // nuum<br>    ens = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(step):<br>        ens += s[i::step]    <span class="hljs-comment">#打乱顺序</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> ens<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    random.seed(<span class="hljs-number">10085</span>)    <span class="hljs-comment">#rand种子为定值</span><br>    u_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;: &#x27;</span>)<br>    t = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> u_input:<br>        t += <span class="hljs-string">&#x27;%02x&#x27;</span> % (<span class="hljs-built_in">ord</span>(i) ^ random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">127</span>))    <span class="hljs-comment">#关键异或</span><br>                                                           <span class="hljs-comment">#其中 %02x 代表输入的值每两个一组作为一个十六进制数</span><br>    <span class="hljs-keyword">else</span>:                                                  <span class="hljs-comment">#也就是我们解密输入的字符串长度为54</span><br>        eni = encode(t, <span class="hljs-number">6</span>)    <span class="hljs-comment">#加密后的结果已给出</span><br>        <span class="hljs-keyword">if</span> eni == ens:    <span class="hljs-comment">#ens长为108</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Failed!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>第15行:       ens += s[i::step]</p><p>举个例子来说明其作用</p><p><img src="/img/-163836940387113.png" alt="img"></p><p>所以解密脚本 先恢复顺序 再进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br>random.seed(<span class="hljs-number">10085</span>)<br><br>ens = <span class="hljs-string">&#x27;742641edefb6770733ab5932325106b3a5fa75222791d09e451161c46f15504402b32737362443d4df7d136145cd970b54116669c230&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>t = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        t += ens[i + j*<span class="hljs-number">6</span>]<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">108</span>,<span class="hljs-number">2</span>):<br>    flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(t[x:x+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>) ^ random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">127</span>))<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>其中 关于数组中[::]切片问题详细可以看</p><blockquote><p><strong>[(18条消息) Python中numpy数组切片：print(a<a href="https://blog.csdn.net/weixin_43629813/article/details/101122997">0::2])、a[::2]、[:,2]、[1:,-1:]、a[::-1]、[ : n]、[m : ]、[-1]、[:-1]、[1:]等的含义（详细）<em>锵锵锵锵蒋的博客-CSDN博客</em>[::2]</a></strong></p></blockquote><p>运行 输出</p><blockquote><p><strong>HECTF{decrypt(80410840840842108808881088408084210842)}</strong></p></blockquote><p>第一次接触云影密码 特点是</p><p><img src="/img/-163836940387115.png" alt="img"></p><blockquote><p><strong><a href="https://www.cnblogs.com/yuanchu/p/13492904.html">Crypto入门 （六）幂数加密（云影密码） - 缘初 - 博客园 (cnblogs.com)</a></strong></p></blockquote><p>附上一个云影解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">ens = <span class="hljs-string">&#x27;80410840840842108808881088408084210842&#x27;</span>  <span class="hljs-comment">#云影加密密文</span><br>result = ens.split(<span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-comment">#遇到‘0’时分割</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>    <span class="hljs-built_in">str</span> = result[i]<br>    t = <span class="hljs-number">0</span>    <span class="hljs-comment">#每次循环t清零</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        t += <span class="hljs-built_in">int</span>(i)<br><br>    flag += <span class="hljs-built_in">chr</span>(t + <span class="hljs-number">64</span>)    <span class="hljs-comment">#云影加密对应的是大写字母</span><br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{HELLOPYTHON}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深育杯</title>
    <link href="/reverse/%E6%B7%B1%E8%82%B2%E6%9D%AF/"/>
    <url>/reverse/%E6%B7%B1%E8%82%B2%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-13</center><h1 id="Lithops"><a href="#Lithops" class="headerlink" title="Lithops"></a>Lithops</h1><p>无壳 32位 ida32打开</p><p><img src="/img/-16383689370851.png" alt="img"></p><p>从输入到 check 有很多函数</p><p>莽一点 从check函数下断点 步入进去看看试试</p><p>输入任意长的flag之后进入 check 函数</p><p><img src="/img/-16383689370853.png" alt="img"></p><p>再直接从 return 处下断点 f9 运行</p><p><img src="/img/-16383689370855.png" alt="img"></p><p>双击进入 dword_813C60 查看 发现两处引用</p><p>且有一处引用是在我们的 check 函数</p><p>点击追踪过去</p><p><img src="/img/-16383689370857.png" alt="img"></p><p>之后我们程序运行到此处时</p><p><img src="/img/-16383689370859.png" alt="img"></p><p>发现 push ecx 中的 ecx 里面存放的值是我们的输入</p><p><img src="/img/-163836893708611.png" alt="img"></p><p>而继续运行下去</p><p>push edx 中的 edx 值为</p><p><img src="/img/-163836893708613.png" alt="img"></p><p>取出查看</p><blockquote><p><strong>0xE4, 0xB8, 0x8D, 0xE5, 0x81, 0x9A, 0xE4, 0xBC, 0x9F, 0xE5, 0xA4, 0xA7, 0xE6, 0x97, 0xB6, 0xE4, 0xBB, 0xA3, 0xE7, 0x9A, 0x84, 0xE6, 0x97, 0x81, 0xE8, 0xA7, 0x82, 0xE8, 0x80, 0x85</strong></p></blockquote><p>自己没有发现这是 UTF-8 编码方式</p><p>(赛后wp里面写明 此程序在加密过程中调用了 UTF-8 编码)</p><p>放上一点知识：</p><blockquote><p><strong><a href="https://link.zhihu.com/?target=https://unicode-table.com/cn/">unicode-table.com/cn/</a></strong></p></blockquote><p>最后找个网站解码即可</p><p><img src="/img/-163836893708615.png" alt="img"></p><hr><blockquote><p><strong>flag{不做伟大时代的旁观者}</strong></p></blockquote><hr><h1 id="press"><a href="#press" class="headerlink" title="press"></a>press</h1><p>查壳 无壳 ida64打开</p><p><img src="/img/-163836899417117.png" alt="img"></p><p>最后main函数输出out文件 内容</p><blockquote><p><strong>60 E1 2F 05 79 80 5E E1 C5 57 8B CC 5C 9A 67 26 1E 19 AF 93 3F 09 E2 97 99 7B 86 C1 25 87 D6 0C DD CF 2A F5 65 0E 73 59 1D 5F A4 F4 65 68 D1 3D D2 98 5D FE 5B EF 5B CC</strong></p></blockquote><p>查看关键函数1</p><p><img src="/img/-163836899417119.png" alt="img"></p><blockquote><p><strong>++++++++++[-&gt;++++++++++++++++&lt;],[-&gt;-&lt;]&gt;&gt;[-]+++++&lt;*++.&lt;</strong></p></blockquote><p>查看关键函数2</p><p><img src="/img/-163836899417121.png" alt="img"></p><p>说明了每个字符的操作 类似小型虚拟机 和真brainfuck加密不同</p><p>所以只能一步一步读取</p><p>贴一个师傅转成的代码</p><p>这里对指令的解读是难点 有点恶心人</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C">ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[0] = 10</span><br><br><span class="hljs-keyword">while</span><br> (ptr[<span class="hljs-number">0</span>]) &#123;<br>ptr[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">1</span>] += <span class="hljs-number">16</span>;    <span class="hljs-comment">//ptr[1] += 160</span><br>&#125;<br><br>ptr[<span class="hljs-number">0</span>] = get();<br><br><span class="hljs-keyword">while</span><br> (ptr[<span class="hljs-number">0</span>]) &#123;<br>ptr[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[1] = 160 - 输入的大小</span><br>&#125;<br><br><span class="hljs-keyword">while</span><br> (ptr[<span class="hljs-number">2</span>]) &#123;<br>ptr[<span class="hljs-number">2</span>] -= <span class="hljs-number">1</span>;<br>&#125;<br><br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>ptr[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[2] = 5    也就是ptr[1] *= 5</span><br>ptr[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;    <br>ptr[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;    <span class="hljs-comment">//ptr[1] += 2</span><br><br>put(ptr[<span class="hljs-number">1</span>]);    <span class="hljs-comment">//output = (x + 160-input) * 5 + 2</span><br></code></pre></td></tr></table></figure><p>解密时需要注意溢出</p><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">out = [<span class="hljs-number">0x060</span>,<span class="hljs-number">0x0E1</span>,<span class="hljs-number">0x02F</span>,<span class="hljs-number">0x005</span>,<span class="hljs-number">0x079</span>,<span class="hljs-number">0x080</span>,<span class="hljs-number">0x05E</span>,<span class="hljs-number">0x0E1</span>,<span class="hljs-number">0x0C5</span>,<span class="hljs-number">0x057</span>,<span class="hljs-number">0x08B</span>,<span class="hljs-number">0x0CC</span>,<span class="hljs-number">0x05C</span>,<br>       <span class="hljs-number">0x09A</span>,<span class="hljs-number">0x067</span>,<span class="hljs-number">0x026</span>,<span class="hljs-number">0x01E</span>,<span class="hljs-number">0x019</span>,<span class="hljs-number">0x0AF</span>,<span class="hljs-number">0x093</span>,<span class="hljs-number">0x03F</span>,<span class="hljs-number">0x009</span>,<span class="hljs-number">0x0E2</span>,<span class="hljs-number">0x097</span>,<span class="hljs-number">0x099</span>,<span class="hljs-number">0x07B</span>,<br>       <span class="hljs-number">0x086</span>,<span class="hljs-number">0x0C1</span>,<span class="hljs-number">0x025</span>,<span class="hljs-number">0x087</span>,<span class="hljs-number">0x0D6</span>,<span class="hljs-number">0x00C</span>,<span class="hljs-number">0x0DD</span>,<span class="hljs-number">0x0CF</span>,<span class="hljs-number">0x02A</span>,<span class="hljs-number">0x0F5</span>,<span class="hljs-number">0x065</span>,<span class="hljs-number">0x00E</span>,<span class="hljs-number">0x073</span>,<br>       <span class="hljs-number">0x059</span>,<span class="hljs-number">0x01D</span>,<span class="hljs-number">0x05F</span>,<span class="hljs-number">0x0A4</span>,<span class="hljs-number">0x0F4</span>,<span class="hljs-number">0x065</span>,<span class="hljs-number">0x068</span>,<span class="hljs-number">0x0D1</span>,<span class="hljs-number">0x03D</span>,<span class="hljs-number">0x0D2</span>,<span class="hljs-number">0x098</span>,<span class="hljs-number">0x05D</span>,<span class="hljs-number">0x0FE</span>,<span class="hljs-number">0x05B</span>,<span class="hljs-number">0x0EF</span>,<span class="hljs-number">0x05B</span>,<span class="hljs-number">0x0CC</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(out)):<br>   ens = out[i] - <span class="hljs-number">2</span><br><br>   <span class="hljs-keyword">while</span>(ens != ens // <span class="hljs-number">5</span> * <span class="hljs-number">5</span>):<br>       ens += <span class="hljs-number">0x100</span><br>   ens = ens // <span class="hljs-number">5</span><br><br>   <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>):<br>       flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">160</span> - ens)<br>   <span class="hljs-keyword">else</span>:<br>       flag += <span class="hljs-built_in">chr</span>((out[i-<span class="hljs-number">1</span>] + <span class="hljs-number">160</span> - ens) % <span class="hljs-number">0x100</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><blockquote><p><strong>ZmxhZ3tkZTBiZDY3ZS02ZDI1LTg3ZDctMTg3Ni1hZDEzMWE2MTY1Y2J9</strong></p></blockquote><p>base64解码即可</p><hr><blockquote><p><strong>flag{de0bd67e-6d25-87d7-1876-ad131a6165cb}</strong></p></blockquote><hr><h1 id="xor-exercise"><a href="#xor-exercise" class="headerlink" title="xor_exercise"></a>xor_exercise</h1><p><img src="/img/-163836905228223.png" alt="img"></p><p>default去除之后会有残留</p><p>类似这种永真永假的语句</p><p><img src="/img/-163836905228325.png" alt="img"></p><p>官方wp写的是</p><p><img src="/img/-163836905228327.png" alt="img"></p><p>其实查看了官方给出的script.py之后  明白了就是用idapython nop掉无用代码</p><p>附上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">patch_nop</span>(<span class="hljs-params">start, end</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end):<br>        PatchByte(i, <span class="hljs-number">0x90</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next_instr</span>(<span class="hljs-params">addr</span>):</span><br>    <span class="hljs-keyword">return</span> addr+ItemSize(addr)<br><br>st = <span class="hljs-number">0x0000000000401170</span><br>end = <span class="hljs-number">0x0000000000402de0</span><br><br>addr = st<br><span class="hljs-keyword">while</span>(addr &lt; end):<br>    <span class="hljs-built_in">next</span> = next_instr(addr)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ds:y&quot;</span> <span class="hljs-keyword">in</span> GetDisasm(addr):<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>            addr = <span class="hljs-built_in">next</span><br>            <span class="hljs-built_in">next</span> = next_instr(addr)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;jnz&quot;</span> <span class="hljs-keyword">in</span> GetDisasm(addr):<br>                dest = GetOperandValue(addr, <span class="hljs-number">0</span>)<br>                PatchByte(addr, <span class="hljs-number">0xe9</span>)<br>                PatchByte(addr+<span class="hljs-number">5</span>, <span class="hljs-number">0x90</span>)<br>                offset = dest - (addr + <span class="hljs-number">5</span>)<br>                PatchDword(addr + <span class="hljs-number">1</span>, offset)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;patch bcf: 0x%x&quot;</span> % addr)<br>                addr = <span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        addr = <span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>ida里面 shitf+f2 运行代码发现报错</p><blockquote><p><strong>NameError: name ‘ItemSize’ is not defined</strong></p></blockquote><p>查找资料找到解决办法：</p><blockquote><p><strong><a href="https://www.52pojie.cn/thread-1403005-1-1.html">关于IDA7.5 IDApython api差异问题及解决办法 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></strong></p></blockquote><p>题目是crc64加密</p><p>从官方发的更新后的题文件能找到相关数字串来确定是crc64加密(虽然我自己看不出来就是了)</p><p>贴个其他师傅写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">cmp = [<span class="hljs-number">0x32E9A65483CC9671</span>, <span class="hljs-number">0xEC92A986A4AF329C</span>, <span class="hljs-number">0x96C8259BC2AC4673</span>,<br>       <span class="hljs-number">0x74BF5DCA4423530F</span>, <span class="hljs-number">0x59D78EF8FDCBFAB1</span>, <span class="hljs-number">0xA65257E5B13942B1</span>]<br>       <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">int</span>(cmp[i])&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>:<br>            cmp[i] ^= <span class="hljs-number">0xB1234B7679FC4B3D</span><br>            cmp[i] = cmp[i]&gt;&gt;<span class="hljs-number">1</span><br>            cmp[i] |= <span class="hljs-number">0x8000000000000000</span><br>        <span class="hljs-keyword">else</span>:<br>            cmp[i] = cmp[i]&gt;&gt;<span class="hljs-number">1</span><br>            <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(cmp[i]), end=<span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>陇原战&#39;疫&#39;</title>
    <link href="/reverse/%E9%99%87%E5%8E%9F%E6%88%98%E2%80%98%E7%96%AB%E2%80%99/"/>
    <url>/reverse/%E9%99%87%E5%8E%9F%E6%88%98%E2%80%98%E7%96%AB%E2%80%99/</url>
    
    <content type="html"><![CDATA[<center>time:2021-11-7</center><h1 id="power"><a href="#power" class="headerlink" title="power"></a>power</h1><p>题目说是arm汇编</p><p>用 Resource Hacker 打开</p><p>发现S盒</p><p><img src="/img/-16383682581061.png" alt="img"></p><p>然后搜索找到main函数</p><p><img src="/img/-16383682581073.png" alt="img"></p><p>发现第1253行</p><blockquote><p><strong>.size   <em>ZN3aes14encryption_cbcEPcS0</em>, .-<em>ZN3aes14encryption_cbcEPcS0</em></strong></p></blockquote><p>aes 和 cbc</p><p>所以可以肯定是aes加密 是不是cbc模式难说</p><p>找到16位密钥</p><blockquote><p><strong>this_is_a_key!!!</strong></p></blockquote><p>接着找到密文</p><blockquote><p><strong>1030a9254d44937bed312da03d2db9adbec5762c2eca7b5853e489d2a140427b</strong></p></blockquote><p>之后可以用在线网站aes解码</p><p>使用cbc模式解码失败 换成ecb模式成功</p><p>放上个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>key = <span class="hljs-string">b&#x27;this_is_a_key!!!&#x27;</span><br>enc = long_to_bytes(<span class="hljs-number">0x1030a9254d44937bed312da03d2db9adbec5762c2eca7b5853e489d2a140427b</span>)<br>ae = AES.new(key, AES.MODE_ECB)<br><br><span class="hljs-built_in">print</span>(ae.decrypt(enc))<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{y0u_found_the_aes_12113112}</strong></p></blockquote><hr><h1 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h1><p>32位 无壳 ida32打开</p><p>找到main函数 发现字符串长度为26</p><p><img src="/img/-16383682984375.png" alt="img"></p><p><img src="/img/-16383682984377.png" alt="img"></p><p>之后根据主函数中的 off_403844 找到 sub_401866 函数 并进入</p><p><img src="/img/-16383682984379.png" alt="img"></p><p>发现函数是RC4加密</p><p>关键点在于第39行的函数 sub_401767 和第42行的 dword_403040 值</p><p>先取出dword的值</p><blockquote><p>  <strong>0xB7, 0xFF, 0xFF, 0xFF, 0x52, 0x00, 0x00, 0x00, 0x85, 0xFF,</strong> </p></blockquote><blockquote><p>  <strong>0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0x90, 0xFF, 0xFF, 0xFF,</strong> </p></blockquote><blockquote><p>  <strong>0xE9, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xB8, 0xFF,</strong> </p></blockquote><blockquote><p>  <strong>0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xFF, 0x1A, 0x00, 0x00, 0x00,</strong> </p></blockquote><blockquote><p>  <strong>0xC3, 0xFF, 0xFF, 0xFF, 0xBD, 0xFF, 0xFF, 0xFF, 0x1D, 0x00,</strong> </p></blockquote><blockquote><p>  <strong>0x00, 0x00, 0x8E, 0xFF, 0xFF, 0xFF, 0x85, 0xFF, 0xFF, 0xFF,</strong> </p></blockquote><blockquote><p>  <strong>0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00,</strong> </p></blockquote><blockquote><p>  <strong>0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0xAF, 0xFF, 0xFF, 0xFF,</strong> </p></blockquote><blockquote><p>  <strong>0xEF, 0xFF, 0xFF, 0xFF, 0x70, 0x00, 0x00, 0x00, 0x32, 0x00,</strong> </p></blockquote><blockquote><p>  <strong>0x00, 0x00, 0xB5, 0xFF, 0xFF, 0xFF, 0x11, 0x00, 0x00, 0x00,</strong> </p></blockquote><blockquote><p>  <strong>0xC6, 0xFF, 0xFF, 0xFF</strong></p></blockquote><p>进行整理：</p><blockquote><p><strong>0xB7,0x52,0x85,0xC1,0x90,0xE9,0x07,0xB8,0xE4,0x1A,</strong></p></blockquote><blockquote><p><strong>0xC3,0xBD,0x1D,0x8E,0x85,0x46,0x00,0x21,0x44,0xAF,</strong></p></blockquote><blockquote><p><strong>0xEF,0x70,0x32,0xB5,0x11,0xC6</strong></p></blockquote><p>之后我们需要动调来获得加密后的字符串的值</p><p>断点如下</p><p>main函数的</p><p><img src="/img/-163836829843711.png" alt="img"></p><p>sub_401866 函数的</p><p><img src="/img/-163836829843713.png" alt="img"></p><p>之后动调</p><p>输入值</p><blockquote><p><strong>12345678901234567890123456</strong></p></blockquote><p>F7 F9 进入函数 sub_401767</p><p>两个窗口对照查看</p><p><img src="/img/-163836829843715.png" alt="img"></p><p>首先我们先运行到for循环的最后一行 也就是第21行</p><p><img src="/img/-163836829843817.png" alt="img"></p><p>之后我们在 IDA View 中进行单步F8 运行到for循环第一轮结束时候 也就是</p><p><img src="/img/-163836829843819.png" alt="img"></p><p>现在我们可以看到 [eax] 里存放的值 是我们输入的值</p><p><img src="/img/-163836829843821.png" alt="img"></p><p>dl 的值 也就是 xor edx,ecx 中edx的值 是</p><p><img src="/img/-163836829843823.png" alt="img"></p><p>所以我们输入的第一个值 0 经过函数 sub_401767 加密后 变成了 D5</p><p>之后我们可以 通过单步F8的值记录 EDX 的值</p><p>也可以在 sub_401866 函数的第40行继续下断点</p><p>F9执行出来之后F8运行到main函数断点下 回头找到 inputt 的值</p><blockquote><p><strong>0xD5, 0x25, 0xE2, 0xB6, 0xF1, 0x99, 0x4B, 0xD4, 0xB5, 0x1B,</strong> </p></blockquote><blockquote><p><strong>0x81, 0xD0, 0x47, 0x8F, 0xEF, 0x35, 0x05, 0x46, 0x48, 0xEB,</strong> </p></blockquote><blockquote><p><strong>0x8C, 0x21, 0x6C, 0xB8, 0x05, 0x8D</strong></p></blockquote><p>已知是RC4 加密</p><p>用假密文异或假明文得到密钥流，然后用密钥流对密文进行异或得到明文</p><p>可以写脚本求出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">inputt = <span class="hljs-string">&quot;12345678901234567890123456&quot;</span><br><br>dwo = [<span class="hljs-number">0xD5</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0xE2</span>,<span class="hljs-number">0xB6</span>,<span class="hljs-number">0xF1</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x4B</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0x1B</span>,<br>       <span class="hljs-number">0x81</span>,<span class="hljs-number">0xD0</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x8F</span>,<span class="hljs-number">0xEF</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xEB</span>,<br>       <span class="hljs-number">0x8C</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x8D</span>]<br><br>rc4 = [<span class="hljs-number">0xB7</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0xC1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0xE9</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x1A</span>,<br>       <span class="hljs-number">0xC3</span>,<span class="hljs-number">0xBD</span>,<span class="hljs-number">0x1D</span>,<span class="hljs-number">0x8E</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0xAF</span>,<br>       <span class="hljs-number">0xEF</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xC6</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(inputt[i]) ^ unk[i] ^ rc4[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{Th1s_i5_E2_5tRcm9!}</strong></p></blockquote><hr><h1 id="EasyRE-Revenge"><a href="#EasyRE-Revenge" class="headerlink" title="EasyRE_Revenge"></a>EasyRE_Revenge</h1><p>查壳 ida打开</p><p>找到main函数</p><p>简单分析一下</p><p><img src="/img/-163836837201625.png" alt="img"></p><p>进入 sub_411F4 函数中 发现数据出错</p><p><img src="/img/-163836837201627.png" alt="img"></p><p>找到出错位置 并向下查看 发现</p><p>很明显 要用idc代码除去花指令 (快捷键 shift+f2)</p><p>(也可以手动nop 这里是先手动nop 然后找出不需要nop的关键数据 再写脚本)</p><p><img src="/img/-163836837201629.png" alt="img"></p><p>附上官方idc脚本(自己写不出来。。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//IDC脚本</span><br><span class="hljs-keyword">auto</span> addr_start = <span class="hljs-number">0x004117A0</span>;<span class="hljs-comment">//函数起始地址</span><br><span class="hljs-keyword">auto</span> addr_end = <span class="hljs-number">0x00411E58</span>;<span class="hljs-comment">//函数结束地址</span><br><span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=addr_start;i&lt;addr_end;i++)&#123;<br>    <span class="hljs-keyword">if</span>(Dword(i) == <span class="hljs-number">0x1E8</span>)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">6</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<span class="hljs-comment">//0x90是nop表示的字节</span><br>        &#125;<br>        i=i+<span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">3</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;<br>        i=i+<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">3</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;<br>        i=i+<span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">1</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;   <br>        i=i+<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">2</span>; j++,i++ )&#123;<br>            PatchByte(i,<span class="hljs-number">0x90</span>);<br>        &#125;     <br>        i--;    <br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>之后在有问题的起始地址 p 创建函数 之后查看</p><p>我的效果：</p><p><img src="/img/-163836837201631.png" alt="img"></p><p>官方的效果：</p><p><img src="/img/-163836837201633.png" alt="img"></p><p>不仅不好看而且还少了一位。。。</p><p>好像少了不止一位 一行也没有了</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>v5 = [<span class="hljs-number">0x271e150c</span>,<span class="hljs-number">0x3b322920</span>,<span class="hljs-number">0x5f564d44</span>,<span class="hljs-number">0x736a6158</span>,<span class="hljs-number">0x978e857c</span>,<span class="hljs-number">0xaba29990</span>,<span class="hljs-number">0xcfc6bdb4</span>,<span class="hljs-number">0xe3dad1c8</span>]<br><br>v6 = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br><br>data = [<span class="hljs-number">0x0EEE8B042</span>,<span class="hljs-number">0x57D0EE6C</span>,<span class="hljs-number">0x0F3F54B32</span>,<span class="hljs-number">0x0D3F0B7D6</span>,<span class="hljs-number">0x0A61C389</span>,<span class="hljs-number">0x38C7BA40</span>,<span class="hljs-number">0x0C3D9E2C</span>,<span class="hljs-number">0x0D64A9284</span>]<br><br>x0=BitVec(<span class="hljs-string">&#x27;x0&#x27;</span>,<span class="hljs-number">32</span>)<br>x1=BitVec(<span class="hljs-string">&#x27;x1&#x27;</span>,<span class="hljs-number">32</span>)<br>x2=BitVec(<span class="hljs-string">&#x27;x2&#x27;</span>,<span class="hljs-number">32</span>)<br>x3=BitVec(<span class="hljs-string">&#x27;x3&#x27;</span>,<span class="hljs-number">32</span>)<br>x4=BitVec(<span class="hljs-string">&#x27;x4&#x27;</span>,<span class="hljs-number">32</span>)<br>x5=BitVec(<span class="hljs-string">&#x27;x5&#x27;</span>,<span class="hljs-number">32</span>)<br>x6=BitVec(<span class="hljs-string">&#x27;x6&#x27;</span>,<span class="hljs-number">32</span>)<br>x7=BitVec(<span class="hljs-string">&#x27;x7&#x27;</span>,<span class="hljs-number">32</span>)<br><br>s = z3.Solver()<br><br>v6[<span class="hljs-number">0</span>]=x0^v5[<span class="hljs-number">2</span>]<br>v6[<span class="hljs-number">1</span>]=x1^v5[<span class="hljs-number">1</span>]<br>v6[<span class="hljs-number">2</span>]=x2^v5[<span class="hljs-number">0</span>]<br>v6[<span class="hljs-number">3</span>]=x3^v5[<span class="hljs-number">7</span>]<br>v6[<span class="hljs-number">4</span>]=x4^v5[<span class="hljs-number">6</span>]<br>v6[<span class="hljs-number">5</span>]=x5^v5[<span class="hljs-number">5</span>]<br>v6[<span class="hljs-number">6</span>]=x6^v5[<span class="hljs-number">4</span>]<br>v6[<span class="hljs-number">7</span>]=x7^v5[<span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    v6[i] ^= (v6[i] &lt;&lt; <span class="hljs-number">7</span>)<br>    v6[i] ^= v5[(i*<span class="hljs-number">7</span>+<span class="hljs-number">3</span>)%<span class="hljs-number">8</span>]<br>    v6[i] ^= v6[(i*<span class="hljs-number">5</span>+<span class="hljs-number">3</span>)%<span class="hljs-number">8</span>]<br>    v6[i] ^= (v6[i]&lt;&lt;<span class="hljs-number">13</span>)<br>    v6[i] ^= v5[(i*<span class="hljs-number">7</span>+<span class="hljs-number">5</span>)%<span class="hljs-number">8</span>]<br>    v6[i] ^= (v6[i]&lt;&lt;<span class="hljs-number">17</span>)<br>    <br>s.add(data[<span class="hljs-number">0</span>]==v6[<span class="hljs-number">0</span>],data[<span class="hljs-number">1</span>]==v6[<span class="hljs-number">1</span>],data[<span class="hljs-number">2</span>]==v6[<span class="hljs-number">2</span>],data[<span class="hljs-number">3</span>]==v6[<span class="hljs-number">3</span>],data[<span class="hljs-number">4</span>]==v6[<span class="hljs-number">4</span>],data[<span class="hljs-number">5</span>]==v6[<span class="hljs-number">5</span>],data[<span class="hljs-number">6</span>]==v6[<span class="hljs-number">6</span>],data[<span class="hljs-number">7</span>]==v6[<span class="hljs-number">7</span>],)<br><br><span class="hljs-keyword">if</span> s.check() == sat:    <span class="hljs-comment">#z3标配语句 若有结果则赋值给result</span><br>    result = s.model()<br><br><span class="hljs-comment">#print(result)</span><br><br><span class="hljs-comment">#x0 = 1630954594,x1 = 828781622,x2 = 862085687,x3 = 909140836,x4 = 825516597,x5 = 1633759329,x6 = 879047012,x7 = 943285560</span><br><br>flag = [<span class="hljs-number">1630954594</span>,<span class="hljs-number">828781622</span>,<span class="hljs-number">862085687</span>,<span class="hljs-number">909140836</span>,<span class="hljs-number">825516597</span>,<span class="hljs-number">1633759329</span>,<span class="hljs-number">879047012</span>,<span class="hljs-number">943285560</span>]<br><span class="hljs-comment">#转成字符</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">THEFLAG</span>(<span class="hljs-params">t</span>):</span>    <span class="hljs-comment">#试了半天别的方法 感觉还是这个方法好一点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        num = t % <span class="hljs-number">0x100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(num), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        t = t // <span class="hljs-number">0x100</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    THEFLAG(flag[i])<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{bd6a64f17bb3dc065b41a0aad1e48e98}</strong></p></blockquote><hr><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><p>参考：<a href="https://hackmd.io/@crazyman/SkyAgiK4F#Reverse">https://hackmd.io/@crazyman/SkyAgiK4F#Reverse</a></p><p>emo了</p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>鹤城杯</title>
    <link href="/reverse/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    <url>/reverse/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-10-8</center><h1 id="Petition"><a href="#Petition" class="headerlink" title="Petition"></a>Petition</h1><p>32位无壳</p><p><img src="/img/-16383679498351.png" alt="img"></p><p>shift+f12找字符串 没发现</p><p>转换找main函数 没有</p><p>只能打开start函数</p><p><img src="/img/-16383679498363.png" alt="img"></p><p>发现函数嵌套函数</p><p><img src="/img/-16383679498365.png" alt="img"></p><p>进入sub_119C 发现函数嵌套函数</p><p><img src="/img/-16383679498367.png" alt="img"></p><p>进入sub_122A 发现函数嵌套函数。。。。</p><p>一直循环了下去 且变化的数是</p><p><img src="/img/-16383679498369.png" alt="img"></p><p>初步怀疑两数异或的值</p><p>试一下前几个值进行异或：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x1e</span>^<span class="hljs-number">0x78</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x6c</span>^<span class="hljs-number">0x00</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x07</span>^<span class="hljs-number">0x66</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xa9</span>^<span class="hljs-number">0xce</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得出</p><blockquote><p><strong>flag</strong></p></blockquote><p>猜想成立 一直写下去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x1e</span>^<span class="hljs-number">0x78</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x6c</span>^<span class="hljs-number">0x00</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x07</span>^<span class="hljs-number">0x66</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xa9</span>^<span class="hljs-number">0xce</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xf9</span>^<span class="hljs-number">0x82</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x8c</span>^<span class="hljs-number">0xb5</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x88</span>^<span class="hljs-number">0xbe</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xcb</span>^<span class="hljs-number">0xa8</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x52</span>^<span class="hljs-number">0x64</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xa0</span>^<span class="hljs-number">0x99</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x19</span>^<span class="hljs-number">0x2f</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x21</span>^<span class="hljs-number">0x15</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x66</span>^<span class="hljs-number">0x50</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x03</span>^<span class="hljs-number">0x2e</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xaf</span>^<span class="hljs-number">0x97</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xf6</span>^<span class="hljs-number">0xc7</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x43</span>^<span class="hljs-number">0x7b</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x18</span>^<span class="hljs-number">0x2c</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xc9</span>^<span class="hljs-number">0xe4</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xfe</span>^<span class="hljs-number">0xca</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x66</span>^<span class="hljs-number">0x55</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x9c</span>^<span class="hljs-number">0xaa</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x4c</span>^<span class="hljs-number">0x7f</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x00</span>^<span class="hljs-number">0x2d</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x25</span>^<span class="hljs-number">0x1d</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xd6</span>^<span class="hljs-number">0xb2</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x9a</span>^<span class="hljs-number">0xff</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x7d</span>^<span class="hljs-number">0x44</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xbd</span>^<span class="hljs-number">0x90</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x45</span>^<span class="hljs-number">0x72</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x65</span>^<span class="hljs-number">0x56</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x6e</span>^<span class="hljs-number">0x08</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x85</span>^<span class="hljs-number">0xb2</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x12</span>^<span class="hljs-number">0x21</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x7f</span>^<span class="hljs-number">0x46</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x2b</span>^<span class="hljs-number">0x13</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x24</span>^<span class="hljs-number">0x14</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xfc</span>^<span class="hljs-number">0xca</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x24</span>^<span class="hljs-number">0x12</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x50</span>^<span class="hljs-number">0x33</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x12</span>^<span class="hljs-number">0x23</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xea</span>^<span class="hljs-number">0x97</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0xb2</span>^<span class="hljs-number">0xb2</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{96c69646-8184-4363-8de9-73f7398066c1}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绿城杯</title>
    <link href="/reverse/%E7%BB%BF%E5%9F%8E%E6%9D%AF/"/>
    <url>/reverse/%E7%BB%BF%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<center>time:2021-9-29</center><h1 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h1><p> 查壳（工具 Exeinfo PE） 发现无壳 32位</p><p><img src="/img/-16383660907221.png" alt="img"></p><h2 id="1-静态分析"><a href="#1-静态分析" class="headerlink" title="1.静态分析"></a>1.静态分析</h2><p>扔进ida32打开 找到main函数 f5反编译一下</p><p><img src="/img/-16383660907233.png" alt="img"></p><p>出现JUMPOUT问题反汇编不了 首先考虑是不是花指令</p><p>shift+f12打开字符串窗口</p><p><img src="/img/-16383660907235.png" alt="img"></p><p>找到与flag有关的字符串双击 找到IDA View窗口中标红的地方</p><p><img src="/img/-16383660907237.png" alt="img"></p><p>关键点为 jz跳转命令是一个无效指令 导致下面adc [edx],esp无法执行</p><blockquote><p><strong>选中jz指令使用Edit-&gt;Patch program-&gt;Assemble nop掉</strong></p></blockquote><p><img src="/img/-16383660907239.png" alt="img"></p><p>并将出现的黄色指令用C键强行转换成代码 直到黄色指令消失</p><p><img src="/img/-163836609072311.png" alt="img"></p><p>这时f5进入main函数的伪代码</p><p>观察发现函数中含有RC4加密算法（函数中多次出现%256要注意是否为RC4加密）</p><p><img src="/img/-163836609072313.png" alt="img"></p><p>与一般RC4不同的是 此题中在加密过程异或了0x37</p><p>找到关键点：</p><blockquote><p><strong>v26=”tallmewhy”  v4=v26的长度且加密中出现%v4   可断定v26为密钥</strong></p></blockquote><p><img src="/img/-163836609072315.png" alt="img"></p><p>回到最前面 找到开头赋值的五组数 五组数在内存空间中连续出现</p><p><img src="/img/-163836609072317.png" alt="img"></p><p><img src="/img/-163836609072319.png" alt="img"></p><p>v20-v21若非十六进制显示可按H键切换</p><p>进入xmmword_4021B0和xmmword_4021C0</p><p><img src="/img/-163836609072321.png" alt="img"></p><p>发现是赋值 选中两条 shift+e 发现是小端存储</p><blockquote><p><strong>1A 91 A9 24 D3 EB F4 30 65 28 A5 9F E4 8D 8C F5h变成了</strong></p></blockquote><blockquote><p><strong>F5 8C 8D E4 9F A5 28 65 30 F4 EB D3 24 A9 91 1A</strong></p></blockquote><p><img src="/img/-163836609072323.png" alt="img"></p><p>说明v20-v21所存放的数据也是小端存储 写脚本时需要转过来</p><p>分析完 依据伪代码中加密解密过程改动成脚本</p><p><img src="/img/-163836609072325.png" alt="img"></p><p>脚本如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//RC4加密后的s盒</span><br>    <span class="hljs-keyword">char</span> key[] = <span class="hljs-string">&quot;tallmewhy&quot;</span>;   <span class="hljs-comment">//密钥</span><br><br><br>    <span class="hljs-keyword">char</span> flag[<span class="hljs-number">42</span>] = &#123;<span class="hljs-number">0xF5</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x65</span>,<br>                     <span class="hljs-number">0x30</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xD3</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x1A</span>,<br>                     <span class="hljs-number">0x6F</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0xD7</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE8</span>,<span class="hljs-number">0xB8</span>,<br>                     <span class="hljs-number">0x83</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0x4B</span>,<br>                     <span class="hljs-number">0x99</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xE6</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xEC</span>&#125;;   <span class="hljs-comment">//flag 小端存储获得 </span><br><br><br>    <span class="hljs-keyword">int</span> i,t,w;<br>    <span class="hljs-keyword">int</span> v6 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> v7 = <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)  <span class="hljs-comment">//初始化</span><br>    &#123;<br>        b[i] = key[i%<span class="hljs-number">9</span>];<br>        s[i] = i;<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)  <span class="hljs-comment">//置换s</span><br>    &#123;<br>        v6 = s[i];<br>        v7 = (v7 + b[i] + v6) % <span class="hljs-number">256</span>;<br>        s[i] = s[v7];<br>        s[v7] = v6 ^ <span class="hljs-number">0x37</span>;  <span class="hljs-comment">//此题中为改RC4 加密过程多了一步异或操作</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,v7=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">42</span>;t++)  <span class="hljs-comment">//密钥流</span><br>    &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        v7 = (v7 + s[i]) % <span class="hljs-number">256</span>;<br>        v6 = s[i];<br>        s[i] = s[v7];<br>        s[v7] = v6;<br>        w = (s[i] + s[v7]) % <span class="hljs-number">256</span>;<br>        flag[i<span class="hljs-number">-1</span>] ^= s[w];<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">42</span>;i++)<br>        <span class="hljs-built_in">putchar</span>(flag[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行得到flag</p><h2 id="2-静态分析-动态分析"><a href="#2-静态分析-动态分析" class="headerlink" title="2.静态分析+动态分析"></a>2.静态分析+动态分析</h2><p>动态分析好处是可以越过部分代码分析 只找出关键代码点并设下断点进行动态调试得到值</p><p>使用32位od打开文件</p><p>运行之后f8 直到没有反应 此时就处于main函数入口处</p><p><img src="/img/-163836609072327.png" alt="img"></p><p><img src="/img/-163836609072329.png" alt="img"></p><p>其实可以验证是不是main函数 od里面停在的指令的标志位是1040 ida里面主函数的标志位也为1040</p><p><img src="/img/-163836609072331.png" alt="img"></p><p>在主函数处下断点并重新运行到断点处</p><p><img src="/img/-163836609072433.png" alt="img"></p><p>f7步进主函数里面</p><p><img src="/img/-163836609072435.png" alt="img"></p><p>继续f8单步执行到不动 （标志位相同）</p><p><img src="/img/-163836609072437.png" alt="img"></p><p><img src="/img/-163836609072439.png" alt="img"></p><p><img src="/img/-163836609072441.png" alt="img"></p><p>因为main函数里面gets是我们输入的值</p><p>现在可以缕清此题的逻辑：内部有密钥和声明的值进行RC4加密，我们输入的值与此结果进行比较 相同则ok</p><p>此时我们从ida找到加密算法的最后一步 即最后进行异或的操作（此时代表加密结束 出现结果） 找到相对应的标志位并在od中设置断点</p><p><img src="/img/-163836609072443.png" alt="img"></p><p><img src="/img/-163836609072445.png" alt="img"></p><p><img src="/img/-163836609072447.png" alt="img"></p><p>于是我们现在可以任意输入一串值（建议与flag长度相等）来获得函数内与之异或的值，而且我们知到声明的值</p><p>而且异或的逻辑比较简单 异或回去就可</p><p>我们输入43位长的字符串（应该要42位）</p><p><img src="/img/-163836609072449.png" alt="img"></p><p>找到断点处直接f4执行到此位置 选择在内存窗口中转到-&gt;地址</p><p><img src="/img/-163836609072451.png" alt="img"></p><p><img src="/img/-163836609072453.png" alt="img"></p><p>我们可以看到输入的值还有函数声明的值</p><p><img src="/img/-163836609072555.png" alt="img"></p><p>而我们要关注的是al的值 它里面存放的是与加密算法异或的值</p><p><img src="/img/-163836609072557.png" alt="img"></p><p>进行动态调试（f8）并记录每次运行到断点处指令时al的值</p><blockquote><p><strong>93 e0 ec 83 e4 c6 1d 0 0 92 de b5 12 84 f7 2d 56 b1 47 e2 69 b4 8a 95 ba 72 62 8 93 f9 cc 2d a9 e2 d0 65 4b 78 68 24 d7 91</strong></p></blockquote><p>接下来就是写脚本求flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">str1 = [<span class="hljs-number">0x93</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x92</span>,<br>        <span class="hljs-number">0xde</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0xe2</span>,<br>        <span class="hljs-number">0x69</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0x8a</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0xf9</span>,<br>        <span class="hljs-number">0xcc</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0x91</span>]<br><br><br>str2 = [<span class="hljs-number">0xF5</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x65</span>,<br>        <span class="hljs-number">0x30</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xD3</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x1A</span>,<br>        <span class="hljs-number">0x6F</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0xD7</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE8</span>,<span class="hljs-number">0xB8</span>,<br>        <span class="hljs-number">0x83</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0x4B</span>,<br>        <span class="hljs-number">0x99</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xE6</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xEC</span>]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(str1[i] ^ str2[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{c5e0f5f6-f79e-5b9b-988f-28f046117802}</strong></p></blockquote><hr><h1 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h1><p>主要难点在于去除花指令</p><p>自己写的教程可能没有那么详细</p><p>推荐一下：</p><p><strong><a href="https://www.bilibili.com/video/BV1br4y127eM?spm_id_from=333.1007.top_right_bar_window_history.content.click">绿城杯-Reverse(逆向)-Green-babyvxworks 浅谈花指令_哔哩哔哩_bilibili</a></strong></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">flag = [<span class="hljs-number">188</span>,<span class="hljs-number">10</span>,<span class="hljs-number">187</span>,<span class="hljs-number">193</span>,<span class="hljs-number">213</span>,<span class="hljs-number">134</span>,<span class="hljs-number">127</span>,<span class="hljs-number">10</span>,<span class="hljs-number">201</span>,<span class="hljs-number">185</span>,<span class="hljs-number">81</span>,<span class="hljs-number">78</span>,<span class="hljs-number">136</span>,<span class="hljs-number">10</span>,<span class="hljs-number">130</span>,<br>        <span class="hljs-number">185</span>,<span class="hljs-number">49</span>,<span class="hljs-number">141</span>,<span class="hljs-number">10</span>,<span class="hljs-number">253</span>,<span class="hljs-number">201</span>,<span class="hljs-number">199</span>,<span class="hljs-number">127</span>,<span class="hljs-number">185</span>,<span class="hljs-number">17</span>,<span class="hljs-number">78</span>,<span class="hljs-number">185</span>,<span class="hljs-number">232</span>,<span class="hljs-number">141</span>,<span class="hljs-number">87</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        flag[i] = ((flag[i] - <span class="hljs-number">3</span>) ^ <span class="hljs-number">0x22</span>) &amp; <span class="hljs-number">0xff</span> <span class="hljs-comment">#防止溢出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{helo_w0rld_W3lcome_70_R3}</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识-技巧</title>
    <link href="/others/%E7%9F%A5%E8%AF%86-%E6%8A%80%E5%B7%A7/"/>
    <url>/others/%E7%9F%A5%E8%AF%86-%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="一些汇总"><a href="#一些汇总" class="headerlink" title="一些汇总"></a>一些汇总</h2><h3 id="壳"><a href="#壳" class="headerlink" title="壳"></a><strong>壳</strong></h3><p>压缩壳：对软件进行压缩，使其体积减小；在软件被执行的时候进行解压缩，解压缩后与加壳前程序结构相同</p><p>加密壳：对软件进行保护，使其关键代码不被逆向或者不被破解；在软件被执行后或者执行时进行解密，解密后与加壳前程序结构可能不同</p><p>加密壳保护强度划分：</p><p>PE加密壳：软件加壳后PE格式布局发生变化，解密后PE格式布局与原来不同</p><p>虚拟指令壳：虚拟机的壳，将软件二进制代码中指令进行模拟，保护强度更高</p><hr><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a><strong>寄存器</strong></h3><p>ECX寄存器：用于循环时的计数</p><hr><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a><strong>脱壳</strong></h3><p>寻找OEP，即原始入口点（在加壳前的入口点）</p><hr><h3 id="dump-amp-反dump-amp-反反dump"><a href="#dump-amp-反dump-amp-反反dump" class="headerlink" title="dump &amp; 反dump &amp; 反反dump"></a><strong>dump &amp; 反dump &amp; 反反dump</strong></h3><hr><h3 id="hook技术"><a href="#hook技术" class="headerlink" title="hook技术"></a><strong>hook技术</strong></h3><p>Hook技术无论对安全软件还是恶意软件都是十分关键的一项技术 其本质就是劫持函数调用 </p><p>在程序中可以理解为“劫持”</p><p>简单说hook技术就是在程序运行的时候经过几种技术手段来改变程序流程走向操做者指定的函数 常见的是在调用api函数时 会先运行操做者的函数 而后再进入到本来应该调用的函数上</p><hr><h3 id="TEA-amp-XTEA-amp-XXTEA加密"><a href="#TEA-amp-XTEA-amp-XXTEA加密" class="headerlink" title="TEA &amp; XTEA &amp; XXTEA加密"></a><strong>TEA &amp; XTEA &amp; XXTEA加密</strong></h3><p>xtea算法是tea算法的升级版 增加了更多密钥表 移位和异或操作</p><p>xxtea算法是xtea算法的升级版 比之前两个要更复杂 也叫做Corrected Block TEA</p><hr><h3 id="PE文件"><a href="#PE文件" class="headerlink" title="PE文件"></a><strong>PE文件</strong></h3><hr><h3 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a><strong>UPX</strong></h3><p>一种比较简单的压缩壳</p><p>主要功能是压缩PE文件 如exe dll等文件</p><hr><h3 id="反调试-amp-反反调试"><a href="#反调试-amp-反反调试" class="headerlink" title="反调试 &amp; 反反调试"></a><strong>反调试 &amp; 反反调试</strong></h3><hr><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><h3 id="1"><a href="#1" class="headerlink" title="1:"></a><strong>1:</strong></h3><p>当所需字符串过长时 可以去Hex View窗口查看数组开始地址以及结束地址</p><p><img src="/img/test1.png" alt="img"></p><p><img src="/img/-16383646743653.png" alt="img"></p><hr><h3 id="2"><a href="#2" class="headerlink" title="2:"></a><strong>2:</strong></h3><p>.pyc文件使用在线反编译py软件</p><p>.key文件为txt加密文件 将后缀改为.txt即可</p><hr><h3 id="3"><a href="#3" class="headerlink" title="3:"></a><strong>3:</strong></h3><p>CryptaCreateHash函数中  <strong>0x8004u</strong> 为标识符        此加密可用md5解决</p><hr><h3 id="4"><a href="#4" class="headerlink" title="4:"></a><strong>4:</strong></h3><p>MD5函数特征码</p><p>= 1732584193        或者                  = 0x67452301</p><p>= -271733879                                  = 0xefcdab89</p><p>= -1732584194                                 = 0x98badcfe</p><p>= 271733878                                    = 0x10325476</p><hr><h3 id="5"><a href="#5" class="headerlink" title="5:"></a><strong>5:</strong></h3><p>base64表:</p><p>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</p><p>base58表:</p><p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p><hr><h3 id="6"><a href="#6" class="headerlink" title="6:"></a><strong>6:</strong></h3><p>brainfuck代码由 &lt; &gt; [ ] + - , .八个符号组成</p><p><img src="/img/-16383646743655.png" alt="img"></p><p>[ ]括号里面为for循环</p><hr><h3 id="7"><a href="#7" class="headerlink" title="7:"></a><strong>7:</strong></h3><p>TEA &amp; XTEA &amp; XXTEA加密特征码：</p><p><strong>0x9e3779b9</strong>     或(和)     <strong>0x61c88647</strong></p><hr><h3 id="8"><a href="#8" class="headerlink" title="8:"></a><strong>8:</strong></h3><p>.NET文件使用dnSpy打开 编码方式为c#</p><hr><h3 id="9"><a href="#9" class="headerlink" title="9:"></a><strong>9:</strong></h3><p>__gmpz_init_set_str为 GNU 高精度算法库(GNU Multiple Precision Arithmetic Library)</p><p>__gmpz_powm函数将计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中</p><p>且 <strong>65537</strong> 比较敏感</p><p>所以可以确定为RSA加密算法</p><p><img src="/img/-16383646743667.png" alt="img"></p><hr><h3 id="10"><a href="#10" class="headerlink" title="10:"></a><strong>10:</strong></h3><p>打开python打包的exe文件：</p><p><img src="/img/-16383646743669.png" alt="img"></p><p>首先使用命令（pyinstxtractor.py可自行下载）同一目录下</p><blockquote><p><strong>python pyinstxtractor.py attachment.exe</strong></p></blockquote><p>将exe文件解包</p><p><img src="/img/-163836467436611.png" alt="img"></p><p>找到 <strong>login</strong>或者是<strong>main</strong> 和 <strong>struct</strong></p><p>用winhex查看头部</p><p>将login头部缺少信息用struct头部补充</p><p>最后将login后缀改名.pyc</p><hr><h3 id="11"><a href="#11" class="headerlink" title="11:"></a><strong>11:</strong></h3><p>控制流平坦化：</p><p>一段普通程序添加控制流平坦化后 效果如下图：</p><p><img src="/img/-163836467436613.png" alt="img"></p><p>去除：（需要angr环境）</p><p><img src="/img/-163836467436615.png" alt="img"></p><blockquote><p><strong>python3 deflat.py -f ./attachment –addr 0x400620</strong></p></blockquote><hr><h3 id="12"><a href="#12" class="headerlink" title="12:"></a><strong>12:</strong></h3><p>AES加密模式-CBC判断</p><p><img src="/img/-163836467436617.png" alt="img"></p><hr>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文章-工具-网页</title>
    <link href="/others/%E6%96%87%E7%AB%A0-%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5/"/>
    <url>/others/%E6%96%87%E7%AB%A0-%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h4 id="《汇编语言》——王爽"><a href="#《汇编语言》——王爽" class="headerlink" title="《汇编语言》——王爽"></a>《汇编语言》——王爽</h4><h4 id="《逆向实战分析》——冀云"><a href="#《逆向实战分析》——冀云" class="headerlink" title="《逆向实战分析》——冀云"></a>《逆向实战分析》——冀云</h4><p>链接：<a href="https://pan.baidu.com/s/1HiS4pyHnpNdO8CpNo1ujEQ">https://pan.baidu.com/s/1HiS4pyHnpNdO8CpNo1ujEQ</a><br>提取码：qpjt</p><h4 id="《逆向工程核心原理》——-韩-李承远"><a href="#《逆向工程核心原理》——-韩-李承远" class="headerlink" title="《逆向工程核心原理》——[韩] 李承远"></a>《逆向工程核心原理》——[韩] 李承远</h4><p>链接：<a href="https://pan.baidu.com/s/1Q9hhZM33ZD4lb1z_Qcvncg">https://pan.baidu.com/s/1Q9hhZM33ZD4lb1z_Qcvncg</a><br>提取码：fxfa</p><h4 id="《有趣的二进制：软件安全与逆向分析》——-日-爱甲健二"><a href="#《有趣的二进制：软件安全与逆向分析》——-日-爱甲健二" class="headerlink" title="《有趣的二进制：软件安全与逆向分析》——[日] 爱甲健二"></a>《有趣的二进制：软件安全与逆向分析》——[日] 爱甲健二</h4><p>链接：<a href="https://pan.baidu.com/s/1l7GoVkhnAhKTcyOU-XHrVg">https://pan.baidu.com/s/1l7GoVkhnAhKTcyOU-XHrVg</a><br>提取码：bvik</p><h4 id="《CTF特训营》"><a href="#《CTF特训营》" class="headerlink" title="《CTF特训营》"></a>《CTF特训营》</h4><p>链接：<a href="https://pan.baidu.com/s/1e_HxUmdhE-sR-eZCg-WmJw">https://pan.baidu.com/s/1e_HxUmdhE-sR-eZCg-WmJw</a><br>提取码：xw56</p><hr><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>ALLTOOLS:</p><p>链接：<a href="https://pan.baidu.com/s/1qOMJg1AmBKj5DMbX55I8fQ">https://pan.baidu.com/s/1qOMJg1AmBKj5DMbX55I8fQ</a><br>提取码 / 解压码：flag / hacktheworld</p><p><a href="https://down.52pojie.cn/Tools/Unpackers/">爱盘 - 最新的在线破解工具包 (52pojie.cn)</a></p><hr><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p><p><a href="https://ctf.bugku.com/tools.html">在线工具 - Bugku CTF</a></p><p><a href="https://www.bugku.com/thread-151-1-1.html">CTF中那些脑洞大开的编码和加密_CTF论坛 (bugku.com)</a></p><p><a href="https://docs.python.org/zh-cn/3.7/library/dis.html">dis — Python 字节码反汇编器 — Python 3.7.12 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
