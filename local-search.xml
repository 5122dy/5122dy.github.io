<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安洵杯</title>
    <link href="/reverse/%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    <url>/reverse/%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<p>test</p><p><a href="http://www.zz1syyd.com/">www.zz1syyd.com</a></p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>春秋杯秋赛</title>
    <link href="/reverse/%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%A7%8B%E8%B5%9B/"/>
    <url>/reverse/%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%A7%8B%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑</title>
    <link href="/reverse/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <url>/reverse/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>湖湘杯</title>
    <link href="/reverse/%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
    <url>/reverse/%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>河北师范大学</title>
    <link href="/reverse/%E6%B2%B3%E5%8C%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6/"/>
    <url>/reverse/%E6%B2%B3%E5%8C%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深育杯</title>
    <link href="/reverse/%E6%B7%B1%E8%82%B2%E6%9D%AF/"/>
    <url>/reverse/%E6%B7%B1%E8%82%B2%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>陇原战&#39;疫&#39;</title>
    <link href="/reverse/%E9%99%87%E5%8E%9F%E6%88%98%E2%80%98%E7%96%AB%E2%80%99/"/>
    <url>/reverse/%E9%99%87%E5%8E%9F%E6%88%98%E2%80%98%E7%96%AB%E2%80%99/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>鹤城杯</title>
    <link href="/reverse/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    <url>/reverse/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绿城杯</title>
    <link href="/reverse/%E7%BB%BF%E5%9F%8E%E6%9D%AF/"/>
    <url>/reverse/%E7%BB%BF%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h1><p> 查壳（工具 Exeinfo PE） 发现无壳 32位</p><p><img src="/img/-16383660907221.png" alt="img"></p><h2 id="1-静态分析"><a href="#1-静态分析" class="headerlink" title="1.静态分析"></a>1.静态分析</h2><p>扔进ida32打开 找到main函数 f5反编译一下</p><p><img src="/img/-16383660907233.png" alt="img"></p><p>出现JUMPOUT问题反汇编不了 首先考虑是不是花指令</p><p>shift+f12打开字符串窗口</p><p><img src="/img/-16383660907235.png" alt="img"></p><p>找到与flag有关的字符串双击 找到IDA View窗口中标红的地方</p><p><img src="/img/-16383660907237.png" alt="img"></p><p>关键点为 jz跳转命令是一个无效指令 导致下面adc [edx],esp无法执行</p><blockquote><p><strong>选中jz指令使用Edit-&gt;Patch program-&gt;Assemble nop掉</strong></p></blockquote><p><img src="/img/-16383660907239.png" alt="img"></p><p>并将出现的黄色指令用C键强行转换成代码 直到黄色指令消失</p><p><img src="/img/-163836609072311.png" alt="img"></p><p>这时f5进入main函数的伪代码</p><p>观察发现函数中含有RC4加密算法（函数中多次出现%256要注意是否为RC4加密）</p><p><img src="/img/-163836609072313.png" alt="img"></p><p>与一般RC4不同的是 此题中在加密过程异或了0x37</p><p>找到关键点：</p><blockquote><p><strong>v26=”tallmewhy”  v4=v26的长度且加密中出现%v4   可断定v26为密钥</strong></p></blockquote><p><img src="/img/-163836609072315.png" alt="img"></p><p>回到最前面 找到开头赋值的五组数 五组数在内存空间中连续出现</p><p><img src="/img/-163836609072317.png" alt="img"></p><p><img src="/img/-163836609072319.png" alt="img"></p><p>v20-v21若非十六进制显示可按H键切换</p><p>进入xmmword_4021B0和xmmword_4021C0</p><p><img src="/img/-163836609072321.png" alt="img"></p><p>发现是赋值 选中两条 shift+e 发现是小端存储</p><blockquote><p><strong>1A 91 A9 24 D3 EB F4 30 65 28 A5 9F E4 8D 8C F5h变成了</strong></p></blockquote><blockquote><p><strong>F5 8C 8D E4 9F A5 28 65 30 F4 EB D3 24 A9 91 1A</strong></p></blockquote><p><img src="/img/-163836609072323.png" alt="img"></p><p>说明v20-v21所存放的数据也是小端存储 写脚本时需要转过来</p><p>分析完 依据伪代码中加密解密过程改动成脚本</p><p><img src="/img/-163836609072325.png" alt="img"></p><p>脚本如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//RC4加密后的s盒</span><br>    <span class="hljs-keyword">char</span> key[] = <span class="hljs-string">&quot;tallmewhy&quot;</span>;   <span class="hljs-comment">//密钥</span><br><br><br>    <span class="hljs-keyword">char</span> flag[<span class="hljs-number">42</span>] = &#123;<span class="hljs-number">0xF5</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x65</span>,<br>                     <span class="hljs-number">0x30</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xD3</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x1A</span>,<br>                     <span class="hljs-number">0x6F</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0xD7</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE8</span>,<span class="hljs-number">0xB8</span>,<br>                     <span class="hljs-number">0x83</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0x4B</span>,<br>                     <span class="hljs-number">0x99</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xE6</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xEC</span>&#125;;   <span class="hljs-comment">//flag 小端存储获得 </span><br><br><br>    <span class="hljs-keyword">int</span> i,t,w;<br>    <span class="hljs-keyword">int</span> v6 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> v7 = <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)  <span class="hljs-comment">//初始化</span><br>    &#123;<br>        b[i] = key[i%<span class="hljs-number">9</span>];<br>        s[i] = i;<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)  <span class="hljs-comment">//置换s</span><br>    &#123;<br>        v6 = s[i];<br>        v7 = (v7 + b[i] + v6) % <span class="hljs-number">256</span>;<br>        s[i] = s[v7];<br>        s[v7] = v6 ^ <span class="hljs-number">0x37</span>;  <span class="hljs-comment">//此题中为改RC4 加密过程多了一步异或操作</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,v7=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">42</span>;t++)  <span class="hljs-comment">//密钥流</span><br>    &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        v7 = (v7 + s[i]) % <span class="hljs-number">256</span>;<br>        v6 = s[i];<br>        s[i] = s[v7];<br>        s[v7] = v6;<br>        w = (s[i] + s[v7]) % <span class="hljs-number">256</span>;<br>        flag[i<span class="hljs-number">-1</span>] ^= s[w];<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">42</span>;i++)<br>        <span class="hljs-built_in">putchar</span>(flag[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行得到flag</p><h2 id="2-静态分析-动态分析"><a href="#2-静态分析-动态分析" class="headerlink" title="2.静态分析+动态分析"></a>2.静态分析+动态分析</h2><p>动态分析好处是可以越过部分代码分析 只找出关键代码点并设下断点进行动态调试得到值</p><p>使用32位od打开文件</p><p>运行之后f8 直到没有反应 此时就处于main函数入口处</p><p><img src="/img/-163836609072327.png" alt="img"></p><p><img src="/img/-163836609072329.png" alt="img"></p><p>其实可以验证是不是main函数 od里面停在的指令的标志位是1040 ida里面主函数的标志位也为1040</p><p><img src="/img/-163836609072331.png" alt="img"></p><p>在主函数处下断点并重新运行到断点处</p><p><img src="/img/-163836609072433.png" alt="img"></p><p>f7步进主函数里面</p><p><img src="/img/-163836609072435.png" alt="img"></p><p>继续f8单步执行到不动 （标志位相同）</p><p><img src="/img/-163836609072437.png" alt="img"></p><p><img src="/img/-163836609072439.png" alt="img"></p><p><img src="/img/-163836609072441.png" alt="img"></p><p>因为main函数里面gets是我们输入的值</p><p>现在可以缕清此题的逻辑：内部有密钥和声明的值进行RC4加密，我们输入的值与此结果进行比较 相同则ok</p><p>此时我们从ida找到加密算法的最后一步 即最后进行异或的操作（此时代表加密结束 出现结果） 找到相对应的标志位并在od中设置断点</p><p><img src="/img/-163836609072443.png" alt="img"></p><p><img src="/img/-163836609072445.png" alt="img"></p><p><img src="/img/-163836609072447.png" alt="img"></p><p>于是我们现在可以任意输入一串值（建议与flag长度相等）来获得函数内与之异或的值，而且我们知到声明的值</p><p>而且异或的逻辑比较简单 异或回去就可</p><p>我们输入43位长的字符串（应该要42位）</p><p><img src="/img/-163836609072449.png" alt="img"></p><p>找到断点处直接f4执行到此位置 选择在内存窗口中转到-&gt;地址</p><p><img src="/img/-163836609072451.png" alt="img"></p><p><img src="/img/-163836609072453.png" alt="img"></p><p>我们可以看到输入的值还有函数声明的值</p><p><img src="/img/-163836609072555.png" alt="img"></p><p>而我们要关注的是al的值 它里面存放的是与加密算法异或的值</p><p><img src="/img/-163836609072557.png" alt="img"></p><p>进行动态调试（f8）并记录每次运行到断点处指令时al的值</p><blockquote><p><strong>93 e0 ec 83 e4 c6 1d 0 0 92 de b5 12 84 f7 2d 56 b1 47 e2 69 b4 8a 95 ba 72 62 8 93 f9 cc 2d a9 e2 d0 65 4b 78 68 24 d7 91</strong></p></blockquote><p>接下来就是写脚本求flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">str1 = [<span class="hljs-number">0x93</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x92</span>,<br>        <span class="hljs-number">0xde</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0xe2</span>,<br>        <span class="hljs-number">0x69</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0x8a</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0xf9</span>,<br>        <span class="hljs-number">0xcc</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0x91</span>]<br><br><br>str2 = [<span class="hljs-number">0xF5</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x65</span>,<br>        <span class="hljs-number">0x30</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0xEB</span>,<span class="hljs-number">0xD3</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x1A</span>,<br>        <span class="hljs-number">0x6F</span>,<span class="hljs-number">0xD4</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0xD7</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x8D</span>,<span class="hljs-number">0xE8</span>,<span class="hljs-number">0xB8</span>,<br>        <span class="hljs-number">0x83</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xF4</span>,<span class="hljs-number">0x4B</span>,<br>        <span class="hljs-number">0x99</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xE6</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x7A</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xEC</span>]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(str1[i] ^ str2[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p><strong>flag{c5e0f5f6-f79e-5b9b-988f-28f046117802}</strong></p></blockquote><hr><h1 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h1><p>主要难点在于去除花指令</p><p>自己写的教程可能没有那么详细</p><p>推荐一下：</p><p><strong><a href="https://www.bilibili.com/video/BV1br4y127eM?spm_id_from=333.1007.top_right_bar_window_history.content.click">绿城杯-Reverse(逆向)-Green-babyvxworks 浅谈花指令_哔哩哔哩_bilibili</a></strong></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">flag = [<span class="hljs-number">188</span>,<span class="hljs-number">10</span>,<span class="hljs-number">187</span>,<span class="hljs-number">193</span>,<span class="hljs-number">213</span>,<span class="hljs-number">134</span>,<span class="hljs-number">127</span>,<span class="hljs-number">10</span>,<span class="hljs-number">201</span>,<span class="hljs-number">185</span>,<span class="hljs-number">81</span>,<span class="hljs-number">78</span>,<span class="hljs-number">136</span>,<span class="hljs-number">10</span>,<span class="hljs-number">130</span>,<br>        <span class="hljs-number">185</span>,<span class="hljs-number">49</span>,<span class="hljs-number">141</span>,<span class="hljs-number">10</span>,<span class="hljs-number">253</span>,<span class="hljs-number">201</span>,<span class="hljs-number">199</span>,<span class="hljs-number">127</span>,<span class="hljs-number">185</span>,<span class="hljs-number">17</span>,<span class="hljs-number">78</span>,<span class="hljs-number">185</span>,<span class="hljs-number">232</span>,<span class="hljs-number">141</span>,<span class="hljs-number">87</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        flag[i] = ((flag[i] - <span class="hljs-number">3</span>) ^ <span class="hljs-number">0x22</span>) &amp; <span class="hljs-number">0xff</span> <span class="hljs-comment">#防止溢出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><blockquote><p>flag{helo_w0rld_W3lcome_70_R3}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识-技巧</title>
    <link href="/others/%E7%9F%A5%E8%AF%86-%E6%8A%80%E5%B7%A7/"/>
    <url>/others/%E7%9F%A5%E8%AF%86-%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="一些汇总"><a href="#一些汇总" class="headerlink" title="一些汇总"></a>一些汇总</h2><h3 id="壳"><a href="#壳" class="headerlink" title="壳"></a><strong>壳</strong></h3><p>压缩壳：对软件进行压缩，使其体积减小；在软件被执行的时候进行解压缩，解压缩后与加壳前程序结构相同</p><p>加密壳：对软件进行保护，使其关键代码不被逆向或者不被破解；在软件被执行后或者执行时进行解密，解密后与加壳前程序结构可能不同</p><p>加密壳保护强度划分：</p><p>PE加密壳：软件加壳后PE格式布局发生变化，解密后PE格式布局与原来不同</p><p>虚拟指令壳：虚拟机的壳，将软件二进制代码中指令进行模拟，保护强度更高</p><hr><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a><strong>寄存器</strong></h3><p>ECX寄存器：用于循环时的计数</p><hr><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a><strong>脱壳</strong></h3><p>寻找OEP，即原始入口点（在加壳前的入口点）</p><hr><h3 id="dump-amp-反dump-amp-反反dump"><a href="#dump-amp-反dump-amp-反反dump" class="headerlink" title="dump &amp; 反dump &amp; 反反dump"></a><strong>dump &amp; 反dump &amp; 反反dump</strong></h3><hr><h3 id="hook技术"><a href="#hook技术" class="headerlink" title="hook技术"></a><strong>hook技术</strong></h3><p>Hook技术无论对安全软件还是恶意软件都是十分关键的一项技术 其本质就是劫持函数调用 </p><p>在程序中可以理解为“劫持”</p><p>简单说hook技术就是在程序运行的时候经过几种技术手段来改变程序流程走向操做者指定的函数 常见的是在调用api函数时 会先运行操做者的函数 而后再进入到本来应该调用的函数上</p><hr><h3 id="TEA-amp-XTEA-amp-XXTEA加密"><a href="#TEA-amp-XTEA-amp-XXTEA加密" class="headerlink" title="TEA &amp; XTEA &amp; XXTEA加密"></a><strong>TEA &amp; XTEA &amp; XXTEA加密</strong></h3><p>xtea算法是tea算法的升级版 增加了更多密钥表 移位和异或操作</p><p>xxtea算法是xtea算法的升级版 比之前两个要更复杂 也叫做Corrected Block TEA</p><hr><h3 id="PE文件"><a href="#PE文件" class="headerlink" title="PE文件"></a><strong>PE文件</strong></h3><hr><h3 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a><strong>UPX</strong></h3><p>一种比较简单的压缩壳</p><p>主要功能是压缩PE文件 如exe dll等文件</p><hr><h3 id="反调试-amp-反反调试"><a href="#反调试-amp-反反调试" class="headerlink" title="反调试 &amp; 反反调试"></a><strong>反调试 &amp; 反反调试</strong></h3><hr><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><h3 id="1"><a href="#1" class="headerlink" title="1:"></a><strong>1:</strong></h3><p>当所需字符串过长时 可以去Hex View窗口查看数组开始地址以及结束地址</p><p><img src="/img/test1.png" alt="img"></p><p><img src="/img/-16383646743653.png" alt="img"></p><hr><h3 id="2"><a href="#2" class="headerlink" title="2:"></a><strong>2:</strong></h3><p>.pyc文件使用在线反编译py软件</p><p>.key文件为txt加密文件 将后缀改为.txt即可</p><hr><h3 id="3"><a href="#3" class="headerlink" title="3:"></a><strong>3:</strong></h3><p>CryptaCreateHash函数中  <strong>0x8004u</strong> 为标识符        此加密可用md5解决</p><hr><h3 id="4"><a href="#4" class="headerlink" title="4:"></a><strong>4:</strong></h3><p>MD5函数特征码</p><p>= 1732584193        或者                  = 0x67452301</p><p>= -271733879                                  = 0xefcdab89</p><p>= -1732584194                                 = 0x98badcfe</p><p>= 271733878                                    = 0x10325476</p><hr><h3 id="5"><a href="#5" class="headerlink" title="5:"></a><strong>5:</strong></h3><p>base64表:</p><p>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</p><p>base58表:</p><p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p><hr><h3 id="6"><a href="#6" class="headerlink" title="6:"></a><strong>6:</strong></h3><p>brainfuck代码由 &lt; &gt; [ ] + - , .八个符号组成</p><p><img src="/img/-16383646743655.png" alt="img"></p><p>[ ]括号里面为for循环</p><hr><h3 id="7"><a href="#7" class="headerlink" title="7:"></a><strong>7:</strong></h3><p>TEA &amp; XTEA &amp; XXTEA加密特征码：</p><p><strong>0x9e3779b9</strong>     或(和)     <strong>0x61c88647</strong></p><hr><h3 id="8"><a href="#8" class="headerlink" title="8:"></a><strong>8:</strong></h3><p>.NET文件使用dnSpy打开 编码方式为c#</p><hr><h3 id="9"><a href="#9" class="headerlink" title="9:"></a><strong>9:</strong></h3><p>__gmpz_init_set_str为 GNU 高精度算法库(GNU Multiple Precision Arithmetic Library)</p><p>__gmpz_powm函数将计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中</p><p>且 <strong>65537</strong> 比较敏感</p><p>所以可以确定为RSA加密算法</p><p><img src="/img/-16383646743667.png" alt="img"></p><hr><h3 id="10"><a href="#10" class="headerlink" title="10:"></a><strong>10:</strong></h3><p>打开python打包的exe文件：</p><p><img src="/img/-16383646743669.png" alt="img"></p><p>首先使用命令（pyinstxtractor.py可自行下载）同一目录下</p><blockquote><p><strong>python pyinstxtractor.py attachment.exe</strong></p></blockquote><p>将exe文件解包</p><p><img src="/img/-163836467436611.png" alt="img"></p><p>找到 <strong>login</strong>或者是<strong>main</strong> 和 <strong>struct</strong></p><p>用winhex查看头部</p><p>将login头部缺少信息用struct头部补充</p><p>最后将login后缀改名.pyc</p><hr><h3 id="11"><a href="#11" class="headerlink" title="11:"></a><strong>11:</strong></h3><p>控制流平坦化：</p><p>一段普通程序添加控制流平坦化后 效果如下图：</p><p><img src="/img/-163836467436613.png" alt="img"></p><p>去除：（需要angr环境）</p><p><img src="/img/-163836467436615.png" alt="img"></p><blockquote><p><strong>python3 deflat.py -f ./attachment –addr 0x400620</strong></p></blockquote><hr><h3 id="12"><a href="#12" class="headerlink" title="12:"></a><strong>12:</strong></h3><p>AES加密模式-CBC判断</p><p><img src="/img/-163836467436617.png" alt="img"></p><hr>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文章-工具-网页</title>
    <link href="/others/%E6%96%87%E7%AB%A0-%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5/"/>
    <url>/others/%E6%96%87%E7%AB%A0-%E5%B7%A5%E5%85%B7-%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h4 id="《汇编语言》——王爽"><a href="#《汇编语言》——王爽" class="headerlink" title="《汇编语言》——王爽"></a>《汇编语言》——王爽</h4><h4 id="《逆向实战分析》——冀云"><a href="#《逆向实战分析》——冀云" class="headerlink" title="《逆向实战分析》——冀云"></a>《逆向实战分析》——冀云</h4><p>链接：<a href="https://pan.baidu.com/s/1HiS4pyHnpNdO8CpNo1ujEQ">https://pan.baidu.com/s/1HiS4pyHnpNdO8CpNo1ujEQ</a><br>提取码：qpjt</p><h4 id="《逆向工程核心原理》——-韩-李承远"><a href="#《逆向工程核心原理》——-韩-李承远" class="headerlink" title="《逆向工程核心原理》——[韩] 李承远"></a>《逆向工程核心原理》——[韩] 李承远</h4><p>链接：<a href="https://pan.baidu.com/s/1Q9hhZM33ZD4lb1z_Qcvncg">https://pan.baidu.com/s/1Q9hhZM33ZD4lb1z_Qcvncg</a><br>提取码：fxfa</p><h4 id="《有趣的二进制：软件安全与逆向分析》——-日-爱甲健二"><a href="#《有趣的二进制：软件安全与逆向分析》——-日-爱甲健二" class="headerlink" title="《有趣的二进制：软件安全与逆向分析》——[日] 爱甲健二"></a>《有趣的二进制：软件安全与逆向分析》——[日] 爱甲健二</h4><p>链接：<a href="https://pan.baidu.com/s/1l7GoVkhnAhKTcyOU-XHrVg">https://pan.baidu.com/s/1l7GoVkhnAhKTcyOU-XHrVg</a><br>提取码：bvik</p><h4 id="《CTF特训营》"><a href="#《CTF特训营》" class="headerlink" title="《CTF特训营》"></a>《CTF特训营》</h4><p>链接：<a href="https://pan.baidu.com/s/1e_HxUmdhE-sR-eZCg-WmJw">https://pan.baidu.com/s/1e_HxUmdhE-sR-eZCg-WmJw</a><br>提取码：xw56</p><hr><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>ALLTOOLS:</p><p>链接：<a href="https://pan.baidu.com/s/1qOMJg1AmBKj5DMbX55I8fQ">https://pan.baidu.com/s/1qOMJg1AmBKj5DMbX55I8fQ</a><br>提取码 / 解压码：flag / hacktheworld</p><p><a href="https://down.52pojie.cn/Tools/Unpackers/">爱盘 - 最新的在线破解工具包 (52pojie.cn)</a></p><hr><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p><p><a href="https://ctf.bugku.com/tools.html">在线工具 - Bugku CTF</a></p><p><a href="https://www.bugku.com/thread-151-1-1.html">CTF中那些脑洞大开的编码和加密_CTF论坛 (bugku.com)</a></p><p><a href="https://docs.python.org/zh-cn/3.7/library/dis.html">dis — Python 字节码反汇编器 — Python 3.7.12 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
